/* Grid.Mvc 2.2.0 gridmvc.codeplex.com | gridmvc.codeplex.com/license */

$.fn.extend({ gridmvc: function (a) { var b = []; $(this).each(function () { if (!$(this).hasClass("grid-done")) { b.push(new GridMvc(this, a)); $(this).addClass("grid-done") } }); if (b.length == 1) return b[0]; return b } }); GridMvc = (function () { function f(a, b) { this.jqContainer = $(a); if (typeof (b) == 'undefined') b = {}; if (typeof (b.lang) == 'undefined') { b.lang = this.jqContainer.find("table.grid-table").attr("data-lang") } this.options = $.extend({}, this.defaults(), b); this.init() } f.prototype.init = function () { this.lang = GridMvc.lang[this.options.lang]; if (typeof (this.lang) == 'undefined') this.lang = GridMvc.lang.en; this.events = []; if (this.options.selectable) this.initGridRowsEvents(); this.filterWidgets = []; this.addFilterWidget(new TextFilterWidget()); this.addFilterWidget(new NumberFilterWidget()); this.addFilterWidget(new DateTimeFilterWidget()); this.addFilterWidget(new BooleanFilterWidget()); this.openedMenuBtn = null; this.initFilters() }; f.prototype.initGridRowsEvents = function () { var a = this; this.jqContainer.find(".grid-row").click(function () { a.rowClicked.call(this, a) }) }; f.prototype.rowClicked = function (b) { var c = $(this).closest(".grid-row"); if (c.length <= 0) return; var d = {}; c.find(".grid-cell").each(function () { var a = $(this).attr("data-name"); if (a.length > 0) d[a] = $(this).text() }); b.markRowSelected(c); b.notifyOnRowSelect(d) }; f.prototype.markRowSelected = function (a) { this.jqContainer.find(".grid-row.grid-row-selected").removeClass("grid-row-selected"); a.addClass("grid-row-selected") }; f.prototype.defaults = function () { return { selectable: true, lang: 'en' } }; f.prototype.onRowSelect = function (a) { this.events.push({ name: "onRowSelect", callback: a }) }; f.prototype.notifyOnRowSelect = function (a) { this.notifyEvent("onRowSelect", a) }; f.prototype.notifyEvent = function (a, b) { for (var c = 0; c < this.events.length; c++) { if (this.events[c].name == a) if (!this.events[c].callback(b)) break } }; f.prototype.initFilters = function () { var a = this.filterMenuHtml(); var b = this; this.jqContainer.find(".grid-filter").each(function () { $(this).click(function () { return b.openFilterPopup.call(this, b, a) }) }) }; f.prototype.openFilterPopup = function (a, b) { var c = $(this).attr("data-type"); var d = $(this).attr("data-name"); var g = $(this).attr("data-filtertype"); var h = $(this).attr("data-filtervalue"); var e = $(this).attr("data-url"); var i = a.getFilterWidgetForType(c); if (i == null) return false; if (this.hasAttribute("data-onRendered")) { var j = a.openMenuOnClick.call(this, a); if (!j && typeof (i.onShow) != 'undefined') i.onShow(); return j } $(this).attr("data-onRendered", "1"); $(this).append(b); var k = $(this).find(".menu-popup-widget"); if (typeof (i.onRender) != 'undefined') i.onRender(k, a.lang, c, g, h, function (type, value) { a.closeOpenedPopups(); a.applyFilterValue(e, d, type, value) }); if ($(this).find(".grid-filter-btn").hasClass("filtered") && i.showClearFilterButton()) { var l = $(this).find(".menu-popup-additional"); l.append(a.getClearFilterButton(e)) } var j = a.openMenuOnClick.call(this, a); if (typeof (i.onShow) != 'undefined') i.onShow(); return j }; f.prototype.filterMenuHtml = function () { return '<div class="menu-popup" style="display: none;">                    <div class="menu-popup-wrap">                        <div class="menu-popup-arrow"></div>                        <div class="menu-popup-inner">                            <div class="menu-popup-widget"></div>                            <div class="menu-popup-additional"></div>                        </div>                    </div>                </div>' }; f.prototype.getClearFilterButton = function (a) { if (a.length == 0) a = "?"; return '<ul class="menu-list">                    <li><a class="grid-filter-clear" href="' + a + '">' + this.lang.clearFilterLabel + '</a></li>                </ul>' }; f.prototype.addFilterWidget = function (a) { this.filterWidgets.push(a) }; f.prototype.getFilterWidgetForType = function (a) { for (var b = 0; b < this.filterWidgets.length; b++) { if ($.inArray(a, this.filterWidgets[b].getAssociatedTypes()) >= 0) return this.filterWidgets[b] } return null }; f.prototype.replaceFilterWidget = function (a, b) { for (var c = 0; c < this.filterWidgets.length; c++) { if ($.inArray(a, this.filterWidgets[c].getAssociatedTypes()) >= 0) { this.filterWidgets.splice(c, 1); this.addFilterWidget(b); return true } } return false }; f.prototype.applyFilterValue = function (a, b, c, d) { var g = "grid-filter-col"; var h = "grid-filter-type"; var e = "grid-filter-val"; if (a.length > 0) a += "&"; window.location.search = a + g + "=" + encodeURIComponent(b) + "&" + h + "=" + encodeURIComponent(c) + "&" + e + "=" + encodeURIComponent(d) }; f.prototype.openMenuOnClick = function (b) { if ($(this).hasClass("clicked")) return true; b.closeOpenedPopups(); $(this).addClass("clicked"); var c = $(this).find(".menu-popup"); if (c.length == 0) return true; c.show(); c.addClass("opened"); b.openedMenuBtn = $(this); $(document).click(function (a) { b.documentCallback(a, b) }); return false }; f.prototype.documentCallback = function (a, b) { a = a || event; var c = a.target || a.srcElement; var d = $(".menu-popup.opened").get(0); if (typeof d != "undefined") { do { if (d == c) { return } c = c.parentNode } while (c); d.style.display = "none"; $(d).removeClass("opened") } if (b.openedMenuBtn != null) b.openedMenuBtn.removeClass("clicked"); $(document).unbind("click") }; f.prototype.closeOpenedPopups = function () { var a = $(".menu-popup.opened"); a.hide(); a.removeClass("opened"); if (this.openedMenuBtn != null) this.openedMenuBtn.removeClass("clicked") }; return f })(); if (typeof (GridMvc.lang) == 'undefined') GridMvc.lang = {}; GridMvc.lang.en = { filterTypeLabel: "Type: ", filterValueLabel: "Value:", applyFilterButtonText: "Apply", filterSelectTypes: { Equals: "Equals", StartsWith: "StartsWith", Contains: "Contains", EndsWith: "EndsWith", GreaterThan: "Greater than", LessThan: "Less than" }, code: 'en', boolTrueLabel: "Yes", boolFalseLabel: "No", clearFilterLabel: "Clear filter" }; TextFilterWidget = (function () { function e() { } e.prototype.getAssociatedTypes = function () { return ["System.String"] }; e.prototype.onShow = function () { var a = this.container.find(".grid-filter-input"); if (a.length <= 0) return; a.focus() }; e.prototype.showClearFilterButton = function () { return true }; e.prototype.onRender = function (a, b, c, d, g, h) { this.cb = h; this.container = a; this.lang = b; this.filterValue = g; this.filterType = d; this.renderWidget(); this.registerEvents() }; e.prototype.renderWidget = function () { var a = '<div class="grid-filter-type-label">' + this.lang.filterTypeLabel + '</div>                    <select class="grid-filter-type">                        <option value="1" ' + (this.filterType == "1" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Equals + '</option>                        <option value="2" ' + (this.filterType == "2" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Contains + '</option>                        <option value="3" ' + (this.filterType == "3" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.StartsWith + '</option>                        <option value="4" ' + (this.filterType == "4" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.EndsWith + '</option>                    </select>                    <div class="grid-filter-type-label">' + this.lang.filterValueLabel + '</div>                    <input type="text" class="grid-filter-input" value="' + this.filterValue + '" />                    <div class="grid-filter-buttons">                        <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                    </div>'; this.container.append(a) }; e.prototype.registerEvents = function () { var c = this.container.find(".btn-apply"); var d = this; c.click(function () { var a = d.container.find(".grid-filter-type").val(); var b = d.container.find(".grid-filter-input").val(); d.cb(a, b) }); this.container.find(".grid-filter-input").keyup(function (a) { if (a.keyCode == 13) { c.click() } if (a.keyCode == 27) { GridMvc.closeOpenedPopups() } }) }; return e })(); NumberFilterWidget = (function () { function e() { } e.prototype.showClearFilterButton = function () { return true }; e.prototype.getAssociatedTypes = function () { return ["System.Int32", "System.Double", "System.Decimal", "System.Byte", "System.Single", "System.Float", "System.Int64"] }; e.prototype.onShow = function () { var a = this.container.find(".grid-filter-input"); if (a.length <= 0) return; a.focus() }; e.prototype.onRender = function (a, b, c, d, g, h) { this.cb = h; this.container = a; this.lang = b; this.typeName = c; this.filterValue = g; this.filterType = d; this.renderWidget(); this.registerEvents() }; e.prototype.renderWidget = function () { var a = '<div class="grid-filter-type-label">' + this.lang.filterTypeLabel + '</div>                    <select class="grid-filter-type">                        <option value="1" ' + (this.filterType == "1" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Equals + '</option>                        <option value="5" ' + (this.filterType == "5" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.GreaterThan + '</option>                        <option value="6" ' + (this.filterType == "6" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.LessThan + '</option>                    </select>                    <div class="grid-filter-type-label">' + this.lang.filterValueLabel + '</div>                    <input type="text" class="grid-filter-input" value="' + this.filterValue + '" />                    <div class="grid-filter-buttons">                        <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                    </div>'; this.container.append(a) }; e.prototype.registerEvents = function () { var c = this; var d = this.container.find(".btn-apply"); d.click(function () { var a = c.container.find(".grid-filter-type").val(); var b = c.container.find(".grid-filter-input").val(); c.cb(a, b) }); var g = this.container.find(".grid-filter-input"); g.keyup(function (a) { if (a.keyCode == 13) { d.click() } if (a.keyCode == 27) { GridMvc.closeOpenedPopups() } }).keypress(function (a) { return c.validateInput.call(c, a) }); if (this.typeName == "System.Byte") g.attr("maxlength", "3") }; e.prototype.validateInput = function (a) { var b = a || window.event; var c = b.keyCode || b.which; c = String.fromCharCode(c); var d; switch (this.typeName) { case "System.Byte": case "System.Int32": case "System.Int64": d = /[0-9]/; break; default: d = /[0-9]|\.|\,/ } if (!d.test(c)) { b.returnValue = false; if (b.preventDefault) b.preventDefault() } }; return e })(); DateTimeFilterWidget = (function () { function e() { } e.prototype.getAssociatedTypes = function () { return ["System.DateTime"] }; e.prototype.showClearFilterButton = function () { return true }; e.prototype.onRender = function (a, b, c, d, g, h) { this.jqUiIncluded = typeof ($.datepicker) != 'undefined'; this.cb = h; this.container = a; this.lang = b; this.filterValue = g; this.filterType = d; this.renderWidget(); this.registerEvents() }; e.prototype.renderWidget = function () { var c = '<div class="grid-filter-type-label">' + this.lang.filterTypeLabel + '</div>                    <select class="grid-filter-type">                        <option value="1" ' + (this.filterType == "1" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Equals + '</option>                        <option value="5" ' + (this.filterType == "5" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.GreaterThan + '</option>                        <option value="6" ' + (this.filterType == "6" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.LessThan + '</option>                    </select>' + (this.jqUiIncluded ? '<div class="grid-filter-datepicker"></div>' : '<div class="grid-filter-type-label">' + this.lang.filterValueLabel + '</div>                             <input type="text" class="grid-filter-input" value="' + this.filterValue + '" />                             <div class="grid-filter-buttons">                                <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                             </div>'); this.container.append(c); if (this.jqUiIncluded) { var d = this; var g = this.container.find(".grid-filter-datepicker"); g.datepicker({ onSelect: function (a) { var b = d.container.find(".grid-filter-type").val(); d.cb(b, a) }, defaultDate: this.filterValue, changeMonth: true, changeYear: true }); if (typeof ($.datepicker.regional[this.lang.code]) != 'undefined') { g.datepicker("option", $.datepicker.regional[this.lang.code]) } } }; e.prototype.registerEvents = function () { var c = this; var d = this.container.find(".btn-apply"); d.click(function () { var a = c.container.find(".grid-filter-type").val(); var b = c.container.find(".grid-filter-input").val(); c.cb(a, b) }); this.container.find(".grid-filter-input").keyup(function (a) { if (a.keyCode == 13) { d.click() } }) }; return e })(); BooleanFilterWidget = (function () { function e() { } e.prototype.getAssociatedTypes = function () { return ["System.Boolean"] }; e.prototype.showClearFilterButton = function () { return true }; e.prototype.onRender = function (a, b, c, d, g, h) { this.cb = h; this.container = a; this.lang = b; this.filterValue = g; this.filterType = d; this.renderWidget(); this.registerEvents() }; e.prototype.renderWidget = function () { var a = '<div class="grid-filter-type-label">' + this.lang.filterValueLabel + '</div>                    <ul class="menu-list">                        <li><a class="grid-filter-choose ' + (this.filterValue == "true" ? "choose-selected" : "") + '" data-value="true" href="javascript:void(0);">' + this.lang.boolTrueLabel + '</a></li>                        <li><a class="grid-filter-choose ' + (this.filterValue == "false" ? "choose-selected" : "") + '" data-value="false" href="javascript:void(0);">' + this.lang.boolFalseLabel + '</a></li>                    </ul>'; this.container.append(a) }; e.prototype.registerEvents = function () { var a = this; var b = this.container.find(".grid-filter-choose"); b.click(function () { a.cb("1", $(this).attr("data-value")) }) }; return e })();