@model Cats.Models.Hubs.GiftCertificateViewModel
@using Cats.Models.Hubs
@using Telerik.Web.Mvc
@using System.Web.Mvc
@using Cats.Web.Hub.Helpers
@using Telerik.Web.Mvc.UI

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
    {
    @Html.ValidationSummary(true)
           
            @Html.HiddenFor(model => model.GiftCertificateID)
            @Html.HiddenFor(model => model.rowCount)
            @Html.HiddenFor(model => model.JSONInsertedGiftCertificateDetails)
            @Html.HiddenFor(model => model.JSONUpdatedGiftCertificateDetails)
            @Html.HiddenFor(model => model.JSONDeletedGiftCertificateDetails)
    
        <div class="field-set-title">
            <h2>@Html.Translate("Gift Certificate Headers")</h2>
        </div>
    <div class="field-set">
        <table class="borderless" style="vertical-align: top">
        <tr>
            <td style="vertical-align: top">
                <div class="editor-label">
                    @Html.LabelFor(model => model.GiftDate, Html.Translate("Gift Date")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @* @Html.Telerik().DatePickerFor(model => model.GiftDate).Format("dd-MMM-yyyy")*@
                    @Html.EditorFor(model => model.GiftDate)
                    @Html.ValidationMessageFor(model => model.GiftDate)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DModeOfTransport, Html.Translate("Mode Of transport")) <span class="required">
                        *</span>
                </div>
                <div class="editor-field">
                    @(Html.Telerik().ComboBoxFor(model => model.DModeOfTransport)
                    .BindTo((SelectList)ViewBag.DModeOfTransports)
                    .ClientEvents(ev => ev.OnChange("OnComChange"))
                    .Filterable(filtering =>
                    {
                        filtering.FilterMode(AutoCompleteFilterMode.Contains);
                    }))

                    @Html.ValidationMessageFor(model => model.DModeOfTransport)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ProgramID, Html.Translate("Program")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @(Html.Telerik().ComboBoxFor(model=>model.ProgramID)
                    .BindTo((SelectList)ViewBag.Programs)
            .ClientEvents(ev => ev.OnChange("OnComChange")).Filterable(filtering =>
            {
                filtering.FilterMode(AutoCompleteFilterMode.Contains);
            }))
                    @Html.ValidationMessageFor(model => model.ProgramID)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DonorID, Html.Translate("Donor")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @(Html.Telerik().ComboBoxFor(model => model.DonorID)
           .BindTo((SelectList)ViewBag.Donors)
           .ClientEvents(ev => ev.OnChange("OnComChange")).Filterable(filtering =>
                                                                          {
                                                                              filtering.FilterMode(AutoCompleteFilterMode.Contains);
                                                                          }))

                    @Html.ValidationMessageFor(model => model.DonorID)
                </div>
                
                <div class="editor-label">
                    @Html.LabelFor(model => model.CommodityTypeID, Html.Translate("Commodity Type")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @(Html.Telerik().ComboBoxFor(model => model.CommodityTypeID)
                    .BindTo((SelectList)ViewBag.CommodityTypes)
            .ClientEvents(ev => ev.OnChange("OnComChange").OnChange("OnComOpen")).Filterable(filtering =>
                    {
                        filtering.FilterMode(AutoCompleteFilterMode.Contains);
                    })
                    .Enable(!ViewBag.IsInEditMode))

                    @Html.ValidationMessageFor(model => model.CommodityTypeID)
                    
                </div>

            </td>
            <td style="vertical-align: top">
                @*<div class="editor-label">
                    @Html.LabelFor(model => model.SINumber, Html.Translate("SI/Batch Number")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.SINumber)
                    @Html.ValidationMessageFor(model => model.SINumber)
                </div>*@ @*<div class="editor-label">
                    @Html.LabelFor(model => model.SINumber, Html.Translate("SI/Batch Number")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.SINumber)
                    @Html.ValidationMessageFor(model => model.SINumber)
                </div>*@
                <div class="editor-label">
                    @Html.LabelFor(model => model.PortName, Html.Translate("Port Name"))
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.PortName)
                    @Html.ValidationMessageFor(model => model.PortName)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ReferenceNo, Html.Translate("Reference Number")) <span class="required">
                        *</span>
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.ReferenceNo)
                    @Html.ValidationMessageFor(model => model.ReferenceNo)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Vessel, Html.Translate("Vessel")) <span class="required">*</span>
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Vessel)
                    @Html.ValidationMessageFor(model => model.Vessel)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ETA, Html.Translate("ETA")) <span class="required">*</span>
                </div>

                <div class="editor-field">
                    @Html.Telerik().DatePickerFor(model => model.ETA)
                    @Html.ValidationMessageFor(model => model.ETA)
                </div>
            </td>
        </tr>
    </table>
    </div>
        
        <div class="clear"></div>
        <div class="field-set">
                    <table>
                              <tr>
                                  <td>
                
                                      @(Html.Telerik().Grid(ViewBag.GiftCertificateDetails as IEnumerable<GiftCertificateDetailsViewModel>)
           .Name("Grid")
           .DataKeys(keys =>
                         {
                             keys.Add(p => p.GiftCertificateDetailID);
                         })

           .ToolBar(commands =>
                        {
                            commands.Insert().ButtonType(GridButtonType.Text);
                        })

           .Editable(editing => editing.Mode(GridEditMode.InCell))
           .Columns(columns =>
                        {
                            columns.AutoGenerate(false);
                            columns.ForeignKey(o => o.CommodityID, (System.Collections.IEnumerable)ViewData["Commodities"], "CommodityID", "Name").Width(10).Title(Html.Translate("Commodity"))
                                .Filterable(true);
                            columns.Bound(o => o.BillOfLoading).Width(80).Title(Html.Translate("Bill of Loading"));

                            columns.Bound(o => o.YearPurchased).Width(100).Title(Html.Translate("Year Purchased")).Width(80).HtmlAttributes(new { align = "right" });
                            columns.Bound(o => o.AccountNumber).Width(10).Title(Html.Translate("Acc. No")).Width(80).HtmlAttributes(new { align = "right" });
                            columns.Bound(o => o.WeightInMT).Title(Html.Translate("Sent Qty (MT)")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N3}");
                            columns.Bound(o => o.EstimatedPrice).Title(Html.Translate("Est. Price")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N2}");
                            columns.Bound(o => o.EstimatedTax).Title(Html.Translate("Est. Tax")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N2}");
                        
                            columns.ForeignKey(o => o.DCurrencyID, (System.Collections.IEnumerable)ViewData["DCurrencies"], "DetailID", "Name").Width(10).Title(Html.Translate("Currency"))
                                .Filterable(true);
                            columns.ForeignKey(o => o.DFundSourceID, (System.Collections.IEnumerable)ViewData["DFundSources"], "DetailID", "Name").Width(10).Title(Html.Translate("Fund Source"))
                                .Filterable(true);
                            columns.ForeignKey(o => o.DBudgetTypeID, (System.Collections.IEnumerable)ViewData["DBudgetTypes"], "DetailID", "Name").Width(10).Title(Html.Translate("Fund Type"))
                                .Filterable(true);
                            columns.Bound(o => o.ExpiryDate).Title(Html.Translate("Expiry Date")).Format("{0:dd-MMM-yyyy}").Width(10);
                            columns.Command(commands => commands.Delete().ButtonType(GridButtonType.Text).HtmlAttributes(new { align = "center" })).Width(10).Title(Html.Translate("Commands"));

                        })
           .DataBinding(binding => binding.Ajax()
                                       .Select("SelectGiftCertificateDetails", "GiftCertificate")
                                       .Insert("Create", "GiftCertificate")
                                       .Delete("Delete", "GiftCertificate").OperationMode(GridOperationMode.Client)

           )
           .ClientEvents(e => e.OnEdit("onEdit"))
           .KeyboardNavigation(configurator => configurator.EditOnTab(true))
           .Footer(false)
                                            )
                                      @Html.ValidationMessageFor(model => model.rowCount)
                                  </td>
                              </tr>
                          </table>
        </div>
       <div class="clear"></div>
    <div class="editor-label"></div>
    <div class="editor-field">
        <input class="t-button" type="submit" style="width: 80px; height: 25px;" class="t-button" value="Save"
                               onclick="submitGiftCertificateData()" />
        <input class="t-button" type="reset" style="width: 80px; height: 25px;" class="t-button" value="Cancel"
               onclick="cancel()" />  
        @*<a  class="t-button" href="@Url.Action("Index", "GiftCertificate")" class="btn" id="cancel">Cancel</a>   *@  
    </div>
    <div class="clear"></div>  
    }
<script type="text/javascript">
    function onEdit(e) {
        if ((e.mode == 'edit' || e.mode == 'insert') && (e.dataItem.GiftCertificateDetailID <= 0)) {
            if($('#AccountNumber').val() == '0')
                $('#AccountNumber').val(null);

            if ($('#WeightInMT').val() == '0')
                $('#WeightInMT').val(null);

            if ($('#EstimatedPrice').val() == '0')
                $('#EstimatedPrice').val(null);

            if ($('#EstimatedTax').val() == '0')
                $('#EstimatedTax').val(null);

            
        }
    }

    function cancel() {
        window.location = "/GiftCertificate/";
    }
    function OnComChange(e) {
        $(this).valid();
    }

    function OnSubCommodityGridLoad(e) {
        var combo = $('#CommodityID').data('tComboBox');
        if (combo) {
        }
        var control = $('#CommodityID').data('tComboBox');
        if (control != undefined || control != null) {
            control.dropDown._html = function (items, encode) {
                var sb = new $.telerik.stringBuilder();
                if (!items)
                    return sb.string();

                for (var i = 0, count = items.length; i < count; i++) {
                    var html = " ", item = items[i];
                    html = item.Text; // +"<small style='display: block'>" + item.Text + "</small>";
                    var obj = { html: html, dataItem: item };
                    if (this.onItemCreate) {
                        this.onItemCreate(obj);
                    }
                    if (!(item.unselectable)) {
                        sb.cat('<li unselectable="on" class="t-item" style="background : #ccc">').cat(obj.html).cat("</li>");
                    } else {
                        sb.cat('<li unselectable="on" class="t-item" style="padding-left : 10px;" >').cat(obj.html).cat("</li>");
                    }
                }

                return sb.string();
            };
        }
    }

    function OnComOpen(e) {
        var combo = $('#CommodityID').data('tComboBox');
        var combot = $('#CommodityTypeID').data('tComboBox');
        var comboType = combot.value();
        if (combo && combot && comboType != '') {
            var params = { };
            params["commodityTypeId"] = comboType;
            $.getJSON('@Url.Action("AvailbaleCommodities", "Receive")', params, function (comodities) {
                combo.dataBind(comodities);
                combot.disable();
            });
        } else if(combo){
            var comodities = { };
            combo.dataBind(comodities);
        }

    }
</script>