@model Cats.Models.Hubs.DispatchModel

@using Cats.Web.Hub.Helpers
@using Telerik.Web.Mvc.UI

@{
    string quanityColumnHeader = "MT";
    int Multiplier = 1;
    if (@Html.GetCurrentUser().PreferedWeightMeasurment.ToUpperInvariant() == "QN")
    {
        quanityColumnHeader = "Qtl";
        Multiplier = 10;
    }
    
} 
@*don't use the line below it's buggy*@
@*@Html.HiddenFor(model => model.Type) *@ 
<input id="Type" type="hidden" value="@Model.Type" name="Type">
<p>
    <span class="required">*</span> @Html.Translate("marks required fields in the dispatch screen. Please use this form to create new or edit existing dispatch records.")
</p>
 
@if (ViewBag.Message != null)
{
    <div class="ui-state-error ui-corner-all" style="margin: 1em; padding: 10px;">
        <span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span>
        @ViewBag.Message
    </div>
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"> </script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"> </script>
<div  id="dispatch_form">
    @Html.HiddenFor(model => model.DispatchID)
    @Html.HiddenFor(model => model.DispatchAllocationID)
    @Html.HiddenFor(model => model.OtherDispatchAllocationID)
    @Html.HiddenFor(model => model.JSONInsertedCommodities)
    @Html.HiddenFor(model => model.JSONPrev)
    @Html.HiddenFor(model => model.JSONDeletedCommodities)
    @Html.HiddenFor(model => model.JSONUpdatedCommodities)
    @*@Html.HiddenFor(model => model.Type)*@
        @{
        Model.ChangeStoreManPermanently = false;
     }
    @Html.HiddenFor(model => model.ChangeStoreManPermanently) 
    @*@Html.HiddenFor(model => model.rowCount)*@
    <div class="field-set-title">
        <h2>GIN Details</h2>
    </div>
    <div class="field-set" style="padding: 15px;">
        <div id="fdp-balance" class="field-set" style="width: 300px;display: block;float:right;">
        </div>
        <table class="borderless">
            
            <tr>
                <td class="label">
                    @Html.LabelFor(model => model.GIN, Html.Translate("GIN")) <span class="required">*</span>
                </td>
                <td class="editor">
                    @Html.EditorFor(model => model.GIN)
                    <img id="ajax_loading" src="/images/ajax-loader.gif" style="display: none" />
                    @Html.ValidationMessageFor(model => model.GIN)
                </td>
                <td class="label">
                    @Html.LabelFor(model => model.DispatchDate,Html.Translate("Dispatch Date"))
                </td>
                <td class="editor">
                    @Html.EditorFor( model => model.DispatchDate )
                    @*@Html.Telerik().DatePickerFor(model => model.DispatchDate).Format("dd-MMM-yyyy").Max(DateTime.Today.ToShortDateString())*@
                    @Html.AuditTrial("Dispatch", "DispatchDate", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.DispatchDate)
                </td>
            </tr>
            <tr>
                <td style="width: 200px">@Html.LabelFor(model => model.RequisitionNo,Html.Translate("Requisition No")) <span class="required">*</span>
                </td>
                <td class="editor">
                    @Html.EditorFor(model => model.RequisitionNo) 
                    @Html.AuditTrial("Dispatch", "RequisitionNo", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.RequisitionNo)
                </td>
            </tr>
        
        
    
            @if (Model.Type == 1)
            {
                <tr>
                    <td>
                        @Html.Translate("Region ") <span class="required">*</span>
                    </td>
                    <td class="editor">
                        @(Html.Telerik().ComboBox()
           .Name("RegionID")
           .AutoFill(true)
           .BindTo((SelectList)ViewBag.SelectedRegionId) 
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .Filterable(filtering =>
                           {
                               filtering.FilterMode(AutoCompleteFilterMode.Contains);
                           })
           .HighlightFirstMatch(true).CascadeTo("ZoneID")
           .AutoFill(true)
           .OpenOnFocus(true)
                              )
                        @Html.ValidationMessageFor(model => model.RegionID)
                    </td>
                    <td>
                        @Html.Translate("Zone") <span class="required">*</span>
                    </td>
                    <td class="editor">@(Html.Telerik().ComboBox()
           .Name("ZoneID")
           .AutoFill(true).
           DataBinding(bind => bind.Ajax().Select("GetZones", "AdminUnit").Enabled(true))
           .BindTo((SelectList)ViewBag.SelectedZoneId)
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .Filterable(filtering =>
                           {
                               filtering.FilterMode(AutoCompleteFilterMode.Contains);
                           })  
           .HighlightFirstMatch(true)
           .CascadeTo("WoredaID")
           .AutoFill(true)
                                             )
                        @Html.ValidationMessageFor(model => model.ZoneID)
                    </td>
                </tr>
                <tr>
            
                    <td style="width: 200px">
                        @Html.Translate("Woreda") <span class="required">*</span>
                    </td>
                    <td class="editor">@(Html.Telerik().ComboBox()
           .Name("WoredaID")
           .AutoFill(true).DataBinding(bind => bind.Ajax().Select("GetWoredas", "AdminUnit").Enabled(true))
           .BindTo((SelectList)ViewBag.SelectedWoredaId)
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .Filterable(filtering =>
                           {

                               filtering.FilterMode(AutoCompleteFilterMode.Contains);

                           })
           .HighlightFirstMatch(true).CascadeTo("FDPID")
           .AutoFill(true)
           .OpenOnFocus(true)
                                             )
                        @Html.ValidationMessageFor(model => model.WoredaID)
                    </td>
                    <td style="width: 200px">
           
                        @Html.LabelFor(model => model.FDPID,Html.Translate("FDP")) <span class="required">*</span>
                    </td>
                    <td class="editor">@(Html.Telerik().ComboBox().Name("FDPID")
           .AutoFill(true)
           .BindTo((SelectList)ViewBag.FDPID)
           .DataBinding(bind => bind.Ajax().Select("GetFDPs", "FDP"))

           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange").OnDataBound("onFDPBinding"))
           .Filterable(filtering =>
                           {
                               filtering.FilterMode(AutoCompleteFilterMode.Contains);

                           })
           .HighlightFirstMatch(true)
           .ClientEvents(ev => ev.OnChange("onFDPChange"))
                                             )
                    
                        @Html.AuditTrial("Dispatch", "FDPID", Model.DispatchID)
                        @Html.ValidationMessageFor(model => model.FDPID)
                    </td>
            
                </tr>
        
            }
            else if (Model.Type == 2)
            {
                <tr>
                    <td style="width: 200px">
                        @Html.Translate("Hub") <span class="required">*</span>
                    </td>
                    <td class="editor">
                        @(Html.Telerik().ComboBox()
           .Name("ToHubID")
           .AutoFill(true)
           .BindTo((SelectList)ViewBag.ToHUBs) 
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .Filterable(filtering =>
                           {
                               filtering.FilterMode(AutoCompleteFilterMode.Contains);
                           })
           .HighlightFirstMatch(true)
           .AutoFill(true)
           .OpenOnFocus(true)
                              )
                    </td>
                    <td>
               
                    </td>
                    <td>
                    </td>
                </tr>
            }
            <tr>
                <td style="width: 200px">
                    <div>
                        @Html.LabelFor(model => model.SINumber,Html.Translate("SI Number")) <span class="required">*</span>
                    </div>
                </td>
                <td class="editor">
                    <div>
                        @Html.EditorFor(model => model.SINumber)
                        @Html.AuditTrial("Receive", "SINumber", Model.DispatchID)
                        @Html.ValidationMessageFor(model => model.SINumber)
                    </div>
                </td>
                <td>
                    <div>
                        @Html.LabelFor(model => model.ProjectNumber, Html.Translate("Project Code")) <span class="required">*</span>
                    </div>
                </td>
                <td class="editor">
                    <div>
                        @Html.EditorFor(model => model.ProjectNumber)
                        @Html.AuditTrial("Receive", "ProjectNumber", Model.DispatchID)
                        @Html.ValidationMessageFor(model => model.ProjectNumber)
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 200px">
                    @Html.LabelFor(model => model.StoreID,Html.Translate("Store")) <span class="required">*</span>
                </td>
                <td class="editor">
                    @*@(Html.Telerik().ComboBox()
           .Name("StoreID")
           .AutoFill(true)
           //.BindTo((SelectList)ViewBag.StoreID)
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .Filterable(filtering =>
                           {

                               filtering.FilterMode(AutoCompleteFilterMode.Contains);

                           })
           .HighlightFirstMatch(true).CascadeTo("StackNumber")
           .ClientEvents(events => events.OnChange("storeChanged"))
                          )
                    @Html.ValidationMessageFor(model => model.StoreID)*@
                    <select id="StoreID" name="StoreID"></select>
                </td>
                <td style="width: 200px">
                    @Html.LabelFor(model => model.StackNumber,Html.Translate("Stack Number")) <span class="required">*</span>
                </td>
                <td class="editor">
           @*         @(Html.Telerik().ComboBox().Name("StackNumber")
           .BindTo((SelectList)ViewBag.StoreID)
           .DataBinding(bind => bind.Ajax().Select("StackNumbers", "Store"))
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .AutoFill(true)
           .OpenOnFocus(true)
                          )
                    @Html.AuditTrial("Dispatch", "StackNumber", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.StackNumber)*@
                <select id="StackNumber" name="StackNumber"></select>
                </td>
            </tr>

            <tr>
            <td>
                @Html.LabelFor(model => model.CommodityTypeID, Html.Translate("Commodity Type")) <span class="required">
                    *</span>
            </td>
            <td>
                @(Html.Telerik().ComboBox()

                   .Name("CommodityTypeID")
                   .AutoFill(true)
                   .BindTo((SelectList)ViewBag.CommodityTypeID)
                   .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
                           .ClientEvents(ev => ev.OnChange("OnCommodityTypeChange").OnDataBinding("OnCommodityTypeChange"))
                           .Filterable(filtering =>
                           {

                               filtering.FilterMode(AutoCompleteFilterMode.Contains);

                           })
                           .HighlightFirstMatch(true)
                    .OpenOnFocus(true)
                  )

                @Html.AuditTrial("Receive", "CommodityTypeID", Model.DispatchID)
                @Html.ValidationMessageFor(model => model.CommodityTypeID)
            </td>
            </tr>
            <tr>
            <td>
                @Html.LabelFor(model => model.DispatchDetails[0].CommodityID, Html.Translate("Commodity Type")) <span class="required">
                    *</span>
            </td>
            <td>
                @(Html.Telerik().ComboBox()

                   .Name("CommodityID")
                   .AutoFill(true)
                   .BindTo((SelectList)ViewBag.CommodityID)
                   .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
                           .ClientEvents(ev => ev.OnChange("OnCommodityIDChange").OnDataBinding("OnCommodityIDChange"))
                           .Filterable(filtering =>
                           {

                               filtering.FilterMode(AutoCompleteFilterMode.Contains);

                           })
                           .HighlightFirstMatch(true)
                    .OpenOnFocus(true)
                  )

                @Html.AuditTrial("Dispatch", "CommodityID", Model.DispatchID)
                
            </td>
            </tr>
            <tr>
            
                <td>
                    @Html.LabelFor(model => model.DispatchedByStoreMan, Html.Translate("Dispatched By (Store Man)")) <span class="required">*</span>
                </td>
                <td class="editor">
                    @Html.EditorFor(model => model.DispatchedByStoreMan)
                    @Html.AuditTrial("Dispatch", "DispatchedByStoreMan", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.DispatchedByStoreMan)
                </td>
           
            </tr>
        </table>
    </div>
    <br />
    
    @(Html.Telerik().Grid(ViewBag.SelectedCommodities as IEnumerable<Cats.Models.Hubs.DispatchDetailModel>).Name("dispatchCommoditiesGrid")
    .DataKeys(keys => keys.Add(co => co.Id))
    .ToolBar(commands =>
    {
        commands.Insert().ButtonType(GridButtonType.ImageAndText).ImageHtmlAttributes(new { style = "margin-left:0" });
        //commands.SubmitChanges();
    }
        )

    .Columns(col =>
    {
        //col.ForeignKey(commodity => commodity.CommodityId, (System.Collections.IEnumerable)ViewData["Commodities"], "Id", "Name").Title("Commodity");
        col.ForeignKey(o => o.CommodityID, Model.Commodities, "CommodityID", "Name").Width(10).Title(Html.Translate("Commodity Name"));
        col.Bound(commodity => commodity.Description).Width(300).Title(Html.Translate("Description"));
        col.ForeignKey(o => o.Unit, Model.Units, "UnitID", "Name").Width(10).Title(Html.Translate("Unit"));
        col.Bound(commodity => commodity.RequestedQuantity).Width(30).HtmlAttributes(new { align = "right" }).Title(Html.Translate("Requested Qty (Unit)"));
        col.Bound(commodity => commodity.DispatchedQuantity).Width(30).HtmlAttributes(new { align = "right" }).Title(Html.Translate("Dispatched Qty (Unit)"));
        col.Bound(commodity => commodity.RequestedQuantityMT).Width(30).HtmlAttributes(new { align = "right" }).Format("{0:N3}").Title(Html.Translate("Requested Qty " + quanityColumnHeader));
        col.Bound(commodity => commodity.DispatchedQuantityMT).Width(30).HtmlAttributes(new { align = "right" }).Format("{0:N3}").Title(Html.Translate("Dispatched Qty " + quanityColumnHeader));
        col.Bound(commodity => commodity.DispatchDetailCounter).Hidden(true).ClientTemplate("<div id='group-row-<#= DispatchDetailCounter #>'  class='group-row-dispatch' ></div>"); ;
        
        col.Command(command =>
        {
            command.Delete().ButtonType(GridButtonType.Image).HtmlAttributes(new { align = "center" });
        }).Title(Html.Translate("Commands"));
    })
    .DataBinding(binding => binding.Ajax()
            //.OperationMode(GridOperationMode.Client)
                    .Select("SelectDispatchsCommodities", "Dispatch", new { dispatchId = Model.DispatchID })
                    .Insert("Create", "Dispatch")
                    //.Delete("Delete", "Dispatch").OperationMode(GridOperationMode.Client)

                )
                .ClientEvents(e => e.OnDataBinding("function (e){e.data = {prev : $('#JSONPrev').val()};  OnCommodityTypeChangeValue(" + Model.CommodityTypeID + ");}")
                                          .OnDataBound("function (e){e.data = {prev : $('#JSONPrev').val()};}")
                                          .OnRowDataBound("hideEdit")
                                          .OnEdit("onEdit")
                                          .OnRowSelect("Grid_onRowSelect"))
        .Editable(editing => editing.Mode(GridEditMode.InCell).DefaultDataItem(new Cats.Models.Hubs.DispatchDetailModel())

        ).KeyboardNavigation(configurator => configurator.EditOnTab(true))
          )
          
     <div id="gridEmptyError" style="display: none; color: red">
        @Html.Translate("Please add atleast one commodity to save this Disptach")
    </div>
    <br />
    @Html.ValidationMessageFor(model=>model.DispatchDetails)
    @Html.ValidationMessageFor(model => model.rowCount)
    <br />
    <div class="field-set-title">
        <h2>Transportation Details</h2>
    </div>
<div class="field-set" style="padding: 10px;">
    <table class="borderless">
        <tr>
            <td style="width: 200px">@Html.LabelFor(model => model.TransporterID,Html.Translate("Transporter")) <span class="required">*</span>
            </td>
            <td class="editor">
                @(Html.Telerik().ComboBox().Name("TransporterID")
           .BindTo(new SelectList(Model.Transporters,"TransporterID","Name",Model.TransporterID))
           .AutoFill(true)
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .OpenOnFocus(true)
                      )
                @Html.AuditTrial("Dispatch", "TransporterID", Model.DispatchID)
                @Html.ValidationMessageFor(model => model.TransporterID)
            </td>
            <td style="width: 200px">@Html.LabelFor(model => model.DriverName, Html.Translate("Driver Name")) <span class="required">*</span>
            </td>
            <td class="editor">@Html.EditorFor(model => model.DriverName)
                @Html.AuditTrial("Dispatch", "DriverName", Model.DispatchID) 
                @Html.ValidationMessageFor(model => model.DriverName)
            </td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.PlateNo_Prime, Html.Translate("Plate No Prime")) <span class="required">*</span>
            </td>
            <td class="editor">@Html.EditorFor(model => model.PlateNo_Prime)
                @Html.AuditTrial("Dispatch", "PlateNo_Prime", Model.DispatchID)
                @Html.ValidationMessageFor(model => model.PlateNo_Prime)
            </td>
            <td>@Html.LabelFor(model => model.PlateNo_Trailer, Html.Translate("Plate No Trailer"))
            </td>
            <td class="editor">@Html.EditorFor(model => model.PlateNo_Trailer)
                @Html.AuditTrial("Dispatch", "PlateNo_Trailer", Model.DispatchID)
                @Html.ValidationMessageFor(model => model.PlateNo_Trailer)
            </td>
        </tr>
        @if(Model.Type == 1){
            <tr>
                <td>@Html.LabelFor(model => model.BidNumber, Html.Translate("Bid Number")) <span class="required">*</span>
                </td>
                <td class="editor">@Html.EditorFor(model => model.BidNumber)
                    @Html.AuditTrial("Dispatch", "BidNumber", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.BidNumber)
                </td>
                <td>
                    @* Allocation Period*@
                </td>
                <td>
                </td>
            </tr>
        }
        <tr>
            <td>
                @Html.Translate("Program") <span class="required">*</span>
            </td>
            <td class="editor">
                @(Html.Telerik().ComboBox().Name("ProgramID")
           .BindTo((SelectList)ViewBag.ProgramID)
           .AutoFill(true)
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .OpenOnFocus(true)
                      )
                @Html.AuditTrial("Dispatch", "ProgramID", Model.DispatchID)
                @Html.ValidationMessageFor(model => model.ProgramID)
            </td>
            
            <td>@Html.LabelFor(model => model.WeighBridgeTicketNumber, Html.Translate("Weight Bridge Ticket Number"))
            </td>
            <td class="editor">@Html.EditorFor(model => model.WeighBridgeTicketNumber)
                @Html.AuditTrial("Dispatch", "WeighBridgeTicketNumber", Model.DispatchID)
                @Html.ValidationMessageFor(model => model.WeighBridgeTicketNumber)
            </td>
            
        </tr>
        @if (Model.Type == 1)
        {
            <tr>
                <td>
                    @Html.Translate("Year") <span class="required">*</span>
                </td>
                <td class="editor">
                    @(Html.Telerik().ComboBox().Name("Year")
           .BindTo((SelectList) ViewBag.Year)
           .AutoFill(true)
           .HtmlAttributes(new {style = string.Format("width:{0}px", 200)})
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .OpenOnFocus(true)
           .CascadeTo("Month")
                          )
                    @Html.AuditTrial("Dispatch", "PeriodID", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.Year)
                </td>
                <td>
                    @Html.Translate("Month") <span class="required">*</span>
                </td>
                <td class="editor">
                    @(Html.Telerik().ComboBox().Name("Month")
           .BindTo((SelectList) ViewBag.Month)
           .DataBinding(bind => bind.Ajax().Select("Months", "Dispatch"))
           .AutoFill(true)
           .HtmlAttributes(new {style = string.Format("width:{0}px", 200)})
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .OpenOnFocus(true)
                          )
                    @Html.AuditTrial("Dispatch", "PeriodID", Model.DispatchID)
                    @Html.ValidationMessageFor(model => model.Month)
                </td>
            </tr>
        }
        <tr>
            <td>
                @Html.LabelFor(model => model.Remark, Html.Translate("Remark"))
            </td>
            <td colspan="3">
                @Html.EditorFor(model => model.Remark, new { cols = "60" })
                @Html.AuditTrial("Dispatch", "Remark", Model.DispatchID)
            </td>
        </tr>
        <tr>
            <td>
            </td>
            <td>
                <input type="submit" style="width: 80px; height: 25px;" class="t-button" value="@Html.Translate("Save")"
                       onclick="return submitData();" />
                <input type="button" style="width: 80px; height: 25px;" class="t-button" value="@Html.Translate("Cancel")"
                       onclick="cancel()" />
            </td>
        </tr>
    </table>
</div>
</div>
<script type="text/javascript">
    var selectedRegion = '';
    var selectedZone = '';
    
    function storeChanged(id) {
        if (id != "") {
            var url = "@Url.Action("StoreManName", "Store", new {Area = "Hub"})";
            $.getJSON(url, { storeId: id }, function (name) {
                if (name != "" )//|| $('#DispatchedByStoreMan').val() == "Please Specify") 
                $('#DispatchedByStoreMan').val(name);
                $('#DispatchedByStoreMan').valid();
            });
            $.getJSON("@Url.Action("StackNumbers", "Store", new {Area = "Hub"})", { StoreID: id, editModval: '@Model.StackNumber' }, function (result) {
                if (result != "" && result != null) {
                    //$('#StoreID').data('tComboBox').value(result[0]);
                    var options = '<option value="">-- Select a Stack</option>';
                    for (var i = 0; i < result.length; i++) {
                        options += '<option value="' + result[i].Value + '">' + result[i].Text + '</option>';
                    }
                    $("#StackNumber").html(options);

                }
            });
        }
        else {
            $('#DispatchedByStoreMan').val("");
        }
    }

    function hideEdit(e) {
        //if (e.dataItem.ReceiveDetailID >= 0) {
        if (e.dataItem.DispatchDetailCounter > 0) {
            $(e.row).find('a.t-grid-delete').remove();
        } else {
            var xcv = $(e.row).attr("id", "grid-row-dispatch" + e.dataItem.DispatchDetailCounter);
        }
    }
    
    function cancel() {
        window.location = "/Dispatch/";
    }
    function onFDPChange(e) {
     
        loadFdpBalance();
    }
    function loadFdpBalance() {
        var reqNo = $('#RequisitionNo');
        var fdp = $('#FDPID').data('tComboBox');
        if (reqNo && fdp) {
        var s = $(reqNo).val();
        var f = fdp.value();
        if (s != '' && f != '') {
            $.getJSON('/Dispatch/FDPBalance', { RequisitionNo: s, FDPID: f }, function (fdpBalance) {
                var content = "";
                if (fdpBalance.TotalAllocation > 0) {
                    // prepare the allocation display
                    content = "<table><tr><td style='width:120px'>Commodity</td><td style='width:120px;text-align:right'><b>" + fdpBalance.Commodity + "<b></td></tr><tr><td>Total Allocated " + (fdpBalance.mesure)  +"</td><td style='font-weight:bold;text-align:right'><b>" + formatNumber(((fdpBalance.TotalAllocation / 10) * (fdpBalance.multiplier)).toFixed(3))
                                + "</b></td><tr><td>Dispatched " + ( fdpBalance.mesure ) + "</td><td style='font-weight:bold;text-align:right'><b>" +formatNumber (((fdpBalance.TotalDispatchedMT)*( fdpBalance.multiplier )).toFixed(3))
                                + "</b></td></tr><tr><td>Balance " + ( fdpBalance.mesure ) + "</td><td style='font-weight:bold;text-align:right'><b>" +formatNumber( ((fdpBalance.CurrentBalance / 10)*( fdpBalance.multiplier )).toFixed(3)) + "</b></td></tr></table>";
                    // populate the possible combo box values;
                   // $('#ProgramID').data('tComboBox').value(fdpBalance.ProgramID);
                    //$('#CommodtiyTypeID').data('tComboBox').value(fdpBalance.CommdityTypeID);
                  //  $('#TransporterID').data('tComboBox').value(fdpBalance.TransporterID);

                   // if ($('#TransporterID').data('tComboBox').value() == "" )
                     //   $('#TransporterID').data('tComboBox').value(fdpBalance.TransporterID);
                    //  $('#BidNumber').val(fdpBalance.BidNumber);
                  //  $('#ProjectNumber').val(fdpBalance.ProjectCode);
                }
                if (content == "") {
                    content = "No dispatch allocation found for this FDP";
                }
                $('#fdp-balance').html(content);

            });
        }
        }
    }
    function Grid_onRowSelect() {
        var row = e.row;
        $(row).attr('disabled', 'disabled');
        $(row).find('t-grid-edit-cell t-widget t-combobox t-header t-dropdown-wrap t-state-default t-select t-header t-icon t-arrow-down').attr('disabled', 'disabled');

    }
    function onEdit(e) {
        if ((e.mode == 'edit') && (e.dataItem.DispatchDetailCounter > 0)) {
            
            if ($('#CommodityID').data('tComboBox') != null) {
                $('#CommodityID').data('tComboBox').disable();
            }
            if ($('#UnitID').data('tComboBox') != null) {
                $('#UnitID').data('tComboBox').disable();
            }

            $('#RequestedQuantityMT').attr('disabled', 'disabled');
            $('#DispatchedQuantityMT').attr('disabled', 'disabled');
            $('#RequestedQuantity').attr('disabled', 'disabled');
            $('#DispatchedQuantity').attr('disabled', 'disabled');
        }

        if ((e.mode == 'insert') && (e.dataItem.DispatchDetailCounter == 0)) {
            var min = null;
            var insertData = $.grep($('#dispatchCommoditiesGrid').data().tGrid.changeLog.inserted, function (toins) { return (toins); });
            var gr = $('#dispatchCommoditiesGrid').data('tGrid').data;


            $.each(gr, function (j) {
                if (gr[j].DispatchDetailCounter < min && (j == 0 || min == null)) {
                    min = gr[j].DispatchDetailCounter;
                }
            });

            $.each(insertData, function (i) {
                if ((insertData[i].DispatchDetailCounter < min) || (i == 0 && min == null)) {
                    min = insertData[i].DispatchDetailCounter;
                }
            });

            if (min == null) {
                e.dataItem.DispatchDetailCounter = -1;
            }
            else {
                e.dataItem.DispatchDetailCounter = min - 1;
            }
            var xcv = $(e.cell).parent().attr("id", "grid-row-dispatch" + e.dataItem.DispatchDetailCounter);
            //$('#gridEmptyError').hide();

        }
    }
    function onComBinding(e) {
        var combo = $('#CommodityID').data('tComboBox');
        if (combo) {
            var siText = $('#SINumber');
            if(siText && $(siText).val() != ''){

                var params = {};
                params["SINumber"] = $(siText).val();
                $.getJSON('@Url.Action("AvailbaleCommodities", "Dispatch")', params, function (comodities) {
                    combo.dataBind(comodities);
                });               
            }
        }
    }
    function onFDPBinding(e) {
        loadFdpBalance();
    }
    

    $(function () {
        //if ($('#ZoneID').data('tComboBox').attr('disabled') != null) {
        $('#WoredaID').removeAttr('disabled');
        //}
        //$('#SINumber').keyup(function () { return false; });
        //        $("form input[data-val-remote-url]").on({
        //            focus: function () {
        //                $(this).closest('form').validate().settings.onkeyup = false;
        //            },
        //            blur: function () {
        //                $(this).closest('form').validate().settings.onkeyup =
        //                $.validator.defaults.onkeyup;
        //            }
        //        });
        //$('#SelectedRegionId').change();
        //$('#WarehouseID').change();
        
        $('#GIN').change(function () {
            if ($(this).val() != "") {
                $('#ajax_loading').show();
                var params = {};
                var ginNo = $(this).val();
                params['ginNo'] = ginNo;
                $.getJSON('@Url.Action("JsonDispatch", "Dispatch")', params, function (dispatch) {
                    if (dispatch != null) {
                        loadDispatch(ginNo, '@Model.Type');
                        $('#GIN').val(ginNo);
                    } else {
                        $('#ajax_loading').hide();
                    }
                });
            }
        });

        $('#DispatchedByStoreMan').change(function () {
            if ($(this).val() != "" && $('#StoreID').attr('disabled') != "disabled") {

                $("<div id='Dialog_Store_Man'><strong>Are you sure you want to change the Store Man Permanently ?</strong><br/>Press Cancel for changes to the current receipt only, Press yes to change the store man Permanently.</div>").dialog({
                    autoOpen: true,
                    modal: true,
                    title: "Confirm Pemanent Change Of Store Man",
                    content: "",
                    buttons: {
                        "Yes": function () {
                            $('#ChangeStoreManPermanently').val(true);
                            $(this).dialog("close");
                        },
                        "Cancel": function () {
                            $('#ChangeStoreManPermanently').val(false);
                            $(this).dialog("close");
                        }
                    }
                });
            }
        });

        $('#RequisitionNo').change(function () {
            var url = '@Url.Action("JsonRegionZones","Dispatch")';
            $.getJSON(url, { requisitionNumber: $('#RequisitionNo').val() }, function (result) {
                if (result != "" && result != null) {
                    //$('#SelectedRegionId').data('tComboBox').value(result.region);
                }
            });
            loadFdpBalance();
        });
        // initDispatchCascade();
        wireUpAuditLinks();
        $('#SINumber').blur(function () {
            var url = '@Url.Action("JsonSIStores","Dispatch")';
            $.getJSON(url, { siNumber: $('#SINumber').val(), editModval: '@Model.SINumber' }, function (result) {
                //for (var i = 0; i < 2; i++)
                //    alert(result[i].Text);
                if (result != "" && result != null) {
                    //$('#StoreID').data('tComboBox').value(result[0]);
                    var options = '<option value="">-- Select a Store</option>';
                    for (var i = 0; i < result.length; i++) {
                        options += '<option value="' + result[i].Value + '">' + result[i].Text + '</option>';
                    }
                    $("#StoreID").html(options);
                    
                }
            });
            loadFdpBalance();
        });
        $('#StoreID').change(function () {
            var storeID = $('#StoreID').val();
            storeChanged(storeID);
        });
    });
    function OnComChange() {
    // console.log("on combobox change event is fired");
        $(this).valid();
    }
        function OnCommodityTypeChange(e) {
      //  OnCommodityTypeChange(e);
        OnCommodityTypeChangeValue(e.value);
    }
    
    function OnCommodityTypeChangeValue(val) {
            if(val == 1 ) {
            var gr = $('#dispatchCommoditiesGrid').data('tGrid');
            if(gr!=null) {
                gr.showColumn(5);
                gr.showColumn(6);
            }

        }else if(val == 2 ){
            var gr = $('#dispatchCommoditiesGrid').data('tGrid');
            if(gr!=null) {
                gr.hideColumn(5);
                gr.hideColumn(6);
            }
        }
    
    }
    
    function OnComOpen(e) {
        var combo = $('#CommodityID').data('tComboBox');
        var comboType = $('#CommodityTypeID').data('tComboBox').value();
        if (combo) {
            var siText = $('#SINumber');
            if (siText) { // && $(siText).val() != '') {

                var params = {};
                params["SINumber"] = $(siText).val();
                params["commodityTypeId"] = comboType;
                params["dispatchAllocationID"] = $('#dispatchAllocationID').val();
                params["CommoditySourceID"] = $('#CommoditySourceID').val();
                $.getJSON('@Url.Action("AvailbaleCommodities", "Dispatch")', params, function (comodities) {
                    combo.dataBind(comodities);
                });
            }
        }
    }
</script>
