@model IEnumerable<Cats.Models.Hubs.Receive>
@using Cats.Web.Hub.Helpers
@using Kendo.Mvc.UI
@{
    ViewBag.Title = Html.Translate("Expected Receipts");

    string quanityColumnHeader = "MT";
    if (@Html.GetCurrentUser().PreferedWeightMeasurment == "qn")
    {
        quanityColumnHeader = "Quintals";
    }
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
@section Toolbar
{
    <a class="btn" href="@Url.Action("Log")">@Html.Translate("Receipt Log")</a>
    <div class="btn-group">
        
        <button class="btn toolbar-btn" title="Make a new Plan" onclick="CreateNewPlan()">New Plan</button>
            <button class="btn dropdown-toggle " data-toggle="dropdown">
                <span class="caret"></span>
            </button>
        <ul class="dropdown-menu">
            <li><a href="javascript:CreateNewPlan(@Cats.Models.Hubs.CommoditySource.Constants.DONATION)">@Html.Translate("From Donation")</a></li>
            <li><a href="javascript:CreateNewPlan(@Cats.Models.Hubs.CommoditySource.Constants.LOAN)">@Html.Translate("From Loan")</a></li>
            <li><a href="javascript:CreateNewPlan(@Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)">@Html.Translate("From Local Purchase")</a></li>

        </ul>
   </div>  

    <div class="btn-group">
        <button class="btn toolbar-btn" title="Record a new receipt">Receipt</button>
            <button class="btn dropdown-toggle " data-toggle="dropdown">
                <span class="caret"></span>
            </button>
        <ul class="dropdown-menu">
            <li>@Html.ActionLink("From Loan", "Create", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.LOAN }, null)</li>
            <li> @Html.ActionLink("From Repayment", "Create", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.REPAYMENT }, null)</li>
            <li>@Html.ActionLink("From Swap", "Create", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.SWAP }, null)</li>
            <li>@Html.ActionLink("From Transfer", "Create", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.TRANSFER }, null)</li>
        </ul>
    </div>
}
<style>
    .filter
    {
        background:#FFF;
        border-radius:4px;
        border:solid 4px #FFF;
        box-shadow: rgba(0,0,0,0.3) 0px 0px 2px;
    }
    .close_false
    {
        color:#f00;
    }
    .close_false
        {
        }

        .close_true
        {
            display: none;
        }
                .two-col-form .control-group
        {
            float: left;
            width: 49%;
            /* background:#EEE;
        border:solid 1px #ff6a00;
    */
        }
</style>
<h3>Reciept Allocation</h3>
<div class="filter">
    
<form class="form-inline" style="margin:0;padding:0;">
    <i class="icon-filter" style="margin-left:10px;"></i>
    <div class="input-prepend" style="margin-left:20px;">
        <label for="cmb_hub" class="add-on">Hub</label>
        @Html.DropDownList("HubsID", null, new { @class = "inputs-large" })

    </div>
    <div class="input-prepend" style="margin-left:50px;">
        <label for="cmb_commodity_type" class="add-on">Commodity</label>
        @Html.DropDownList("FilterCommodityTypeID", null, new { @class = "inputs-large" })
    </div>

  <label class="checkbox" style="margin-left:50px;">
    <input type="checkbox" id="chk_closed"> Show closed Plans
  </label>

</form>
</div>


<div style="display:none;">
    @Html.Translate("This page lists receipts and receipt allocations for the selected Hub. Please use the filters on the column headers to select any recipt plan.")
    @Html.Translate("If you would like to see previously recorded receipts, please click")  @Html.ActionLink(@Html.Translate("Receipt Log"), "Log") 
</div>


     <!--Modal Editor-->
    <div id="modal_edit_window" class="modal hide fade" style="width: 900px;" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">

        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="modal_label">Create Plan</h3>
        </div>

        <div class="modal-body" id="modal_body">
        </div>

        <div class="modal-footer">
            <button class="btn btn-danger" data-dismiss="modal" aria-hidden="true"><i class="icon-white icon-remove"></i> @Html.Translate("Cancel")</button>
            <!--<button class="btn btn-primary" onclick="initValidation('frm_edit_inline')">Validate</button>-->
            <button class="btn btn-primary" onclick="submitInlineForm('#modal_body form')"><i class="icon-white icon-ok"></i> @Html.Translate("Ok")</button>

        </div>

    </div>
<br />

        <ul id="myTab" class="nav nav-tabs">
            <li class="active"><a href="#from_donation" data-toggle="tab" onclick="onSourceTypeChange(@Cats.Models.Hubs.CommoditySource.Constants.DONATION)">From Donation</a></li>
            <li><a href="#from_loan" data-toggle="tab" onclick="onSourceTypeChange(@Cats.Models.Hubs.CommoditySource.Constants.LOAN)">@Html.Translate("From Loan, Swap,  Repayment Or Transfer")</a></li>
            <li><a href="#local_purchase" data-toggle="tab" onclick="onSourceTypeChange(@Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)">Local purchase</a></li>
        </ul>

        <div id="myTabContent" class="tab-content">
            <div class="tab-pane fade active in" id="from_donation">
                <div class="field-set">
                    @Html.Action("Allocationlist2", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.DONATION })
                </div>
            </div>

            <div class="tab-pane fade" id="from_loan">
                <div class="field-set">
                       @Html.Action("Allocationlist2", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.LOAN })
                 </div>
            </div>

            <div class="tab-pane fade" id="local_purchase">
                <div class="field-set">
                    @Html.Action("Allocationlist2", "Receive", new { type = Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE })
                </div>
            </div>
        </div>





<script>
    var sourceType = 1;
    function getSourceName(type) {
        type = type ? type : sourceType;
        var title;
        if (type == 1)
            title='@Html.Translate("Donation")';
        if (type == 2)
            title='@Html.Translate("Loan, Swap, Repayment Or Other")';
        if (type == 3)
            title='@Html.Translate("Local Purchase")';
        return title;

        var url = '@Url.Action("LoadBySIPartial", "ReceiptAllocation")';
        $("#modal_label").html("Create Receipt Plan From " + title);
        $("#modal_body").html("...Loading");
        $('#modal_create_plan').modal();
        $.post(url, { type: type }, function (data) {
            $("#modal_body").html(data);
        });
    }
    function onSourceTypeChange(type) {
        sourceType = type;
    }
    function EditPlan(ReceiptAllocationID, type) {
        var title = getSourceName(type);
        var url = '@Url.Action("Edit2", "ReceiptAllocation")';
        var attribs = { allocationId: ReceiptAllocationID, type: type };
        var title = "Edit Receipt Plan - From " + title;
        showModalEditor(url, attribs, title)
    }
    function ClosePlanByID(ReceiptAllocationID, type) {
        var url = '@Url.Action("Close", "ReceiptAllocation")';
        var attribs = { id: ReceiptAllocationID, type: type };
        var title = "Close Receipt Plan";
        showModalEditor(url, attribs, title)
    }
    function CreateNewPlan(type) {
        type = type ? type : sourceType;
        var title = getSourceName(type)

        var url = '@Url.Action("LoadBySIPartial", "ReceiptAllocation")';
        var attribs = { type: type };
        var title = "Create Receipt Plan - From " + title;
        showModalEditor(url, attribs, title)
    }
    function submitInlineForm(frmId) {

        var $frm = $(frmId);
        //alert($frm.valid());
        try {
            if (!$frm.valid()) {
                // alert("Error");
                return;
            }
        }
        catch (e) { }
        // alert("valid");
        //return;
        // return;
        var url = $frm.attr("action");
        var attribs = {};
        console.log("submitForm ", url);
        $frm.hide();
        /*
        var $inputs = $("#" + frmId + " input");
        $inputs.each(function (index, element) {
            //console.log("   submitForm ", element);
            if (element.name) {
                attribs[element.name] = element.value;
            }
        });
        */
        attribs = $frm.serialize();
        //console.log(attribs);
        $.post(url, attribs, function (data) {
            $frm.show();
            console.log("Submit Result", data);
            var submitResult = data;
            if (typeof (data) == "string") {
                eval("submitResult = " + data);
            }
            if (submitResult.status) {
                $('#modal_edit_window').modal(('hide'));
                dataRefresh();
            }
            //$("#modal_body").html(data);

            //alert(data);
        });
    }
    function showModalEditor(url, attribs, title) {
        $("#modal_label").html(title);
        $("#modal_body").html("...Loading");
        $('#modal_edit_window').modal();

        /*
        $.post(url, attribs, function (data) {
            $("#modal_body").html(data);
        });
        */
        $.get(url, attribs, function (data) {
            $("#modal_body").html(data);
            setTimeout(function () {
                initValidation()
            }, 1000);

        });
    }
    function initValidation() {
        $.validator.unobtrusive.parse(document);
        console.log("validating");
    }
    $(function () {
        

        $("#FilterCommodityTypeID").change(dataRefresh);
        $("#HubsID").change(dataRefresh);
        $("#chk_closed").change(dataRefresh);

    });
    function getFilterAttributes() {
        var closed = "false";
        if (document.getElementById("chk_closed").checked) {
            closed = "true";
        }
        var commodityType = $("#FilterCommodityTypeID").val();
        var HubID = $("#HubsID").val();
        return { closed: closed, commodityType: commodityType, HubID: HubID};
    }
    function dataRefresh(refreshGrids) {
        //alert();
        //return;
        
        var gridUrl = '@Url.Action("AllocationListJson", "Receive")';
        var gridTypes=[@Cats.Models.Hubs.CommoditySource.Constants.DONATION,
                        @Cats.Models.Hubs.CommoditySource.Constants.LOAN,
                        @Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE]

            var attribs = getFilterAttributes();
            console.log("dataRefresh ", attribs);
            var urlParams = "";
            var sep = "&";
            for (var i in attribs) {
                if (attribs[i] != "") {
                    urlParams += sep + i + "=" + attribs[i];
                    sep = "&";
                }
            }
           
            for (var i in gridTypes) {
                var loadUrl = gridUrl + "?type=" + gridTypes[i] +  urlParams;
                var gridName="ReceiveAllocationGrid" + gridTypes[i];
                console.log("   " + gridName, loadUrl);
                var gr = $("#" + gridName).data("kendoGrid");
                if (gr != null) {
                    gr.dataSource.transport.options.read.url = loadUrl;
                    gr.dataSource.filter({});
                }
            }

        }
</script>
<!--
<script type="text/javascript">
    
    function CreateNewPlan(type)
    {
        $('#ReceiptDialog').data('tWindow').center().open();
        if(type == 1)
            $('#ReceiptDialog').data('tWindow').title('@Html.Translate("Edit/New Receipt Plan From Donation")');
        if (type == 2)
            $('#ReceiptDialog').data('tWindow').title('@Html.Translate("Edit/New Recipt Plan From Loan, Swap, Repayment Or Other")');
        if (type == 3)
            $('#ReceiptDialog').data('tWindow').title('@Html.Translate("Edit/New Recipt Plan From Local Purchase")');
       // $('#create-link').hide();
       // $('#create-edit-form').show();
        var url = '@Url.Action("LoadBySIPartial", "ReceiptAllocation")';
        $('#create-edit-form').load(url, { type: type },function () {
            //if($('#SINumber').val() != "")
            {
        }    
        });

    }
    function editPlan(item, type) {
        
        $('#ReceiptDialog').data('tWindow').center().open();
        if (type == 1)
            $('#ReceiptDialog').data('tWindow').title('@Html.Translate("Edit/New Receipt Plan From Donation")');
        else if (type == 3)
            $('#ReceiptDialog').data('tWindow').title('@Html.Translate("Edit/New Recipt Plan From Local Purchase")');
        else
            $('#ReceiptDialog').data('tWindow').title('@Html.Translate("Edit/New Recipt Plan From Loan, Swap, Repayment Or Other")');


        //$('#create-link').hide();
        var id =item;
        var url = '@Url.Action("Edit", "ReceiptAllocation")';
        url = url + '?allocationId=' + id;
        $('#create-edit-form').load(url);
        $('#create-edit-form').show();
    }

    function ClosePlanById(receiveAlloctionID) {
        
        $('#ReceiptDialog').data('tWindow').center().open();
        var url = '@Url.Action("Close", "ReceiptAllocation")';
        url = url + '?id=' + receiveAlloctionID;
        $('#create-edit-form').load(url, function () {
//            if ($('#SINumber').val() != "") {
//            }
        });
    
    }

    function OnComChange(e) {

    }
    function cancel() {
        $('#ReceiptDialog').data('tWindow').close();
        $('#create-edit-form').html("");
    }

    function OnBinding(e) {
        var combo = $('#CommodityID').data('tComboBox');
        if (combo) {
        }
        var control = $('#CommodityID').data('tComboBox');
        if (control != undefined || control != null) {
            control.dropDown._html = function (items, encode) {
                var sb = new $.telerik.stringBuilder();
                if (!items)
                    return sb.string();

                for (var i = 0, count = items.length; i < count; i++) {
                    var html = " ", item = items[i];
                    html = item.Text; // +"<small style='display: block'>" + item.Text + "</small>";
                    var obj = { html: html, dataItem: item };
                    if (this.onItemCreate) {
                        this.onItemCreate(obj);
                        }
                    if (!(item.unselectable)) {
                        sb.cat('<li unselectable="on" class="t-item"  style="pointer-events: none; cursor: default;background : #ccc;">').cat(obj.html).cat("</li>");
                    } else {
                        sb.cat('<li unselectable="on" class="t-item" style="padding-left : 10px;"  >').cat(obj.html).cat("</li>");
                    }
                }

                return sb.string();
            };
            control.value(control.previousValue);
        }
    }

    function OnComTypeChange(e) {

        if (e.value != null) {

            if(e.value == 1)
            {
                $('.nonFood').hide();
                $('.Food').show();
            }
         else {

            $('.nonFood').show();
            $('.Food').hide();

        }
      }
   }

 
</script>

-->