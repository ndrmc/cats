@model Cats.Models.Hubs.ReceiptAllocationViewModel
@using Cats.Web.Hub.Helpers
@using Telerik.Web.Mvc.UI
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
@{
    int allocationType = ViewBag.CommoditySourceType ?? 1;
    bool allocationsUnder = ViewBag.receiveUnderAllocation != null;
    var disableSetting = (allocationsUnder) ? new { @readonly = "readonly" } : null;
}
@using (Html.BeginForm("Create", "ReceiptAllocation", new { id = "receiveAlloc", type = allocationType }))
{

    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.ReceiptAllocationID)
    @Html.HiddenFor(model => model.GiftCertificateDetailID)
    @Html.HiddenFor(model => model.PartitionId)
    @Html.HiddenFor(model => model.IsCommited)
    
    
    <table class="borderless" width="100%">
        <tr>
            <td>@Html.LabelFor(model => model.SINumber, Html.Translate("SI / Batch Number")) <span class="required">*</span></td>
            <td>
                @Html.TextBoxFor(model => model.SINumber,disableSetting)
                @Html.ValidationMessageFor(model => model.SINumber)</td>
                
                <td >
                    @Html.LabelFor(model => model.ETA, Html.Translate("ETA")) <span class="required">*</span>
                </td>
                  <td>
                    @(Html.EditorFor(model => model.ETA))
                    @Html.ValidationMessageFor(model => model.ETA)
                </td>

        </tr>

        <tr>
            <td> 
                @if (allocationType == Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)
                {
                      @Html.LabelFor(model => model.PurchaseOrder, Html.Translate("Purchase Order")) <span class="required">*</span>
                }
               
                 
            </td>
            <td>@if (allocationType == Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)
                {
                     @Html.EditorFor(model => model.PurchaseOrder)
                        @Html.ValidationMessageFor(model => model.PurchaseOrder)
                }
                
            </td>

            <td>@if (allocationType != Cats.Models.Hubs.CommoditySource.Constants.DONATION)
                {
                     @Html.LabelFor(model => model.OtherDocumentationRef, Html.Translate("Memo Reference"))
                }
                </td>
            <td>@if (allocationType != Cats.Models.Hubs.CommoditySource.Constants.DONATION)
                {
                    @Html.EditorFor(model => model.OtherDocumentationRef)
                    @Html.ValidationMessageFor(model => model.OtherDocumentationRef)
                }
            </td>

        </tr>
        <tr>
               @if (allocationType != Cats.Models.Hubs.CommoditySource.Constants.DONATION &&
                    allocationType != Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)
               {
                   <td>
                       @Html.LabelFor(model => model.SourceHubID, Html.Translate("Source Hub")) <span class="required">*</span>
                   </td>
                   <td>
                       @(Html.Telerik().ComboBox()
                              .Name("SourceHubID")
                              .AutoFill(true)
                              .BindTo(new SelectList(Model.AllHubs, "HubID", "HubNameWithOwner", Model.SourceHubID))
                              .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
                              .ClientEvents(ev => ev.OnChange("OnComChange"))
                              .Filterable(filtering =>
                              {

                                  filtering.FilterMode(AutoCompleteFilterMode.Contains);

                              })
                              .HighlightFirstMatch(true)
                              .AutoFill(true)
                              .OpenOnFocus(true)
                             )
                       @Html.ValidationMessageFor(model => model.SourceHubID)
                        
                   </td>
               }
            <td>
                @Html.LabelFor(model => model.CommoditySourceID, Html.Translate("Commodity Source")) <span class="required">
                                                                                         *</span>
            </td>
            <td>
                @(Html.Telerik().ComboBox()
           .Name("CommoditySourceID")
           .AutoFill(true)
           .BindTo(new SelectList(Model.CommoditySources, "CommoditySourceID", "Name", Model.CommoditySourceID))
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange"))
           .Filterable(filtering =>
           {

               filtering.FilterMode(AutoCompleteFilterMode.Contains);

           })
           .HighlightFirstMatch(true)
           .AutoFill(true)
           .OpenOnFocus(true)
                      )
                @Html.ValidationMessageFor(model => model.CommoditySourceID)
            </td>
        </tr>
        <tr>
            @Html.HiddenFor(model => model.HubID)
            
        </tr>
                       @if (allocationType == Cats.Models.Hubs.CommoditySource.Constants.DONATION ||
                    allocationType == Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)
                       {
                           <tr>
                               <td> @Html.LabelFor(model => model.DonorID, Html.Translate("Donor")) <span class="required">*</span></td>
                               <td>@(Html.Telerik().ComboBox()
                                      .Name("DonorID")
                                      .AutoFill(true)
                                      .BindTo(new SelectList(Model.Donors, "DonorID", "Name", Model.DonorID))
                                      .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
                                      
                                       .ClientEvents(ev => ev.OnChange("OnComTypeChange").OnDataBound("OnComTypeChange"))
                                      .Filterable(filtering =>
                                      {

                                          filtering.FilterMode(AutoCompleteFilterMode.Contains);

                                      })
                                      .HighlightFirstMatch(true)
                                      .AutoFill(true)
                                      .OpenOnFocus(true)
                                         )
                                   @Html.ValidationMessageFor(model => model.DonorID)</td>

                               <td></td>
                               <td></td>
                           </tr>
                       }
        
        @if (!allocationsUnder)
        {
        <tr>
            <td>
                @Html.LabelFor(model => model.CommodityTypeID, Html.Translate("Commodity Type")) <span class="required">
                                                                                                     *</span>
            </td>

            <td>
                @(Html.Telerik().ComboBox()

           .Name("CommodityTypeID")
           .AutoFill(true)
           .BindTo(new SelectList(Model.CommodityTypes, "CommodityTypeID", "Name", Model.CommodityTypeID))
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComTypeChange").OnDataBound("OnComTypeChange"))
           .HighlightFirstMatch(true).CascadeTo("CommodityID")
        //.CascadeTo("CommodityID")
           .Filterable(filtering =>
           {

               filtering.FilterMode(AutoCompleteFilterMode.Contains);

           })
           .HighlightFirstMatch(true)
        // .AutoFill(true).Enable(!Model.IsEditMode)
           .OpenOnFocus(true)
                      )
                @Html.AuditTrial("Receive", "CommodityTypeID", Model.ReceiptAllocationID)
                @Html.ValidationMessageFor(model => model.CommodityTypeID)
            </td>
            
                    <td>
                    @Html.LabelFor(model => model.CommodityID, Html.Translate("Commodity")) <span class="required">*</span>
                </td>
            <td>
                @(Html.Telerik().ComboBox()
           .Name("CommodityID")
           .AutoFill(true)
           .BindTo(new SelectList(Model.Commodities, "CommodityID", "Name", Model.CommodityID))
           .DataBinding(bind => bind.Ajax().Select("CommodityListByType", "Commodity", new { CommodityTypeID =  Model.CommodityTypeID ,editModeVal = Model.CommodityID, SInumber = Model.SINumber, CommoditySourceID = Model.CommodityID }).Enabled(true))
           .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
           .ClientEvents(ev => ev.OnChange("OnComChange").OnDataBinding("OnBinding"))
           .Filterable(filtering =>
           {

               filtering.FilterMode(AutoCompleteFilterMode.Contains);

           })
           .HighlightFirstMatch(true)
           .AutoFill(true)
           .OpenOnFocus(true)
                      )
                @Html.ValidationMessageFor(model => model.CommodityID)
            </td>
            
        </tr>
        }
        else
        {
            <tr>
            <td>
                @Html.LabelFor(model => model.CommodityTypeID, Html.Translate("Commodity Type")) <span class="required">
                                                                                                     *</span>
            </td>

                <td>
                    @Html.TextBoxFor(model => model.CommodityTypeText, new { @readonly = "readonly" })
                    @Html.HiddenFor(model=>model.CommodityTypeID)
                    @Html.ValidationMessageFor(model => model.CommodityTypeID)
                </td>
            <td>
                    @Html.LabelFor(model => model.CommodityID, Html.Translate("Commodity")) <span class="required">*</span>
                </td>
            <td>
                @Html.TextBoxFor(model => model.CommodityText, new { @readonly = "readonly" })
                @Html.HiddenFor(model=>model.CommodityID)
                @Html.ValidationMessageFor(model => model.CommodityID)
            </td>
            
        </tr>
            
            
        }
        
        
        <tr>


        </tr>

        <tr>
            <td>
                    @Html.LabelFor(model => model.ProgramID, Html.Translate("Program")) <span class="required">*</span>
                </td>
                <td>
                    @(Html.Telerik().ComboBox()
                           .Name("ProgramID")
                           .AutoFill(true)
                           .BindTo(new SelectList(Model.Programs, "ProgramID", "Name", Model.ProgramID))
                            .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
                            .ClientEvents(ev => ev.OnChange("OnComChange"))
                           .Filterable(filtering =>
                           {
                               filtering.FilterMode(AutoCompleteFilterMode.Contains);
                           })
                           .HighlightFirstMatch(true)
                           .AutoFill(true)
                           .OpenOnFocus(true)
                          )
                    @Html.ValidationMessageFor(model => model.ProgramID)
                </td>
                
                
            <td class="Food">
                @if (@Html.GetCurrentUser().PreferedWeightMeasurment == "qn")
                {
                    @Html.LabelFor(model => model.QuantityInMT, Html.Translate("Quantity In Quintals")) <span class="required">
                                                                                                        *</span>
                }
                else
                {
                    @Html.LabelFor(model => model.QuantityInMT, Html.Translate("Quantity In MT"))
                    <span class="required">
                        *</span>
                }
            </td>
                <td class="Food">
                    @Html.EditorFor(model => model.QuantityInMT,new {})
                    @Html.ValidationMessageFor(model => model.QuantityInMT)
                </td>
        </tr>
         @if (allocationType == Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)
         {
             <tr>
                 <td>
                     @Html.LabelFor(model => model.SupplierName, Html.Translate("Supplier Name")) <span class="required">
                         *</span>
                 </td>
                 <td>
                     @Html.EditorFor(model => model.SupplierName)
                     @Html.ValidationMessageFor(model => model.SupplierName)
                 </td>
                 <td>
                 </td>
                 <td>
                 </td>
             </tr>
         }
        <tr>
            <td class="nonFood">@Html.LabelFor(model => model.QuantityInUnit, "Quantity In Unit") <span class="required">*</span></td>
            <td class="nonFood">@Html.TextBoxFor(model => model.QuantityInUnit)</td>
            <td >
                @Html.LabelFor(model => model.Remark, Html.Translate("Remark"))
            </td>
            <td colspan="3">
                @Html.EditorFor(model => model.Remark)
                @Html.ValidationMessageFor(model => model.Remark)
            </td> 
            
        </tr>
        <tr>
                <td>
                    @Html.LabelFor(model => model.ProjectNumber, Html.Translate("Project Code")) <span class="required">
                        *</span>
                </td>
                <td class="editor-field">
                @if (!allocationsUnder)
                {
                    <span><input type="button" value="GenerateCode" onclick="return GenerateCode();"/></span>
                    <br/>
                }@Html.TextBoxFor(model => model.ProjectNumber, disableSetting)
                    @Html.ValidationMessageFor(model => model.ProjectNumber)
            </td>
        </tr>


    </table>
    
    <br />
    <p style="clear: both">
        <input  style="width: 80px; height: 20px; horiz-align: center" class="t-button" value="@Html.Translate("Save")"
               onclick="return submitReceiveAllocationForm(this)" />
        <input  style="width: 80px; height: 20px; horiz-align: center" class="t-button t-close" value="@Html.Translate("Cancel")"
               onclick="return cancel()" />
    </p>
    
   
}
<script type="text/javascript">

    function GenerateCode() {
        var params = {};
        params['SINumber'] = $('#SINumber').val(); ;
        params["DonorID"] = $('#DonorID').val();
        params["CommodityID"] = $('#CommodityID').val();
        params["QuantityInMT"] = $('#QuantityInMT').val();
        var generate = true;
        if(
        params['SINumber'] == "" ||
        params["DonorID"] =="" ||
        params["CommodityID"] == "" ||
        params["QuantityInMT"] == "" ){
            generate = false;
        }
        if (!generate) {
            alert("please fill out the SI Number, Commodity, Quanity In MT and the Donor to Generate a Project Code");
        } else {
            var url = '@Url.Action("GenerateProjectCode", "ReceiptAllocation")';
            $.getJSON(url, params, function(result) {
                $('#ProjectNumber').val(result);
            });
        }
    }

    $.validator.unobtrusive.parse('#receiveAlloc');
    $('#SINumber').blur(function () {
        var value = $(this).val();
        var params = {};
        params['SInumber'] = value;
        if ($(this).val() != ""
            && ($('#ReceiptAllocationID').val() == "")
                && $('#CommoditySourceID').val() == '@Cats.Models.Hubs.CommoditySource.Constants.DONATION'
            ) {
            var url = '@Url.Action("LoadBySIPartial", "ReceiptAllocation")';
            $('#create-edit-form').load(url, { SInumber: value, type: '@allocationType' }, function () {
                if ($('#SINumber').val() != "") {
                    //DON"T REMOVE THeSe TWO LINES 
                    $('#ETA').focus();
                    $('#ETC').focus();
                    //var comb = $('#CommoditySourceID').tdata('tComboBox');
                    //comb.selectedIndex(0);
                }
            });
        }
        $.validator.unobtrusive.parse('#receiveAlloc');

    });
    function OnComChange(e) {

     
        $('form').valid();
    }

    $("form input[data-val-remote-url]").on({
        focus: function () {
            $(this).closest('form').validate().settings.onkeyup = false;
        },
        blur: function () {
            $(this).closest('form').validate().settings.onkeyup =
                $.validator.defaults.onkeyup;
        }
    });

    function submitReceiveAllocationForm(button) {
        var form = $(button).closest("form");
        // var theNewSi = null;//$('#SINumber').val();

        if (form.valid()) {
            $.ajax({ type: 'POST', url: form.attr('action'), data: $(form).serialize(), success: function (response) {
                //rebind the GRID 
                if (response != null) {
                    //var id = parseInt(response);
                    var Params = { CommodityType: response.CommodityTypeID, closedToo: false };
                    //if (response.gridId != null) {
                    if (response.gridId == 1
                        || response.gridId == 2
                            || response.gridId == 3) {
                        var gr = $('#ReceiveAllocationGrid' + response.gridId).data('tGrid');
                        if (gr != null) {
                            $("#CommodityTypeSelector-" + response.gridId+'-input').val("");
                            var typeCombo = $("#CommodityTypeSelector-" + response.gridId).data('tComboBox');
                            if (typeCombo != null) {
                                typeCombo.value(response.CommodityTypeID);

                            }
                            gr.rebind(Params);
                        }
                        $('#ReceiptDialog').data('tWindow').close();
                    }
                    //}
                }
            }
            });
        }
        return false;
    }

    $(function () {
        // alert("test");
        var comType = $('#CommodityTypeID').val();
        if ($('#CommodityTypeID').val() == undefined) {
            comType = $('#CommodityTypeID').data('tComboBox').value();
        }

        if (comType == 1) {
            $('.nonFood').hide();
            $('.Food').show();
        } else {
            $('.nonFood').show();
            $('.Food').hide();

        }

    });
</script>
