@using Cats.Areas.Logistics.Models
@using Cats.Helpers
@using Kendo.Mvc.UI
@using Cats.Security
@{

    ViewBag.Title = Html.Translate("Index");
    //Layout = "~/Views/Shared/_MainLayout.cshtml";
    const string pageName = "Logistics.Swap.Index";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    ViewBag.PageTitle = Html.Translate("List of Receipt Plan From Swap");
    ViewBag.PageTitleDescription = "";
}


<script type="text/javascript">
    $(function () {


        //Optional: turn the chache off
        $.ajaxSetup({ cache: false });

        $('#btnAddReciptPlan').click(function () {

            // alert("");
            $('#dialogContent').load(this.href, function () {
                $('#dialogDiv').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');
                //bindForm(this);
                $(".modal-dialog").removeClass("modal-sm").addClass("modal-lg");
            });
            return false;
        });

    });
</script>

<div id='dialogDiv' class='modal fade in' style="display: none;">
    <div id='dialogContent'></div>
</div>

<div class="portlet light bordered">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-list font-green-sharp"></i>
            <span class="caption-subject bold uppercase"> @Html.Translate("List of Receipt Plan From Swap")</span>
            <span class="caption-helper">  </span>
        </div>
        @*<div class="tools">
                <a href="#" class="collapse" data-original-title="" title=""></a>
                <a href="javascript:;" class="remove" data-original-title="" title=""></a>
            </div>*@
        <div class="actions">
            @if (LogisticsConstants.Operation.Add_new_donation.ToString() == "Add_new_donation")
            {
                <a id="btnAddReciptPlan" data-buttontype="btn_new_record" class="btn green" href="@Url.Action("Create", "Swap")"><i class="fa fa-plus"></i> @Html.Translate("Create New")</a>
            }
            <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
        </div>
    </div>
    <div class="portlet-body">
        <div class="table-responsive">
            @(Html.Kendo().Grid<TransferViewModel>()
                  .Name("grid")
                  .Columns(columns =>
                  {
                  columns.Bound(m => m.ReferenceNumber).Title(@Html.Translate("Reference"));
                      if (LogisticsConstants.isValidOperation(LogisticsConstants.Operation.View_SI_Swap).ToString() == "View_SI_Swap")
                      {
                          columns.Bound(m => m.SiNumber).Title(@Html.Translate("SI Number")).ClientTemplate("<a href='" + Url.Action("Detail", "Swap", new {id = "#=TransferID#"}) + " '>#=SiNumber#</a>  ");
                      }
                      columns.Bound(m => m.SourceSwapName).Title(@Html.Translate("Swap Issuer"));
                      columns.Bound(m => m.DestinationHubName).Title(@Html.Translate("Swap Receiver"));


                      columns.Bound(m => m.SourceHubName).Width(200).Title(@Html.Translate("Swap Repayment Settler"));
                      columns.Bound(m => m.DestinationSwapName).Title(@Html.Translate("Swap Repayment Receiver"));

                      columns.Bound(m => m.Program).Title(@Html.Translate("Program"));
                      columns.Bound(m => m.Commodity).Width(200).Title(@Html.Translate("Commodity"));
                      //columns.Bound(m => m.CommoditySource).Width(100).Title(@Html.Translate("Commodity Source"));
                      columns.Bound(m => m.Quantity).HtmlAttributes(new {align = "right"}).Title(@Html.Translate("Quantity in MT"));
                      columns.Bound(m => m.CreatedDate).Title(@Html.Translate("Created Date"));
                      columns.Bound(m => m.StatusName).Title(@Html.Translate("Status"));
                      //columns.Command(p =>
                      //{
                      //    p.Custom("Edit").Click("Edit");
                      //    p.Custom("Recieve").Click("Recieve");
                      //}).Width(250);


                  }

                  )

                  .Navigatable()
                  .TableHtmlAttributes(new {@class = "table table-condensed"})
                  .HtmlAttributes(new {style = "height:430px;"})
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .Model(model => model.Id(m => m.TransferID))
                      .Read(read => read.Action("Transfer_Read", "Swap"))
                  //.Update(update => update.Action("Commodity_Update", "Request"))
                  )
            )
        </div>
    </div>
</div>
<div id='dialogDivSmall' class='modal fade in' style="display: none;">
    <div id='dialogContentSmall'></div>
</div>
