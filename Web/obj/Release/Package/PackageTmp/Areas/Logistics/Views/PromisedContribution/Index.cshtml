@using Cats.Helpers
@using Cats.Services.Security
@using Cats.Models;
@using Kendo.Mvc.UI

@model List<PromisedContributionViewModel>
@{
    
    var user = (UserIdentity)System.Web.HttpContext.Current.User.Identity;
    var unitPreference = user.Profile.PreferedWeightMeasurment;
    var UserUnit = Html.Translate(Html.UserUnitPreference());
    //decimal amount = 12.5M; 
}
@{
    ViewBag.Title = Html.Translate("Contributions");
    Layout = "~/Views/Shared/_MainLayout.cshtml";
   
}

@section LeftBar
{
   
}
@section Toolbar
{
     
   <a class="btn toolbar-btn " data-buttontype="btn_new_record" href="@Url.Action("edit", "PromisedContribution")"></a>
}
<style>
    .number
    {
        text-align:right;
    }
</style>
<fieldset>
    <legend>
       @Html.Translate("Promised Contribution ")
       
    </legend>
</fieldset>
<!--<div class="well">@ViewBag.Message</div>-->
 
<div>
@(Html.Kendo().Grid<Cats.Models.PromisedContributionViewModel>()
    .Name("grid")
    .Columns(columns =>
    {
       // columns.Bound(p => p.PromisedContributionId);
        columns.Bound(p => p.strETA).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" }); ;
      //  columns.Bound(p => p.ExpectedTimeOfArrival);
        columns.Bound(p => p.PromisedQuantity).Title("Promised Qty [" + @UserUnit + "]").HtmlAttributes(new { @class = "number" });
        columns.Bound(p => p.DeliveredQuantity).Title("Delivered Qty [" + @UserUnit + "]").HtmlAttributes(new { @class = "number" });
        columns.Bound(p => p.CommodityName).Width(100);
        columns.Bound(p => p.DonorName).Width(230);
        columns.Bound(p => p.HubName).Width(130);
        columns.Command(command => {
            command.Custom("Edit").Click("editRecord");
            command.Custom("Delete").Click("deleteRecord"); }).Width(200);
    })

    .HtmlAttributes(new { style = "height:430px;" })    
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Sortable()
    .Scrollable()
    .DataSource(dataSource => dataSource     
        .Ajax()
        
       .Model(model =>
        {
            //model.Id(p => p.TransportBidQuotationID);
            model.Id(p => p.PromisedContributionId);
            model.Field(p => p.PromisedContributionId).Editable(false);
            model.Field(p => p.strETA).Editable(false);

        })
       
        .Read(read => read.Action("ReadAjax", "PromisedContribution"))

     )
)
</div>
<script>
    function deleteRecord(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location = "@Url.Action("Delete", "PromisedContribution")" + "/" + dataItem.PromisedContributionId
    }
    function editRecord(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location = "@Url.Action("Edit", "PromisedContribution")" + "/" + dataItem.PromisedContributionId
    }
</script>