@using Cats.Areas.Logistics.Models
@using Kendo.Mvc.UI
@using Cats.Helpers
@{
    ViewBag.Title = "_DistributionByAge";
}

 @(Html.Kendo().Grid<WoredaDistributionDetailViewModel>()
                      .Name("DistributionByAgeDetail")
                      .Columns(columns =>
                      {

                          columns.Bound(p => p.WoredaID).Width(70).Title(Html.Translate("WoredaID")).HtmlAttributes(new { style = "background-color:lightgray" });
                          columns.Bound(p => p.WoredaName).Width(70).Title(Html.Translate("Woreda")).HtmlAttributes(new { style = "background-color:lightgray" });
                          //columns.Bound(p => p.AllocatedAmount).Width(70).Title(Html.Translate("Allocated")).HtmlAttributes(new { style = "background-color:lightgray" });
                          //columns.Bound(p => p.NumberOfBeneficiaries).Width(30).Title(Html.Translate("No of Beneficiaries")).HtmlAttributes(new { style = "background-color:lightgray" });
                          //columns.Bound(p => p.ReceivedAtFDPAmount).Width(30).Title(Html.Translate("Received")).HtmlAttributes(new { align = "right" }).HtmlAttributes(new { style = "background-color:lightgray" });
                          //columns.Bound(p => p.DispatchedToFDPAmount).Width(30).Title(Html.Translate("Dispatched")).HtmlAttributes(new { align = "right" }).HtmlAttributes(new { style = "background-color:lightgray" });

                          columns.Bound(p => p.MaleLessThan5Years).Title(Html.Translate("Male < 5")).HtmlAttributes(new { align = "right" });
                          columns.Bound(p => p.MaleBetween5And18Years).Title(Html.Translate("Male B/N 5 & 18")).HtmlAttributes(new { align = "right" });
                          columns.Bound(p => p.MaleAbove18Years).Title(Html.Translate("Male > 18")).HtmlAttributes(new { align = "right" });

                          columns.Bound(p => p.FemaleLessThan5Years).Title(Html.Translate("Female < 5")).HtmlAttributes(new { align = "right" });
                          columns.Bound(p => p.FemaleBetween5And18Years).Title(Html.Translate("Female B/N 5 & 18")).HtmlAttributes(new { align = "right" });
                          columns.Bound(p => p.FemaleAbove18Years).Title(Html.Translate("Female > 18")).HtmlAttributes(new { align = "right" });

                                   })
                   
                      .Editable(editable => editable.Mode(GridEditMode.InCell))
                      .Scrollable()
                      .Navigatable()
                      .HtmlAttributes(new { style = "height:450px;" })
                   
                      .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Batch(true)
                                                    .Events(e=>e.RequestEnd("onRequestEnd"))
                                                    .ServerOperation(false)
                                                    .Model(model =>
                                                               {
                                                                   model.Id(p => p.FdpId);
                                                                   model.Field(detail => detail.FDP).Editable(false);
                                                                   model.Field(detail => detail.RequestedAmount).Editable(false);
                                                                   model.Field(detail => detail.AllocatedAmount).Editable(false);
                                                                   model.Field(detail => detail.DispatchedToFDPAmount).Editable(false);
                                                                   model.Field(detail => detail.NumberOfBeneficiaries).Editable(false);
                                                                   model.Field(detail => detail.ReceivedAtFDPAmount).Editable(false);
                                                                  

                                                               })
                                                  

                                                    .Read(read => read.Action("DistributionByAge_Read", "Utilization", new { requisitionId = -1}))
                                                    .Update(update => update.Action("Utilization_Update", "Utilization"))
                                                   
                                                  
                      ))

            
