@using System.Data
@using Cats.Helpers
@using Kendo.Mvc.UI

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";

}
<!--
@Html.Translate("Early Warning Maps")
    -->
@using Cats.Services.Security
@using LanguageHelpers.Localization
@{
    var user = (UserIdentity)HttpContext.Current.User.Identity;
    
    }
<style>



</style>
<link rel="stylesheet" href="~/Content/MapResources/openlayers/theme/default/style.css" type="text/css">
<script src="~/Content/MapResources/OpenlayersWrapper.js"></script>
<script src="~/Content/MapResources/openlayers/lib/OpenLayers.js"></script>
<script src="~/Content/MapResources/MapStyle.js"></script>
<script src="~/Content/MapResources/MapLegend.js"></script>

<div ng-app ng-controller="mapController">
    <div class="map-container">
        <div class="admin_data">
            
            <div>
                <button ng-click="save()">Save</button>
                <button ng-click="goUp()" class="visible-{{AdminLevels[adminUnitLevel].up!=''}}">Up</button>
            </div>
            <div  ng-repeat="adminRegion in adminRegions" class="match-{{selectedFeature.attributes.code==adminRegion.code}}">
                 <input class="input-small" ng-model="adminRegion.code"  ng-change="onMappingChange(adminRegion);"/>
                <button ng-click="loadChildren(adminRegion)" class="visible-{{AdminLevels[adminUnitLevel].down!=''}}">Down</button> 
                <button class="map-suggestion suggested-{{selectedFeature.attributes.name==adminRegion.AdminUnitName}}" ng-click="doMapping(adminRegion,selectedFeature.attributes.code)"><i class=" icon-map-marker "></i></button>
                <span >{{adminRegion.AdminUnitName}}</span>
            </div>
            <div ng-repeat="modified in modifiedData">{{modified.code}} | {{adminRegion.AdminUnitName}}</div>
        </div>
        <div id="map1" class="map"></div>
        <div id="map1Legend0" class="map-legend" style="display:none;"></div>
        <div class="map-title" style="display:none";>Admin Unit</div>
    </div>
    </div>

<div style="height:600px;"></div>
<script>
        
    function mapController($http, $scope, $timeout) {
        $scope.adminRegions = [];
        $scope.renderedMap = {};
        $scope.adminUnitLevel = "";
        $scope.modifiedData = {};
        $scope.AdminLevels = { Region: { up: "", down: "Zone" }, Zone: { up: "Region", down: "Woreda" }, Woreda: { up: "Zone", down: "" } };
        $scope.shapeUrls =
            {
                Region: "/Content/MapResources/MapData/ethiopiaRegions2.txt"
                , Zone: "/Content/MapResources/MapData/AllZones.txt"
                , Woreda: "/Content/MapResources/MapData/AllWoredas.txt"
            };
        $scope.ServerUrls = { 
            adminUnitSave:"@Url.Action("AdminUnit_UpdateMapping", "AdminUnit", new { Area = "Settings" })",
            adminUnit: "@Url.Action("AdminUnit_Read", "AdminUnit", new { Area = "Settings" })" }

        $scope.onMappingChange = function (adminRegion) {
            $scope.modifiedData["A" + adminRegion.AdminUnitID] = adminRegion;
            $scope.renderedMap.layers[0].redraw();
                
        }
        $scope.doMapping = function (adminRegion, code) {
            adminRegion.code = code;
            $scope.onMappingChange(adminRegion);
        }
        $scope.save = function () {
            var modifeidArray = [];
            for (var i in $scope.modifiedData) {
                modifeidArray.push($scope.modifiedData[i]);
            }
            $http.post($scope.ServerUrls.adminUnitSave, { adminUnits: modifeidArray  })
                            .success(function (response, status, headers, config) {
                                console.log("Saved", response);
                                $scope.modifiedData={};
                            })
                            .error(function (data, status, headers, config) {
                                console.log("Error Saving", status);
                            });
            
        }
        $scope.getAdminUnit = function (level, parent) {

            $scope.adminUnitLevel = level;
            parent = level == "Region" ? { AdminUnitID: 1 } : parent;
            $http.get($scope.ServerUrls.adminUnit, { params: { parentAdminUnitID: parent.AdminUnitID } })
                .success(function (response, status, headers, config) {
                    console.log("Regions",level, response);
                    $scope.adminRegions = response.Data;
                    $scope.CreateMap($scope.adminRegions, level,parent.code);
                })
                .error(function (data, status, headers, config) {
                    console.log("Regions fetch error", response);
                });
        }
        $scope.getRegionData = function () {
           // $scope.adminUnitLevel = "Region";
            $scope.getAdminUnit("Region");
        }
        $scope.goUp = function () {
            var up = $scope.AdminLevels[$scope.adminUnitLevel].up;
            if (up) {
                $scope.getAdminUnit(up, $scope.parent);
            }
        }
        $scope.loadChildren = function (parent) {
            $scope.parent = parent;
            var childName={Region:"Zone",Zone:"Woreda"};
            var newLevel=childName[$scope.adminUnitLevel];
            if (newLevel) {
                $scope.getAdminUnit(newLevel, parent);
            }
        }
        var findBy = function (key,val) {
            for (var i in $scope.adminRegions) {
                if ($scope.adminRegions[i][key] == val) {
                    return $scope.adminRegions[i];
                }
            }
        }
        $scope.mapStyle = function (data,parent) {
           return {
                "default":
                {
                    "Polygon":
                    {
                        //fillOpacity: 0.8
                         strokeOpacity: 1
                        , label: function (feature) {
                            var code=get_attribute_value(feature.attributes, "code", "");
                            var lbl=get_attribute_value(feature.attributes, "name", "") + "\n" + code;
                            if (code.indexOf(parent) == 0) {
                                return lbl;
                            }
                            
                            return parent?"":lbl;
                            var s = new String();
                            s.indexOf(parent);
                            var parentCode = get_attribute_value(feature.attributes, "parentCode", "");
                            if (parentCode && parentCode != parent) {
                                return "";
                            }
                            //if(parent+""+code
                            //return parentCode + "-" + parent;
                            return get_attribute_value(feature.attributes, "name", "") + "\n" + code;
                        
                            
                         }
                       
                        , fillColor: function (feature) {
                            
                            var code = get_attribute_value(feature.attributes, "code", "");
                            if(findBy("code",code))
                            {

                                return "#8FD";
                            }
                            var mapedAR=findBy("AdminUnitName", get_attribute_value(feature.attributes, "name", "--"))
                            if (mapedAR) {
                                feature.attributes.AdminUnitID = mapedAR.AdminUnitID;
                                return "#FF8";
                            }

                            return "#F88";
                                return colorOptions.noValColor;
                        }
                       , strokeColor: "#AAA"//"${get_defaultPolygonfillColor}"
                        , fillOpacity: function (feature) {
                            var code = get_attribute_value(feature.attributes, "code", "");
                            if (code.indexOf(parent) == 0) {
                                return 0.8;

                            }
                            return parent ? 0.2 : 0.8;
                            return 0.2;
                            var parentCode = get_attribute_value(feature.attributes, "parentCode", "");
                            if (parentCode && parentCode != parent) {
                                return 0.2;
                            }
                            return 0.8;
                        }
                    }
                }
            }
        }
        $scope.CreateMap = function (dataTable, level, parent) {
            var OnFeatureSelect = function (event) {
                console.log("OnFeatureSelect", event.type, event.feature);
                $timeout(
                    function () {
                        if (event.type == "featureselected") {
                            $scope.selectedFeature = event.feature;
                           // $scope.suggestedAdmin = event.feature.attributes;// get_attribute_value(event.feature.attributes, "AdminUnitID", "");
                        }
                        else {
                            $scope.selectedFeature = {};
                        }
                    }, 50);
            }

            var key="code";
            var indicator = "code";
            var shapeUrl = $scope.shapeUrls[level];
            var mapLayer = 
            [
                { name: "Regions", url: shapeUrl, style: $scope.mapStyle(dataTable,parent) }//getPolygonShadingStyle(key, dataTable, indicator, {}) }
            ];
            $("#map1").html("");
            $scope.renderedMap = CreateMap("map1", { layers: mapLayer, selectionCallback: OnFeatureSelect });
        }
        $scope.getRegionData();
    }
   

    
</script>
<style>
    .map
    {
       position:absolute;
        top:0px;
        left:300px;
        right:0px;
        bottom:0px;
                background: #7abcff; /* Old browsers */
background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,#aad4ff), color-stop(44%,#60abf8), color-stop(100%,#a3c8ed));    
       
    }
    .visible-false
    {
        visibility:hidden;
    }
    .map-suggestion
    {
        visibilitys:hidden;
    }

    .match-true
    {
        font-weight:bold;
        color:#09888d;
    }
    .match-trudde .map-suggestion
    {
        background:#09888d;
        visibility:visible;
    }
    .match-false .suggested-true
    {
        background:#FF0;
    }
    .admin_data
    {
        position:absolute;
        top:0px;
        width:300px;
        left:0px;
        bottom:0px;
        background:#EEE;
    }
    .map-container
    {
         position:relative;
        margin-top:10px;
        left:10px;
        height:500px;
        width:100%;
        
        border:solid 1px #DDD;
        border-radius:6px;
        
}
    .map-legend
    {
       position:absolute;
        top:0px;
        right:0px;
        width:300px;
        background:rgba(255,255,255,0.6);
        padding:20px;
        padding-top:0;
        box-shadow: -2px 2px 2px #444;
       
    }
        .map-legend .title
        {
            font-size:20px;
            line-height:40px;
        }
        .map-legend .item
        {
            line-height:40px;
            border-bottom:solid 1px #EEE;
        }
        .map-legend .pallet
        {
            line-height:40px;
            padding:4px;
            padding-left:10px;
            padding-right:10px;
            border-radius:6px;
        }
    .map-title
    {
        position:absolute;
        top:0px;
        left:100px;
        width:300px;
        /*background:rgba(255,255,255,0.6);*/
        color:#FFF;
        padding:20px;
        font-size:20px;
        text-shadow:2px 2px 2px #44A;

    }
    .olControlMousePosition
    {
        background:#000;
        color:#FFF;
    }

</style>