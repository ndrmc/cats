@using Kendo.Mvc.UI
@using LanguageHelpers.Localization
@using Cats.Helpers

@model Cats.Models.NeedAssessment
@{
    ViewBag.Title = Html.Translate("Edit NeedAssessment");
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@section LeftBar{

    @Html.Partial("_NeedAssessmentLeftBar")
}
@section Toolbar
{ 
    <a class="btn toolbar-btn " data-buttontype="btn_back_to_list" href="@Url.Action("Detail","NeedAssessment",new {id=Model.PlanID})"></a>
}
<div style="float:left; width:45%;">
    @Html.Translate("Region"):  @ViewData["RegionName"]
</div>  
<div style="float:left; width:45%;">
    @Html.Translate("Need assessment type"): @ViewData["TypeOfNeedAssessment"]
</div>      
<div style="clear:both;padding:5px;"></div>
@(Html.Kendo().Grid<Cats.Models.NeedAssessmentWoredaDao>()
      .Name("grid")
      .Columns(columns =>
                   {

                       columns.Bound(o => o.WoredaName).Width("200").HtmlAttributes(new { style = "background-color:lightgray" }).ClientTemplate("<span id='#=ZoneName#'>#=WoredaName#</span>");
                       columns.Bound(p => p.ProjectedMale).Title("Projected Male").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Projecgted Male"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.ProjectedFemale).Title("Projected Female").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Projected Female"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.RegularPSNP).Title("Regular PSNP").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Regular PSNP"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.PSNP).Title("PSNP").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "PSNP"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.NonPSNP).Title("Non PSNP").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Non PSNP"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.Total).Title("Total").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Total" }).Format("{0:n0}").HtmlAttributes(new { align = "Right" }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " });
                       columns.Bound(p => p.Contingencybudget).Title("Contingency budget").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Contingency budget"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.TotalBeneficiaries).Title("Total Beneficiaries").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Total Beneficiaries"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "}).HtmlAttributes(new {style = "text-align: right; font-size: 12px; "});
                       columns.Bound(p => p.PSNPFromWoredasMale).Title("PSNP From Woredas Male").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "PSNP From Woredas Male"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).ClientFooterTemplate("#=kendo.format('{0:n0}', sum)#").ClientGroupFooterTemplate("#=kendo.format('{0:n0}', sum)#").FooterHtmlAttributes(new {style = "text-align: right; font-size: 12px; font-weight: bold;"});
                       columns.Bound(p => p.PSNPFromWoredasFemale).Title("PSNP From Woredas Female").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "PSNP From Woredas Female"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).ClientFooterTemplate(" #=kendo.format('{0:n0}', sum)#").ClientGroupFooterTemplate(" #=kendo.format('{0:n0}', sum)#").FooterHtmlAttributes(new {style = "text-align: right; font-size: 12px; font-weight: bold;"});
                       columns.Bound(p => p.PSNPFromWoredasDOA).Title("PSNP From Woredas DOA").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "PSNP From Woredas DOA"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"});
                       columns.Bound(p => p.NonPSNPFromWoredasMale).Title("Non PSNP From Woredas Male").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Non PSNP From Woredas Male"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).ClientFooterTemplate(" #=kendo.format('{0:n0}', sum)#").ClientGroupFooterTemplate(" #=kendo.format('{0:n0}', sum)#").FooterHtmlAttributes(new {style = "text-align: right; font-size: 12px; font-weight: bold;"});
                       columns.Bound(p => p.NonPSNPFromWoredasFemale).Title("Non PSNP From Woredas Female").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Non PSNP From Woredas Female"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"}).ClientFooterTemplate(" #=kendo.format('{0:n0}', sum)#").ClientGroupFooterTemplate(" #=kendo.format('{0:n0}', sum)#").FooterHtmlAttributes(new {style = "text-align: right; font-size: 12px; font-weight: bold;"});
                       columns.Bound(p => p.NonPSNPFromWoredasDOA).Title("Non PSNP From Woredas DOA").HeaderHtmlAttributes(new {style = "overflow: visible; white-space: normal;", title = "Non PSNP From Woredas DOA"}).Format("{0:n0}").HtmlAttributes(new {align = "Right"});
                   })

      .ToolBar(toolbar => toolbar.Save())

      .HtmlAttributes(new {style = "height: 400px"})
      .Scrollable()
   //   .Pageable()
      .Sortable()
      .Navigatable()
      .Events(events => events.Change("onDataBound"))
      .Editable(editable => editable.Mode(GridEditMode.InCell))
      .Events(events => events.DataBound("onDataBound"))
      .DataSource(dataSource => dataSource
                                    .Ajax()

                                    .Aggregates(aggregates =>
                                                    {
                                                        aggregates.Add(p => p.PSNPFromWoredasMale).Sum();
                                                        aggregates.Add(p => p.PSNPFromWoredasFemale).Sum();
                                                        aggregates.Add(p => p.NonPSNPFromWoredasMale).Sum();
                                                        aggregates.Add(p => p.NonPSNPFromWoredasFemale).Sum();
                                                    })
                                    .Batch(true)
                                    //.PageSize(20)
                                    .ServerOperation(false)
                                    .Events(events => events.Error("error_handler"))
                                    .Group(groups => groups.Add(p => p.ZoneName))
                                    .Read(read => read.Action("NeedAssessmentDetailRead", "NeedAssessment", new {region = int.Parse(ViewData["Id"].ToString())}))
                                    .Update(update => update.Action("NeedAssessmentUpdate", "NeedAssessment"))
                              
                                    .Model(model =>
                              {
                                  model.Id(p => p.NAId);
                                  model.Field(p => p.Woreda).Editable(false);
                                  model.Field(p => p.WoredaName).Editable(false);
                                 // model.Field(p => p.Total).Editable(false);
                              }) 
    )
)

<script>
    function onGridKeydown(e) {
        //if (e.keyCode === kendo.keys.TAB) {
        //    var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
        //    var current = grid.current();
        //    if (!current.hasClass("editable-cell")) {
        //        var nextCell = current.nextAll(".editable-cell");
        //        if (!nextCell[0]) {
        //            //search the next row
        //            var nextRow = current.parent().next();
        //            var nextCell = current.parent().next().children(".editable-cell:first");
        //        }
        //        grid.current(nextCell);
        //        grid.editCell(nextCell[0])
        //    }
        //}
    };
    

    function onDataBound(e) 
    {
        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("focus", "input", function (e) {
            var input = $(this);
            setTimeout(function () { input.select(); },100);
        });
        
       
    }
   
    
</script>

<script>    
 
    function onEdit(e) {
       
        var input = e.container.find("input");
        setTimeout(function() {
            input.select();
        }, 25);


        function zoneChange(value) {


            var grid = $("#grid").data("kendoGrid");

            if (value) {

                grid.dataSource.filter({ field: "Zone", operator: "eq", value: value });
            } else {
                grid.dataSource.filter({ });
            }
        }


        $('#batchEdit').click(function() {
            if (this.checked) {

                $("#dropdown").style.display = 'none';
            } else {
                alert("unchecked");
            }

        });
    }
</script>

@*<style scoped="scoped">
    #grid .k-toolbar
    {
        min-height: 27px;
        padding: 1.3em;
    }
    .category-label
    {
        vertical-align: middle;
        padding-right: .5em;
    }
    #category
    {
        vertical-align: middle;
    }
    .toolbar {
        float: right;
    }
</style>*@

@*.ToolBar(toolbar =>
    {
       
        toolbar.Template(@<text>
                              <div id ="dropdown" >
                                  <label class="category-label" for="category">Show woredas by Zone:</label>
                                  @(Html.Kendo().DropDownList()
                                        .Name("regions")
                                        .OptionLabel("All")
                                        .DataTextField("Name")
                                        .DataValueField("AdminUnitID")
                                        .AutoBind(false)
                                        .Events(e => e.Change("zoneChange"))
                                        .DataSource(ds => ds.Read("GetZones", "NeedAssessment", new { region = int.Parse(ViewData["region"].ToString()) }))
                                        ) 
                              </div>
                              
        </text>);
    })*@
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
           
        }
    }
    

    function onRequestEnd(e) {
        debugger;
        if (e.type == "update" && !e.response.Errors) {
            alert("Update record is successfull");
        }
        //alert("type:  " + e.type);
        if (e.type == "create" && !e.response.Errors) {
            alert("Create record is successfull");
        }
    }
</script>
