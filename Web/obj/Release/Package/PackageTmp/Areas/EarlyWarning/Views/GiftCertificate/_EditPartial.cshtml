@model Cats.Areas.GiftCertificate.Models.GiftCertificateViewModel
@using System.Web.Mvc
@using Cats.Areas.GiftCertificate.Models
@using Cats.Helpers
@using Cats.Models
@using Kendo.Mvc.UI


@*<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
           
    @Html.HiddenFor(model => model.GiftCertificateID)
    @Html.HiddenFor(model => model.rowCount)
          
    
    <div class="field-set-title">
        <h5>@Html.Translate("Gift Certificate Headers")</h5>
    </div>
    <div class="form-horizontal">
        <table class="borderless" style="vertical-align: top">
            <tr>
                <td style="vertical-align: top">
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.GiftDate, Html.Translate("Gift Date"), new { @class = "cats-date-pref" }) <span class="required">*</span>
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.GiftDate)
                            @Html.ValidationMessageFor(model => model.GiftDate,@Html.Translate("Gift Date is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.DModeOfTransport, Html.Translate("Mode Of transport")) <span class="required">*</span>
                        </div>
                        <div class="controls">

                            @Html.DropDownList("DModeOfTransport", string.Empty)

                            @Html.ValidationMessageFor(model => model.DModeOfTransport,@Html.Translate("Mode Of Transport is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.ProgramID, Html.Translate("Program")) <span class="required">*</span>
                        </div>
                        <div class="controls">

                            @Html.DropDownList("ProgramID", string.Empty)
                            @Html.ValidationMessageFor(model => model.ProgramID,@Html.Translate("Program is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.DonorID, Html.Translate("Donor")) <span class="required">*</span>
                        </div>
                        <div class="controls">

                            @Html.DropDownList("DonorID", string.Empty)
                            @Html.ValidationMessageFor(model => model.DonorID,Html.Translate("Donor is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.CommodityTypeID, Html.Translate("Commodity Type")) <span class="required">*</span>
                        </div>
                        <div class="controls">

                            @Html.DropDownList("CommodityTypeID", string.Empty)

                            @Html.ValidationMessageFor(model => model.CommodityTypeID,Html.Translate("Commodity Type Id is required"))

                        </div>
                    </div>
                </td>
                <td style="vertical-align: top">
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.SINumber, Html.Translate("SI/Batch Number")) <span class="required">*</span>
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.SINumber)
                            @Html.ValidationMessageFor(model => model.SINumber,Html.Translate("SI Number is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.PortName, Html.Translate("Port Name"))
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.PortName)
                            @Html.ValidationMessageFor(model => model.PortName,Html.Translate("Port Name is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.ReferenceNo, Html.Translate("Reference Number")) <span class="required">*</span>
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.ReferenceNo)
                            @Html.ValidationMessageFor(model => model.ReferenceNo,Html.Translate("Reference No is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.Vessel, Html.Translate("Vessel")) <span class="required">*</span>
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.Vessel)
                            @Html.ValidationMessageFor(model => model.Vessel,Html.Translate("Vessel is required"))
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.ETA, Html.Translate("ETA"), new { @class = "cats-date-pref" }) <span class="required">*</span>
                        </div>

                        <div class="controls">
                            @Html.EditorFor(model => model.ETA)
                            @Html.ValidationMessageFor(model => model.ETA,Html.Translate("ETA is required"))
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </div>
     <div class="clear"></div>
    <div class="control-label"></div>
    <div class="controls">
        <input class="t-button" type="submit" style="width: 80px; height: 25px;" class="t-button" value="@Html.Translate("Save")"
            onclick="submitGiftCertificateData()" />
        <input class="t-button" type="reset" style="width: 80px; height: 25px;" class="t-button" value="@Html.Translate("Cancel")"
            onclick="cancel()" />
    </div>
    <div class="clear"></div>  

   }     
    <div class="clear"></div>
    <div class="field-set">
        <table>
            <tr>
                <td>

                    @(Html.Kendo().Grid<GiftCertificateDetailsViewModel>()
           .Name("Grid")
           .ToolBar(commands =>
                        {
                            commands.Create();
                            commands.Save();
                        })

           .Editable(editing => editing.Mode(GridEditMode.InCell))
           .Columns(columns =>
                        {
                            columns.AutoGenerate(false);
                            columns.ForeignKey(o => o.CommodityID, (IEnumerable<Commodity>)ViewData["Commodities"], "CommodityID", "Name").Width(10).Title(Html.Translate("Commodity"))
                                .Filterable(true);
                            columns.Bound(o => o.BillOfLoading).Width(80).Title(Html.Translate("Bill of Loading"));

                            columns.Bound(o => o.YearPurchased).Width(100).Title(Html.Translate("Year Purchased (EC)")).Width(80).HtmlAttributes(new { align = "right" });
                            columns.Bound(o => o.AccountNumber).Width(10).Title(Html.Translate("Acc. No")).Width(80).HtmlAttributes(new { align = "right" });
                            columns.Bound(o => o.WeightInMT).Title(Html.Translate("Sent Qty (MT)")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N3}");
                            columns.Bound(o => o.EstimatedPrice).Title(Html.Translate("Est. Price")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N2}");
                            columns.Bound(o => o.EstimatedTax).Title(Html.Translate("Est. Tax")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N2}");

                            columns.ForeignKey(o => o.DCurrencyID, (System.Collections.IEnumerable)ViewData["DCurrencies"], "DetailID", "Name").Width(10).Title(Html.Translate("Currency"))
                                .Filterable(true);
                            columns.ForeignKey(o => o.DFundSourceID, (System.Collections.IEnumerable)ViewData["DFundSources"], "DetailID", "Name").Width(10).Title(Html.Translate("Fund Source"))
                                .Filterable(true);
                            columns.ForeignKey(o => o.DBudgetTypeID, (System.Collections.IEnumerable)ViewData["DBudgetTypes"], "DetailID", "Name").Width(10).Title(Html.Translate("Fund Type"))
                                .Filterable(true);
                            columns.Bound(o => o.ExpiryDate).Title(Html.Translate("Expiry Date")).Format("{0:dd/MM/yyyy}") .Width(10);
                            columns.Command(commands => commands.Destroy().HtmlAttributes(new { align = "center" })).Width(10).Title(Html.Translate("Commands"));

                        })
           .DataSource(binding => binding.Ajax()
                                       .Read(read => read.Action("GiftCertificateDetail_Read", "GiftCertificate", new { id = Model.GiftCertificateID }))
                                       .Create(create => create.Action("GiftCertificateDetail_Create", "GiftCertificate", new { id = Model.GiftCertificateID }))
                                       .Update(update => update.Action("GiftCertificateDetail_Update", "GiftCertificate"))
                                       .Destroy(destroy => destroy.Action("GiftCertificateDetail_Destroy", "GiftCertificate"))
                                       .Model(m => m.Id(t => t.GiftCertificateDetailID))

           )


           .Navigatable()


                    )
                    @Html.ValidationMessageFor(model => model.rowCount,Html.Translate("Please insert at least one commodity"))
                </td>
            </tr>
        </table>
    </div>
   
@*<script type="text/javascript">
    $(document).ready(function() {
        $("#DModeOfTransports").OnChange(OnComChange);
        $("#ProgramID").OnChange(OnComChange);
        $("#DonorID").OnChange(OnComChange);
        $("#CommodityTypeID").OnChange(OnComChange);
        
        
    });
    function onEdit(e) {
        if ((e.mode == 'edit' || e.mode == 'insert') && (e.dataItem.GiftCertificateDetailID <= 0)) {
            if($('#AccountNumber').val() == '0')
                $('#AccountNumber').val(null);

            if ($('#WeightInMT').val() == '0')
                $('#WeightInMT').val(null);

            if ($('#EstimatedPrice').val() == '0')
                $('#EstimatedPrice').val(null);

            if ($('#EstimatedTax').val() == '0')
                $('#EstimatedTax').val(null);

            
        }
    }

    function cancel() {
        window.location = "/GiftCertificate/";
    }
    function OnComChange(e) {
        $(this).valid();
    }

    function OnSubCommodityGridLoad(e) {
        var combo = $('#CommodityID').data('tComboBox');
        if (combo) {
        }
        var control = $('#CommodityID').data('tComboBox');
        if (control != undefined || control != null) {
            control.dropDown._html = function (items, encode) {
                var sb = new $.kendo.stringBuilder();
                if (!items)
                    return sb.string();

                for (var i = 0, count = items.length; i < count; i++) {
                    var html = " ", item = items[i];
                    html = item.Text; // +"<small style='display: block'>" + item.Text + "</small>";
                    var obj = { html: html, dataItem: item };
                    if (this.onItemCreate) {
                        this.onItemCreate(obj);
                    }
                    if (!(item.unselectable)) {
                        sb.cat('<li unselectable="on" class="t-item" style="background : #ccc">').cat(obj.html).cat("</li>");
                    } else {
                        sb.cat('<li unselectable="on" class="t-item" style="padding-left : 10px;" >').cat(obj.html).cat("</li>");
                    }
                }

                return sb.string();
            };
        }
    }

    function OnComOpen(e) {
        var combo = $('#CommodityID').data('tComboBox');
        var combot = $('#CommodityTypeID').data('tComboBox');
        var comboType = combot.value();
        if (combo && combot && comboType != '') {
            var params = { };
            params["commodityTypeId"] = comboType;
            $.getJSON('@Url.Action("AvailbaleCommodities", "Receive")', params, function (comodities) {
                combo.dataBind(comodities);
                combot.disable();
            });
        } else if(combo){
            var comodities = { };
            combo.dataBind(comodities);
        }

    }
</script>*@