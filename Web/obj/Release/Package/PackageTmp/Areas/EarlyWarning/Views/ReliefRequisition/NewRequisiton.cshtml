@using Cats.Models.ViewModels
@using Cats.Models.Constant
@model IEnumerable<Cats.Models.ViewModels.ReliefRequisitionNew>

@{
    ViewBag.Title = "NewRequisiton";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<fieldset>
    <legend>
        New Requisiton For Distribution

    </legend>
    @*<button type="button" style="background-color: firebrick; height: 20px; width: 15px;" disabled="disabled"></button>
    <p id="duplicate"></p> Duplicate Requisition Numbers!*@
    <h6 id="duplicate"> <span class="label label-default" id="duplicatespan" style="background-color: firebrick; ">Duplicate Requisition Numbers!</span></h6>
</fieldset>
 
@section Toolbar
{
    <a class="btn toolbar-btn " id="btnSave" data-buttontype="btn_save" data-submittedform="frm_create_Requistions"></a>
    <a class="btn toolbar-btn " data-buttontype="btn_cancel" href="@Url.Action("CancelChanges", "ReliefRequisition", new { id = Model.First().RegionalRequestId})" title="Cancel"></a>
}

@section LeftBar
{
    @Html.Partial("_RequistionsLeftBar")

}

@using (Html.BeginForm("NewRequisiton", "ReliefRequisition", new { id = Model.FirstOrDefault().RegionalRequestId }, FormMethod.Post, new { id = "frm_create_Requistions" }))
{
    <table  id="kGrid">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.RequisitionNo)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Region)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Zone)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Program)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Commodity)
                </th>
                @if(Model.FirstOrDefault().Program=="PSNP")
                {
                    <th>
                    @Html.DisplayNameFor(model => model.Month)
                </th> 
                }
               else
                {
                    <th>
                        @Html.DisplayNameFor(model => model.Round)
                    </th>
                }
               
                <th>
                    @Html.DisplayNameFor(model => model.RequestedDate)
                </th>
                @* <th>
                @Html.DisplayNameFor(model => model.RequestedBy)
                </th>
           
                <th>
                    @Html.DisplayNameFor(model => model.ApprovedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ApprovedDate)
                </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>

              
            </tr>
        </thead>
        <tbody>
            @{
                int index = 0;
                int repeatedCounter = 0;
                int counter = 0;
                var requisitionNos = new List<string>();
            }
             @foreach (var item in Model)
             {
                 requisitionNos.Add(@item.Input.RequisitionNo);
             }
            @{
                var repeated = requisitionNos.GroupBy(x => x).Where(g => g.Count() > 1).ToList();
                if (repeated.Any())
                {
                    <script type="text/javascript">
                        $("#duplicatespan").show();
                        $("#btnSave").hide();
                    </script>
                }
                else
                {
                    <script type="text/javascript">
                        $("#duplicatespan").hide();
                        $("#btnSave").show();
                    </script>
                }
            }

        @foreach (var item in Model)
        {
            counter = requisitionNos.Count(c => c.Contains(@item.Input.RequisitionNo));
                <tr>
                    <td>
                        @if (counter >1)
                        {        
                                               
                            <input type='text' name="input[@index].RequisitionNo" id="txtRequisitionID" value="@item.Input.RequisitionNo" style="width: 80%; background-color: firebrick; font-weight: bold; border: none; !important;" onchange="Validate();"/>
                        }
                       @if (counter <=1)
                       {
                           <input type='text' name="input[@index].RequisitionNo" id="txtRequisitionID" value="@item.Input.RequisitionNo" style="width: 80%; border: none; !important;" onchange="Validate();" />
                       }
                        @Html.ValidationMessageFor(modelItem => item.RequisitionNo)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Region)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Zone)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Program)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Commodity)
                    </td>
                    @if(item.Program=="PSNP")
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.MonthName)
                        </td>
                    }
                    else
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.Round)
                        </td>
                    }
                    <td class="cats-date-pref-grid">
                        @Html.DisplayFor(modelItem => item.RequestDatePref)
                    </td>
                    @*<td>
                    @Html.DisplayFor(modelItem => item.RequestedBy)
                </td>
                
                <td>
                    @Html.DisplayFor(modelItem => item.ApprovedBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ApprovedDate)
                </td>*@
                    <td>
                        @{
                            var statusName = item.Status.ToString();
                            var showme = item.Status == 2 ? "" : "hidden";
                        }
                        @{
                            string status=string.Empty;

                            switch (item.Status)
                            {
                                case (int)ReliefRequisitionStatus.Draft:
                                    status = "Draft";
                                    break;
                                case (int)ReliefRequisitionStatus.Approved:
                                    status = "Approved";
                                    break;
                                case (int)ReliefRequisitionStatus.HubAssigned:
                                    status = "HubAssigned";
                                    break;
                                case (int)ReliefRequisitionStatus.ProjectCodeAssigned:
                                    status = "ProjectCodeAssigned";
                                    break;
                                case (int)ReliefRequisitionStatus.TransportOrderCreated:
                                    status = "TransportOrderCreated";
                                    break;
                                case (int)ReliefRequisitionStatus.TransportRequisitionCreated:
                                    status = "TransportRequisitionCreated";
                                    break;
                            }
                
                        }
                        @status
                    <input type='hidden'  name="input[@index].Number" id="txtReqID" value="@item.Input.Number"/>
                    <input type='hidden'  name="input[@index].RegionalRequestId" id="txtRegionalRequestId" value="@item.RegionalRequestId"/>
                   @* </td>

                    <td>*@
                      @*  <input type="hidden" value="@item.Input.Number" name="@("input[" + index + "].Number")" value="@item.Input.Number" />*@
                    @*</td>
                    <td>*@
                        @*@Html.ActionLink("Edit", "Edit", new {id = item.RequisitionID}) |*@

                   @* </td>*@
                </tr>
                requisitionNos.Add(@item.Input.RequisitionNo);
                index++;
            }
           
        </tbody>
    </table>
    <p>
        @*<input class="btn btn-success" type="submit" value="Save Change" />*@
       @* <input class="btn btn-success" type="submit" value="Save Change" />*@
    </p>
                            }
<div id='dialogDiv' class='modal fade bs-modal-md' tabindex="-1" aria-hidden="true">
    <div id='dialogContent'>
    </div>
</div>
    
<script>
    $(document).ready(function() {
        $("#kGrid").kendoGrid({
            pageable: false,
            scrollable: true,
            sortable: true,
        }).Events(evt => {
            evt.Edit("Validate");
        });

    });

    function ShowPopup() {
        $('#cats-modal').remove();
        e.preventDefault();
        var $this = $(this),
            $remote = $this.data('remote') || $this.attr('href'),
            $modal = $('<div class="modal" id="cats-modal"><div class="modal-body"></div></div>');
        console.log($remote);
        $('body').append($modal);
        $modal.modal({ backdrop: 'static', keyboard: false });
        $modal.load($remote);
    };

    
    function Validate(e) {
        
        var requisitionsNos = [];
        var entityGrid = $("#kGrid").data("kendoGrid");
        var data = entityGrid.dataSource.data();
        var totalNumber = data.length;

        for (var i = 0; i < totalNumber; i++) {       
            var name = "input[" + i + "]." + "RequisitionNo";
            var x = document.getElementsByName(name);
            requisitionsNos[i] = x[0].value;
        }
        var totalRepeatedNos = 0;
        for (var i = 0; i < totalNumber; i++) {
            var name = "input[" + i + "]." + "RequisitionNo";
            var x = document.getElementsByName(name);
            var requisitionNo = requisitionsNos[i];
            var count = requisitionsNos.filter(function(value) {
                return value == requisitionNo;
            }).length;
            if (count > 1) {
                $(x).css({ "background-color": "firebrick", "font-weight": "bold" });
                totalRepeatedNos = totalRepeatedNos + 1;
            } else $(x).css({ "background-color": "white", "font-weight": "normal" });
        }
        //var duplicate = document.getElementById("")
        if (totalRepeatedNos >= 1){
            $("#duplicatespan").show();
            $('#btnSave').hide();
        }
        else {
            $("#duplicatespan").hide();
            $('#btnSave').show();
        }
    }

  
</script>

               

                     
<script type="text/javascript">
    @ViewBag.JS
    function ShowPopup() {
        e.preventDefault();
        var $remote = 'ReliefRequisition/RepeatedRequisitions'; //$(this).attr('href');
        $('#dialogContent').load($remote, function() {
            $('#dialogDiv').modal({
                backdrop: 'static',
                keyboard: false
            }, 'show');
            //bindForm(this);
            $(".modal-dialog").removeClass("modal-sm").addClass("modal-md");
        });
        return false;
    }

</script>