 @using System.Collections
@using System.Diagnostics
@using Cats.Areas.EarlyWarning.Models
@model System.Data.DataTable
@using Cats.Helpers
@using Cats.Security
@using Cats.Models
@using Cats.Services.Security
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Regional Relief Requests";
    //Layout = "~/Views/Shared/_MainLayout.cshtml";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    ViewBag.PageTitle = "Regional Request Detail";
    ViewBag.PageTitleDescription = "";
    int index = 0;

}
@{
    var modelRequest = (RegionalRequestViewModel)ViewData["Request_main_data"];
}

@{
    //var user = (UserIdentity)System.Web.HttpContext.Current.User.Identity;
    //var unit = user.Profile.PreferedWeightMeasurment;
}

@section Toolbar
{
    @* <div class="btn-group" style="margin-right:8px;">
            <button class="btn">Action</button>
            @{
                <button class="btn dropdown-toggle " data-toggle="dropdown">
                    <span class="caret"></span>
                </button>
            }


            <ul class="dropdown-menu">

                @if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Draft)
                {

                    <li><a href="@Url.Action("Edit", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Edit</a></li>
                    <li><a href="@Url.Action("Allocation", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Allocation</a></li>
                    <li><a href="@Url.Action("ApproveRequest", "Request", new { id = modelRequest.RegionalRequestID })">Approve</a></li>
                }


                <li><a href="#"></a></li>
            </ul>

        </div>*@
    @*<a class="btn toolbar-btn " href="@Url.Action("Index", "Request", new { Area = "EarlyWarning" })" data-buttontype="btn_back_to_list"></a>*@

    @*<div class="btn-group">
        <button class="btn">Action</button>
        @{
            <button class="btn dropdown-toggle " data-toggle="dropdown">
                <span class="caret"></span>
            </button>
        }

        <ul class="dropdown-menu">
            @if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Draft)
            {
            <li><a href="@Url.Action("Edit", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Edit</a></li>
            <li><a href="@Url.Action("Allocation", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Allocation</a></li>
            <li><a href="@Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID})">Approve</a></li>

            }
            @if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Approved && modelRequest.ProgramId == 3)
            {
            <li><a id="btnEditPlan" href="@Url.Action("CreateRequisitionForIDPS", "ReliefRequisition", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID, programId = modelRequest.ProgramId })"><i class="icon-plus"></i>IDPS Requisiton</a></li>
            <li><a href="@Url.Action("RejectRequest", "Request", new {id = modelRequest.RegionalRequestID})">Reject</a></li>
            }
            else if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Approved)
            {
            <li><a href="@Url.Action("CreateRequisiton", "ReliefRequisition", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })"><i class="icon-plus"></i>Requisiton</a></li>
            <li><a href="@Url.Action("RejectRequest", "Request", new {id = modelRequest.RegionalRequestID})">Reject</a></li>
            }
            else if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Closed)
            {
            <li><a href="@Url.Action("RevertRequestStatus", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Revert Status</a></li>
            }
            else if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Reject)
            {
            <li><a href="@Url.Action("Edit", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Edit</a></li>
            <li><a href="@Url.Action("Allocation", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Allocation</a></li>
            <li><a href="@Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID})">Approve</a></li>
            }

        </ul>
        <a class="btn toolbar-btn" href="@Url.Action("Print", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })" style="display:none1;" target="_blank" id="toolbar_button_print" title="Print"><i class="icon-print"></i></a>
    </div>*@

    @* @if (modelRequest.StatusID == (int)Cats.Models.Constant.RegionalRequestStatus.Approved)
        {
            <a class="btn toolbar-btn "   href="@Url.Action("CreateRequisiton", "ReliefRequisition", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })" data-buttontype=""><i class="icon-plus"></i>Requisiton</a>
        }*@
    <a class="btn btn-fit-height grey-salt" href="@Url.Action("Index", "Request", new { Area = "EarlyWarning" })"><i class="fa fa-list"></i> @Html.Translate("Back to List")</a>

}
<script type="text/javascript">
    $(function() {

        //Optional: turn the chache off
        $.ajaxSetup({ cache: false });

        $('#btnEditPlan').click(function() {

            // alert("");
            $('#dialogContent').load(this.href, function() {
                $('#dialogDiv').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');
                //bindForm(this);
            });
            return false;
        });
        $('#btnAddFDP').click(function() {
            e.preventDefault();
            var grid = this;
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var row = $(e.currentTarget).closest("tr");
            $('#cats-modal-reject').modal('show');

            $("#yes").click(function() {

                window.location = "@Url.Action("ApproveHRD", "HRD")" + "/" + dataItem.HRDID;

            });
        });
        $('#btnAddFDP').click(function () {

            // alert("");
            $('#dialogContent').load(this.href, function () {
                $('#dialogDiv').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');
                //bindForm(this);
            });
            return false;
        });
    });


</script>

<div id='dialogDiv' class='modal hide fade in'>
    <div id='dialogContent'></div>
</div>

@if (ViewBag.message != null)
{
    <div class="alert alert-success">
        @ViewBag.message
    </div>
}

@if (ViewBag.msg != null)
{
    <div class="alert alert-error">
        @ViewBag.msg
    </div>
}

<div class="portlet light bordered bg-inverse">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-list-alt font-green-sharp"></i>
            <span class="caption-subject bold uppercase"> @Html.Translate("Request Header")</span>
            <span class="caption-helper">  </span>
        </div>
        <div class="tools">
            <a href="#" class="collapse" data-original-title="" title=""></a>
            @*<a href="javascript:;" class="remove" data-original-title="" title=""></a>*@
        </div>
        <div class="actions">
            <div class="btn-group">
                <button type="button" id="action_@index" class="btn btn-default dropdown-toggle btn-xs green-stripe" data-toggle="dropdown">
                    <i class="fa fa-ellipsis-horizontal"></i> @Html.Translate("Workflow") <i class="fa fa-angle-down"></i>
                </button>
                <ul class="dropdown-menu pull-right">

                    @{

                        var state = modelRequest.BusinessProcess.CurrentState.BaseStateTemplate;
                    }


                    @foreach (FlowTemplate actions in state.InitialStateFlowTemplates)
                    {
                        if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Approve_Request) && actions.Name == "Approved")
                        {
                            <li class="edit_button"><a href="javascript:promot_workflow(modelRequest.BusinessProcessID ,@actions.FinalStateID,'@actions.Name' , modelRequest.RegionalRequestID)" title="@actions.Name">@actions.Name</a></li>
                        }
                        if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Approve_Need_Assessment) && actions.Name == "FederalApproved")
                        {
                            <li class="edit_button"><a href="javascript:promot_workflow(modelRequest.BusinessProcessID ,@actions.FinalStateID,'@actions.Name',modelRequest.RegionalRequestID)" title="@actions.Name">@actions.Name</a></li>
                        }
                        if (UserAccountHelper.RegionalOperationCheck(RegionalConstants.Operation.Add_new_needs_assessment) && actions.Name == "Rejected")
                        {
                            <li class="edit_button"><a href="javascript:promot_workflow(modelRequest.BusinessProcessID ,@actions.FinalStateID,'@actions.Name',modelRequest.RegionalRequestID)" title="@actions.Name">@actions.Name</a></li>
                        }

                    }
                    <li class="divider"></li>
                    @*@if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.View_Need_Assessment_Detail))
                {*@
                    <li class="edit_button"><a href="javascript:workflow_history(modelRequest.BusinessProcessID)"> History </a></li>
                    @*}*@
                </ul>
            </div>

            <div class="btn-group">
                <button class="btn green dropdown-toggle" data-toggle="dropdown" type="button"><i class="fa fa-ellipsis"></i> Action <i class="fa fa-angle-down"></i></button>
                <ul class="dropdown-menu pull-right" style="-moz-min-width: 120px; -ms-min-width: 120px; -o-min-width: 120px; -webkit-min-width: 120px; min-width: 120px;">
                    @*<li><a id="btnAddFDP"  href="@Url.Action("AddBeneficary", "Request", new { id = modelRequest.RegionalRequestID })" >ADD FDP </a></li>*@
                    @if (modelRequest.StatusID == (int) Cats.Models.Constant.RegionalRequestStatus.Draft)
                    {
                        <li><a class="btn green-haze-stripe" href="@Url.Action("Edit", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID})">Edit</a></li>
                        <li><a class="btn green-haze-stripe" href="@Url.Action("Allocation", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID})">Allocation</a></li>
                        @*<li><a class="btn green-haze-stripe" href="@Url.Action("ApproveRequest", "Request", new { id = modelRequest.RegionalRequestID })">Approve</a></li>*@
                        if (modelRequest.Program == "Relief")
                        {

                            <li>
                                <a class="btn green-haze-stripe">@Html.EarlyWarningOperationMenuItem(@Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     EarlyWarningConstants.Operation.Approve_Request, @Html.Translate("Approve Request"))</a>

                                <a class="btn green-haze-stripe">@Html.RegionalOperationMenuItem(@Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     @Html.Translate("Approve Request"), RegionalConstants.Operation.Approve_regional_request)</a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a class="btn green-haze-stripe">@Html.PSNPOperationMenuItem(@Html.Translate("Approve Request"), @Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     PsnpConstants.Operation.Approve_Request)</a>
                                <a class="btn green-haze-stripe">@Html.RegionalOperationMenuItem(@Html.Translate("Approve Request"), @Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     RegionalConstants.Operation.Approve_regional_request)</a>
                            </li>
                        }


                    }
                    @if (modelRequest.StatusID == (int) Cats.Models.Constant.RegionalRequestStatus.Approved && modelRequest.ProgramId == (int) Cats.Models.Constant.Programs.IDPS)
                    {
                        <li><a class="btn green-haze-stripe" id="btnEditPlan" href="@Url.Action("CreateRequisitionForIDPS", "ReliefRequisition", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID, programId = modelRequest.ProgramId})"><i class="icon-plus"></i>IDPS Requisiton</a></li>

                        <li><a class="btn green-haze-stripe" href="@Url.Action("RejectRequest", "Request", new {id = modelRequest.RegionalRequestID})">Reject</a></li>
                    }
                    else if (modelRequest.StatusID == (int) Cats.Models.Constant.RegionalRequestStatus.Approved)
                    {
                        if (modelRequest.Program == "Relief")
                        {
                            <li><a class="btn green-haze-stripe">@Html.EarlyWarningOperationMenuItem(@Url.Action("CreateRequisiton", "ReliefRequisition", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID}),
                                                                     EarlyWarningConstants.Operation.New_requisition, @Html.Translate("Requisiton"))</a></li>
                            <li> <a class="btn green-haze-stripe" href="javascript:rejectRequest('@modelRequest.RegionalRequestID')">Reject</a> </li>
                            @*<li><a class="btn green-haze-stripe">@Html.EarlyWarningOperationMenuItem( "javascript:rejectRequest('@modelRequest.RegionalRequestID')" ,
                                                                     EarlyWarningConstants.Operation.Reject_Request, @Html.Translate("Reject"))</a></li>*@
                        }
                        else if (modelRequest.Program == "PSNP")
                        {
                            <li><a class="btn green-haze-stripe">@Html.PSNPOperationMenuItem(@Html.Translate("Requisiton"), @Url.Action("CreateRequisiton", "ReliefRequisition", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID}),
                                                                     PsnpConstants.Operation.New_requisition)</a></li>

                            <li><a class="btn green-haze-stripe">@Html.PSNPOperationMenuItem(@Html.Translate("Reject"), @Url.Action("RejectRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     PsnpConstants.Operation.Reject_Request)</a></li>
                        } @*
                          
                        <li><a class="btn green-haze-stripe" href="@Url.Action("CreateRequisiton", "ReliefRequisition", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })"><i class="icon-plus"></i>Requisiton</a></li>
                        <li><a class="btn green-haze-stripe" href="@Url.Action("RejectRequest", "Request", new { id = modelRequest.RegionalRequestID })">Reject</a></li>*@
                    }
                    else if (modelRequest.StatusID == (int) Cats.Models.Constant.RegionalRequestStatus.Closed)
                    {
                        @*<li><a class="btn green-haze-stripe" href="@Url.Action("RevertRequestStatus", "Request", new { Area = "EarlyWarning", id = modelRequest.RegionalRequestID })">Revert Status</a></li>*@

                        switch (modelRequest.Program)
                        {
                            case "Relief":
                                <li><a class="btn green-haze-stripe">@Html.EarlyWarningOperationMenuItem(@Url.Action("RevertRequestStatus", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID}),
                                                                         EarlyWarningConstants.Operation.Reverse_Request, @Html.Translate("Revert Status"))</a></li>
                                break;
                            case "PSNP":
                                <li><a class="btn green-haze-stripe">@Html.PSNPOperationMenuItem(@Html.Translate("Revert Status"), @Url.Action("RevertRequestStatus", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID}),
                                                                         PsnpConstants.Operation.Reverse_Request)</a></li>
                                break;
                        }
                    }
                    else if (modelRequest.StatusID == (int) Cats.Models.Constant.RegionalRequestStatus.Reject)
                    {
                        if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Edit_request)
                            || UserAccountHelper.RegionalOperationCheck(RegionalConstants.Operation.Edit_regional_request))
                        {
                            <li><a class="btn green-haze-stripe" href="@Url.Action("Edit", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID})">Edit</a></li>
                        }
                        if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Request_Allocation)
                            || UserAccountHelper.RegionalOperationCheck(RegionalConstants.Operation.Allocate_requests))
                        {
                            <li><a class="btn green-haze-stripe" href="@Url.Action("Allocation", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID})">Allocation</a></li>
                        }
                        if (modelRequest.Program == "Relief")
                        {
                            <li>
                                <a class="btn green-haze-stripe">@Html.EarlyWarningOperationMenuItem(@Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     EarlyWarningConstants.Operation.Approve_Request, @Html.Translate("Approve Request"))</a>
                                <a class="btn green-haze-stripe">@Html.RegionalOperationMenuItem(@Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     @Html.Translate("Approve Request"), RegionalConstants.Operation.Approve_regional_request)</a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a class="btn green-haze-stripe">@Html.PSNPOperationMenuItem(@Html.Translate("Approve Request"), @Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     PsnpConstants.Operation.Approve_Request)</a>
                                <a class="btn green-haze-stripe">@Html.RegionalOperationMenuItem(@Html.Translate("Approve Request"), @Url.Action("ApproveRequest", "Request", new {id = modelRequest.RegionalRequestID}),
                                                                     RegionalConstants.Operation.Approve_regional_request)</a>
                            </li>
                        }
                        @*<li><a class="btn green-haze-stripe" href="@Url.Action("ApproveRequest", "Request", new { id = modelRequest.RegionalRequestID })">Approve</a></li>*@
                    }

                </ul>
            </div>
            @if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Print_request)
                 || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.Print_request)
                 || UserAccountHelper.RegionalOperationCheck(RegionalConstants.Operation.Print_requests))
            {
                <a class="btn green dropdown-toggle toolbar-btn" href="@Url.Action("Print", "Request", new {Area = "EarlyWarning", id = modelRequest.RegionalRequestID})" target="_blank" id="toolbar_button_print" title="Print"><i class="fa fa-print"></i> @Html.Translate("Print")</a>
            }
            @*<a class="btn btn-circle btn-default btn-sm green-stripe" data-buttontype="btn_new_record" href="@Url.Action("New", "Request")"><i class="fa fa-plus-circle"></i> @Html.Translate("New Request")</a>*@
            @*<a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>*@
        </div>
    </div>
    <div class="portlet-body">
        <div class="form-horizontal">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.ReferenceNumber, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.ReferenceNumber, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.Program, new { @class = "col-md-4 control-label" })
                        @*@Html.Label(Html.Translate("Dispatch Date"),new { @class = "cats-date-pref" })*@
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.Program, new { Disabled = true, @class = "form-control" })
                            @*<td>
                                <b>@Html.Translate("Year"):</b>
                                @modelRequest.Year*@
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.RequestedBy, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.RequestedBy, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>
                @* <div class="span3">
                        <div style="float: right">

                        </div>
                    </div>*@
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.Region, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.Region, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.MonthName, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.MonthName, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.ApprovedBy, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.ApprovedBy, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.RequestDate, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.RequestDate, new { Disabled = true, @class = "cats-date-pref form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.Label("Year(EC)", new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.Year, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.Status, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(m => modelRequest.Status, new { Disabled = true, @class = "form-control" })
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => modelRequest.Ration, new { @class = "col-md-4 control-label" })
                        <div class="col-md-7">
                            <div class="input-group">
                                @Html.TextBoxFor(m => modelRequest.Ration, new { Disabled = true, @class = "form-control" })
                                <span class="input-group-addon">
                                    <a class="" id="pop" data-original-title="  Ration Detail  ">
                                        @*<a id="pop" class="" href="#" data-original-title="Ration Detail">*@
                                        <i class="icon-question"></i>
                                        @*</a>*@
                                    </a>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div>
                        <a id="pop" class="btn btn-sm" href="#" data-original-title="Ration Detail"><i class="icon-question"></i></a>
                    </div>*@
            </div>
        </div>

    </div>
</div>
@*<div id='dialogDiv' class='modal hide fade in'>
        <div id='dialogContent'></div>
    </div>*@
<div class="portlet light bordered" style="display: block;">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-list font-green-sharp"></i>
            <span class="caption-subject bold uppercase"> @Html.Translate("Details")</span>
            <span class="caption-helper">  </span>
        </div>
        @*<div class="tools">
                <a href="#" class="collapse" data-original-title="" title=""></a>
                <a href="javascript:;" class="remove" data-original-title="" title=""></a>
            </div>*@
        <div class="actions">
            @*<a class="btn btn-circle btn-default btn-sm green-stripe" data-buttontype="btn_new_record" href="@Url.Action("New", "Request")"><i class="fa fa-plus-circle"></i> @Html.Translate("New Request")</a>*@
            <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
        </div>
    </div>
    <div class="portlet-body">
        <div class="table-responsive">
            @(Html.Kendo().Grid(Model)
                  .Name("Grid")
                  .Columns(columns =>
                  {

                      foreach (System.Data.DataColumn column in Model.Columns)
                      {
                          if (column.DataType == typeof (decimal))
                          {
                              columns.Bound(column.ColumnName).HtmlAttributes(new {align = "right"}).Format("{0:N2}").ClientGroupFooterTemplate("sum:#:sum#");
                              //.HeaderHtmlAttributes(new { @class = "cats-unit-pref-grid" })
                          }
                          else if (column.DataType == typeof (int))
                          {
                              columns.Bound(column.ColumnName).HtmlAttributes(new {align = "right"}).ClientGroupFooterTemplate("<div style='float: right'>#= kendo.toString(sum, 'N2') #</div>").ClientFooterTemplate("Sum: #=sum#");
                              ;

                          }
                          else if (column.ColumnName == "Zone")
                          {
                              //columns.Bound(column.ColumnName);
                          }
                          else
                          {
                              columns.Bound(column.ColumnName);
                          }

                      }
                  })
                  .Sortable()
                  .Scrollable()
                  .Groupable()
                  .DataSource(dataSource => dataSource
                      .Ajax().Group(a =>
                      {
                          a.Add("Zone", typeof (string));
                          //a.Add("Beneficiaries", typeof(int));
                          //a.Add("PlannedBeneficiaries", typeof(int));
                      })
                  //     .Model(model =>
                  //     {
                  //         foreach (System.Data.DataColumn column in Model.Columns)
                  //         {

                  //             model.Field(column.ColumnName, column.DataType);
                  //         }
                  //     }).Read(read =>

                  //read.Action("StatusGeneric", "Configuration")
                  //)
                  //    .Aggregates(a =>
                  //    {
                  //        a.Add("Beneficiaries", typeof(int)).Sum();
                  //        a.Add("PlannedBeneficiaries", typeof(int)).Sum();
                  //    })


                  )

                  )
        </div>
    </div>
</div>
@Html.Partial("~/Views/Shared/_PromotWorkflow.cshtml")
<div class="modal" id="cats-modal-reject">
    <div class="modal-dialog ">
        <div class="modal-content">

            <div class="modal-header">
                <button aria-hidden="true" data-dismiss="modal" class="close" type="button">×</button>
                <h4 id="myModalLabel" class="modal-title">Reject Detail</h4>
            </div>


            <div class="modal-body">

                <div class="row-fluid">
                    <div class="controls span6">
                     

                        <textarea class="input-xlarge" id="Comment"
                                  name="Summary" rows="5" cols="0"
                                  placeholder="Comment"></textarea>
                        <div class="controls span6">
                            <label> Attachment</label>
                        </div>
                        <input type="file"
                               class="input-xlarge" id="Attachment" name="Attachment"
                               placeholder="Attachment" />
                    </div>
                    
                </div>

            </div>
            <div class="modal-footer">
                <button id="yes" class="btn btn-danger" type="submit">Reject</button>
                <button id="no" class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
            </div>


        </div>
    </div>
</div>
<script>

    var tblbody;

    $("#pop").popover({
        placement: 'right', //placement of the popover. also can use top, bottom, left or     right
        html: 'true', //needed to show html of course
        content: gett(this),// hope this should be link
        trigger: 'hover'
    });





    function gett(t) {

        $.ajax({
            async: false,
            type: "POST",
            url: "@Url.Action("RationDetail", "Ration")",
            data: "{id:'@modelRequest.RationID'}",
            dataType: "json",
            contentType: "application/json; charset=utf-8",

            success: function (data) {
                tblbody = "<table style='margin: 0px;' class='table table-striped table-condensed'>";
                for (var i = 0; i < data.length; i++) {
                    //tblbody += "<table>";
                    tblbody += "<tr>";
                    tblbody += "<td>" + data[i].Name + "</td>";
                    tblbody += "<td align='right'>" + data[i].Amount + "</td>";
                    tblbody += "</tr>";
                }
                tblbody += "</table>";

            },

        });
        return tblbody;
    };


    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            //alert(message);
        }
    }
    function rejectRequest(regionalRequestId) {
        //e.preventDefault();
        //var grid = this;
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //var row = $(e.currentTarget).closest("tr");

        $('#cats-modal-reject').modal('show');

        $("#yes").click(function() {
            var comment = $('#Comment').val();
            var reasonDetail = { RegionalRequestID: regionalRequestId, Comment: comment, Attachment: '1' };
            var formData = new FormData();
            $('#cats-modal-reject').modal('hide');
            var totalFiles = document.getElementById("Attachment").files.length;
            for (var i = 0; i < totalFiles; i++)
            {
                var file = document.getElementById("Attachment").files[i];

                formData.append("Attachment", file);
                formData.append("ReasonDetail", reasonDetail);
            }
            formData.append("RegionalRequestId", regionalRequestId);
            formData.append("Comment", comment);
            $.ajax({
                type: "POST",
                url: '../Upload',
                data: formData,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    //alert('succes!!');
                },
                error: function (error) {
                    //alert("errror");
                }
            });
           @*window.location = "@Url.Action("RejectRequestWithComment", "Request")" + "/" + reasonDetail;*@

        });


    }

    function onDataBound(e) {

        check_planned();
        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("change", "td", function (e) {

            var row = $(this).closest("tr");
            var rowIdx = $("tr", grid.tbody).index(row);
            update_ui(rowIdx, row);
        }
        );
    }

    function update_ui(rowIdx, row) {
        var grid = $("#grid").data("kendoGrid");
        var firstItem = $('#grid').data().kendoGrid.dataSource.data()[rowIdx];
        var plannedBeneficiaries = firstItem.get('PlannedBeneficiaries');
        var beneficiaries = firstItem.get('Beneficiaries');

        alert("planned: " + plannedBeneficiaries);
        alert("Benefi : " + beneficiaries);
        if (plannedBeneficiaries < beneficiaries) {
            row.addClass("surplus");
        } else {
            row.removeClass("surplus");
        }
    }

    function check_planned() {
        var grid = $("#grid").data("kendoGrid");
        var rowIdx = 0;
        $(grid.tbody).find("tr").each(function () {
            //$(this).addClass("surplus");
            update_ui(rowIdx, $(this));
            rowIdx++;
        });
    }
   
    var history_link = "@Url.Action("History", "BusinessProcess", new { Area = "WorkflowManager", id = "0" })";
    function promot_workflow(BusinessProcessID, nextstate, actionname, RegionalRequestID) {
        $('#ParentBusinessProcessID').val(BusinessProcessID);
        $('#stateID').val(nextstate);
        $('#modalPromotionLabel').html(actionname);
        $('#RegionalRequestID').val(RegionalRequestID);
        $('#modalPromotion').modal();
    }
    function workflow_history(BusinessProcessID) {
        $('#modalHistory').modal();
        $('#modalHistoryBody').html("<div style='text-align:center;'> <img src='/content/images/loading.gif'/></div>");
        $.post(history_link + BusinessProcessID, {},
        function (data) {
            $("#modalHistoryBody").html(data);
        }
        );
    }

</script>

<style>
    .surplus * {
        color: red;
    }

    .surplus {
        color: red;
    }

    .popover-content {
        padding: 5px;
    }

    .popover-title {
        padding: 5px 2px;
    }
    .k-grid-content {
        min-height: 500px;
    }
</style>
