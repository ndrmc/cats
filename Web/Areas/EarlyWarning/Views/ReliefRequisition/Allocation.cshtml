@using System.Collections
@using Cats.Areas.EarlyWarning.Models
@using Cats.Models
@model Cats.Areas.EarlyWarning.Models.ReliefRequisitionViewModel
@using Cats.Models.Constant
@using Cats.Services.Security
@using Cats.Helpers;
@using Cats.Models.ViewModels
@using Cats.Security
@using Kendo.Mvc.UI

@{

    var user = (UserIdentity)System.Web.HttpContext.Current.User.Identity;
    var unit = user.Profile.PreferedWeightMeasurment;
}

@{
    ViewBag.Title = "Edit";
    //Layout = "~/Views/Shared/_CATSLayout.cshtml";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    if (Model != null)
    {

        if (Model.ProgramID == 3) //i.e. IDPS
        {
            ViewBag.PageTitle = Model.Program + " Requisition Resource Allocation ";
        }
        else
        {
            ViewBag.PageTitle = "Monthly " + Model.Program + " Requisition Resource Allocation ";
        }
    }
    ViewBag.PageTitleDescription = "";
}
@section Toolbar{
    
    <a class="btn btn-fit-height grey-salt" data-buttontype="btn_back_to_list" href="@Url.Action("Index", "ReliefRequisition")"><i class="fa fa-list"></i> @Html.Translate("Back to List")</a>
}
@*@section LeftBar{
        @Html.Partial("_RequistionsLeftBar")
    }*@
<div class="portlet light bordered bg-inverse">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-list-alt font-green-sharp"></i>
            <span class="caption-subject bold uppercase"> @Html.Translate("Request Header")</span>
            <span class="caption-helper">  </span>
        </div>
        <div class="tools">
            <a href="#" class="collapse" data-original-title="" title=""></a>
        </div>
        <div class="actions">
            @if (Model.Status == "Draft" || Model.Status == "Rejected")
            {
                <div class="btn-group">
                    <button class="btn green dropdown-toggle" data-toggle="dropdown" type="button"><i class="fa fa-ellipsis"></i> Action <i class="fa fa-angle-down"></i></button>
                    <ul class="dropdown-menu pull-right" style="-moz-min-width: 120px; -ms-min-width: 120px; -o-min-width: 120px; -webkit-min-width: 120px; min-width: 120px;">
                        @if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Edit_requisition)
                            || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.Edit_requisition))
                        {
                            <li><a class="btn green-haze-stripe" data-buttontype="btn_edit" href="@Url.Action("Edit", "ReliefRequisition", new {id = @Model.RequisitionID})"> Edit</a></li>
                        }
                        @*@if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Approve_Requisition)
                            || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.Approve_Monthly_relife_requisitions))
                        {
                            <li><a href="@Url.Action("SendToLogistics", "ReliefRequisition", new {id = Model.RequisitionID})" class="btn green-haze-stripe  btn-Approve-allocation"> @Html.Translate("Approve")</a></li>
                        }*@
                        
                    </ul>
                </div>
                <div class="btn-group">
                    <button type="button" id="action" class="btn btn-default dropdown-toggle btn-xs green-stripe" data-toggle="dropdown">
                        <i class="fa fa-ellipsis-horizontal"></i> @Html.Translate("Workflow") <i class="fa fa-angle-down"></i>
                    </button>
                    <ul class="dropdown-menu pull-right">
                        @foreach (FlowTemplateViewModel actions in Model.InitialStateFlowTemplates)
                        {
                            if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Approve_Requisition)
                            || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.Approve_Monthly_relife_requisitions))
                            {
                                <li class="edit_button"><a href="javascript:promot_workflow(@Model.BusinessProcessID ,@actions.FinalStateID,'@actions.Name',@Model.RequisitionID)" title="@actions.Name">@actions.Name</a></li>
                            }
                        }
                        <li class="divider"></li>
                        @if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.View_Requisition)
                            || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.View_Requisitions))
                        {
                            <li class="edit_button"><a href="javascript:workflow_history(@Model.BusinessProcessID)"> History </a></li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
    <div class="portlet-body">
        <div class="form-horizontal">

            <div class="row">
                <div class="col-md-4">
                 <div class="form-group">
                      <div class="col-sm-4 control-label">@Html.DisplayNameFor(model => model.PlanName)</div>
                        <div class="col-sm-8">
                                                       @Html.TextBoxFor(model => model.PlanName, new { disabled = "true", @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row ">
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">@Html.DisplayNameFor(model => model.RequisitionNo)</div>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.RequisitionNo, new {disabled = "true", @class = "form-control"})
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">@Html.DisplayNameFor(model => model.Region)</div>
                        <div class="col-sm-8">@Html.TextBoxFor(model => model.Region, new {disabled = "true", @class = "form-control"})</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">
                            @Html.DisplayNameFor(model => model.Zone)
                        </div>
                        <div class="col-sm-8">@Html.TextBoxFor(model => model.Zone, new {disabled = "true", @class = "form-control"})</div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">
                            @Html.DisplayNameFor(model => model.Commodity)
                        </div>
                        <div class="col-sm-8">@Html.TextBoxFor(model => model.Commodity, new {disabled = "true", @class = "form-control"})</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">@Html.DisplayNameFor(model => model.Ration)</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.Ration, new {disabled = "true", @class = "form-control"})
                                <span class="input-group-addon">
                                    <a id="pop" data-original-title="Ration Detail"><i class="icon-question"></i></a>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    @if (Model.ProgramID == 1)
                    {
                        <div class="form-group">
                            <div class="col-sm-4 control-label">
                                @Html.DisplayNameFor(model => model.Round)
                            </div>
                            <div class="col-sm-8">@Html.TextBoxFor(model => model.Round, new {disabled = "true", @class = "form-control"})</div>
                        </div>
                    }
                    else if (Model.ProgramID == 2)
                    {
                        <div class="form-group">
                            <div class="col-sm-4 control-label">
                                @Html.DisplayNameFor(model => model.Month)
                            </div>
                            <div class="col-sm-8">@Html.TextBoxFor(model => model.Month, new {disabled = "true", @class = "form-control"})</div>
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">
                            @Html.LabelFor(model => model.RequestedDateEt, new {@class = "cats-date-pref"})
                        </div>
                        <div class="col-sm-8">@Html.TextBoxFor(model => model.RequestedDateEt, new {disabled = "true", @class = "form-control"})</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">
                            @Html.DisplayNameFor(model => model.Program)
                        </div>
                        <div class="col-sm-8">@Html.TextBoxFor(model => model.Program, new {disabled = "true", @class = "form-control"})</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="col-sm-4 control-label">
                            Status
                        </div>
                        <div class="col-sm-8">@Html.TextBoxFor(model => model.Status, new {disabled = "true", @class = "form-control"})</div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="portlet light bordered" style="display: block;">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-list font-green-sharp"></i>
            <span class="caption-subject bold uppercase"> @Html.Translate("Resource Allocation Lists")</span>
            <span class="caption-helper">  </span>
        </div>
        @*<div class="tools">
            <a href="#" class="collapse" data-original-title="" title=""></a>
            <a href="javascript:;" class="remove" data-original-title="" title=""></a>
        </div>*@
        <div class="actions">
            @*<a class="btn btn-circle btn-default btn-sm green-stripe" data-buttontype="btn_new_record" href="@Url.Action("New", "Request")"><i class="fa fa-plus-circle"></i> @Html.Translate("New Request")</a>*@
            <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
        </div>
    </div>
    <div class="portlet-body">
        <div class="table-responsive">
            @(Html.Kendo().Grid<ReliefRequisitionDetailViewModel>()
                          .Name("grid")
                          .Columns(columns =>
                          {
                              columns.Template(t => { }).Title("No").ClientTemplate("#= renderNumber(data) #").Width(50);
                              columns.Bound(p => p.Zone).Width(100).HtmlAttributes(new { style = "background-color:lightgray" });
                              columns.Bound(p => p.Woreda).Width(100).HtmlAttributes(new { style = "background-color:lightgray" });
                              columns.Bound(p => p.FDP).Width(100).HtmlAttributes(new { style = "background-color:lightgray" });

                              if (Model.ProgramID == 2)
                              {
                                  columns.ForeignKey(p => p.DonorID, (IEnumerable)ViewData["donors"], "DonorID", "Name").Title("Donor").Width(100).ClientFooterTemplate("<div style='text-align: right;'><b>TOTAL: </b></div>");
                                  ;
                              }

                              columns.Bound(p => p.BenficiaryNo).ClientFooterTemplate("<div style='text-align: right;'><b>#=kendo.format('{0:N0}', sum)#</b></div>").Format("{0:N0}").Width(100).HtmlAttributes(new { align = "right" }).Format("{0:n0}");

                              columns.Bound(p => p.Total).ClientFooterTemplate("<div style='text-align: right;'><b>#=kendo.format('{0:0.00}', sum)#</b></div>").Format("{0:0.00}").Width(100).HtmlAttributes(new { style = "background-color:lightgray", align = "right" }).Format("{0:n2}").HeaderHtmlAttributes(new { @class = "cats-unit-pref-grid" });
                              if (Model.ProgramID == 2) // Contengency is ONLY for Afar
                              {
                                  columns.Bound(p => p.Contingency).ClientFooterTemplate("<div style='text-align: right;'><b>#=kendo.format('{0:0.00}', sum)#</b></div>").Format("{0:0.00}").Width(100).HtmlAttributes(new { style = "background-color:lightgray", align = "right" }).Format("{0:n2}").HeaderHtmlAttributes(new { @class = "cats-unit-pref-grid" });
                              }
                              columns.Bound(p => p.Amount).ClientFooterTemplate("<div style='text-align: right;'><b>#=kendo.format('{0:0.00}', sum)#</b></div>").Format("{0:0.00}").Width(100).HtmlAttributes(new { style = "background-color:lightgray", align = "right" }).Format("{0:n2}").HeaderHtmlAttributes(new { @class = "cats-unit-pref-grid" }).Title("(Amount + Contengency)");
                              columns.Bound(p => p.RationAmount).Hidden(true);
                          })
                          .ToolBar(toolbar =>
                          {
                              if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Edit_requisition)
                              || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.Edit_requisition))
                              {
                                  toolbar.Save();
                              }
                          })
                          .Editable(editable =>
                          {
                              if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Edit_requisition)
                              || UserAccountHelper.PsnpOperationCheck(PsnpConstants.Operation.Edit_requisition))
                              {
                                  editable.Mode(GridEditMode.InCell);
                              }
                          })
                          .Selectable(t => t.Mode(GridSelectionMode.Single))
                          .Navigatable()
                          .Scrollable()
                          .HtmlAttributes(new { style = "height:500px;" })
                          .Events(ev => ev.DataBound("onDataBound"))
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .Aggregates(aggregates => aggregates.Add(p => p.BenficiaryNo).Sum())
                              .Aggregates(aggregates => aggregates.Add(p => p.Total).Sum())
                              .Aggregates(aggregates => aggregates.Add(p => p.Amount).Sum())
                              .Aggregates(aggregates => aggregates.Add(p => p.Contingency).Sum())
                              .Events(events => events.Change("onGridKeydown"))
                              .Model(model =>
                              {
                                  model.Id(p => p.RequisitionDetailID);
                                  model.Field(detail => detail.FDP).Editable(false);
                                  model.Field(detail => detail.Zone).Editable(false);
                                  model.Field(detail => detail.Woreda).Editable(false);
                                  model.Field(detail => detail.Commodity).Editable(false);
                                  model.Field(detail => detail.Donor).Editable(false);
                                  if (Model.Status == "Draft") // || Model.Status == "Approved")
                                  {
                                      model.Field(detail => detail.BenficiaryNo).Editable(true);
                                  }
                                  else
                                  {
                                      model.Field(detail => detail.BenficiaryNo).Editable(false);
                                  }

                              })
                              .Create(update => update.Action("Allocation_Create", "ReliefRequisition"))
                              .Read(read => read.Action("Allocation_Read", "ReliefRequisition", new { id = Model.RequisitionID }))
                              .Update(update => update.Action("Allocation_Update", "ReliefRequisition"))
                              .Destroy(update => update.Action("Allocation_Destroy", "ReliefRequisition"))
                          ).TableHtmlAttributes(new {@class="table table-condensed"})
            )
        </div>

    </div>
</div>




<div id="cats-modal"></div>
<div id='dialogDiv' class='modal fade bs-modal-md' tabindex="-1" aria-hidden="true">
    <div id='dialogContent'></div>
</div>
<div id="modalHistory" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 id="modalHistoryLabel">Activity History</h4>
            </div>
            <div class="modal-body" id="modalHistoryBody">History</div>

        </div>
    </div>
</div>
@Html.Partial("~/Views/Shared/_PromotWorkflow.cshtml")

<script>
    var history_link = "@Url.Action("History", "BusinessProcess", new { Area = "WorkflowManager", id = "0" })";

    function promot_workflow(BusinessProcessID, nextstate, actionname, PlanID) {
        //alert(PaymentRequestID);
        $('#ParentBusinessProcessID').val(BusinessProcessID);
        $('#stateID').val(nextstate);
        $('#modalPromotionLabel').html(actionname);
        $('#modalPromotion').modal();
    }
    function workflow_history(BusinessProcessID) {
        $('#modalHistory').modal();
        $('#modalHistoryBody').html("<div style='text-align:center;'> <img src='/content/images/loading.gif'/></div>");
        $.post(history_link + BusinessProcessID, {},
            function (data) {
                $("#modalHistoryBody").html(data);
            }
        );
    }


    var tblbody;

    $("#pop").popover({
        placement: 'right', //placement of the popover. also can use top, bottom, left or     right
        html: 'true', //needed to show html of course
        content: get(this),// hope this should be link
        trigger: 'hover'
    });

    function get(t) {

        $.ajax({
            async:false,
            type: "POST",
            url: "@Url.Action("RationDetail", "Ration")",
            data: "{id:'@Model.RationID'}",
            dataType: "json",
            contentType: "application/json; charset=utf-8",

            success: function (data) {
                tblbody = "<table style='margin: 0px;' class='table table-striped table-condensed'>";
                for (var i = 0; i < data.length; i++) {
                    //tblbody += "<table>";
                    tblbody += "<tr>";
                    tblbody += "<td>" + data[i].Name + "</td>";
                    tblbody += "<td align='right'>" + data[i].Amount + "</td>";
                    tblbody += "</tr>";
                }
                tblbody += "</table>";

            },

        });
        return tblbody;
    };

    function onDataBound(e) {

        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("change", "td", function (e) {
            //var Ration = 5;
            var row = $(this).closest("tr");
            var rowIdx = $("tr", grid.tbody).index(row);
            var firstItem = $('#grid').data().kendoGrid.dataSource.data()[rowIdx];
            var BenficiaryNo = firstItem.get('BenficiaryNo');
            var RationAmount = firstItem.get('RationAmount');
            firstItem.set('Amount', RationAmount * BenficiaryNo);
            //firstItem.set('Contingency', (RationAmount * BenficiaryNo)* 0.05);
        });
    }

    function onGridKeydown(e) {
        if (e.keyCode === kendo.keys.TAB) {
            var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
            var current = grid.current();
            if (!current.hasClass("editable-cell")) {
                var nextCell = current.nextAll(".editable-cell");
                if (!nextCell[0]) {
                    //search the next row
                    var nextRow = current.parent().next();
                    var nextCell = current.parent().next().children(".editable-cell:first");
                }
                grid.current(nextCell);
                grid.editCell(nextCell[0]);
            }
        }
    };

    function onBound(e) {

        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("focus", "input", function (e) {
            var input = $(this);
            setTimeout(function () { input.select(); }, 100);

        });
    }
</script>
<script type="text/javascript">
    $(function () {
        $('.btn-Approve-allocation').click(function (e) {
            //$('#cats-modal').remove();
            $("body").css("cursor", "wait");
            e.preventDefault();
            var $this = $(this), $remote = $this.data('remote') || $this.attr('href');
              //, $modal = $('<div class="modal" id="cats-modal"><div class="modal-body"></div></div>');

            //$('body').append($modal);
            //$modal.modal({ backdrop: 'static', keyboard: false });
            //$modal.load($remote);

            $('#dialogContent').load($remote, function () {
                $('#dialogDiv').modal({
                    backdrop: 'static',
                    keyboard: false
                }, 'show');
                //bindForm(this);
                $(".modal-dialog").removeClass("modal-sm").addClass("modal-lg");
            });
            $("body").css("cursor", "default");
            return false;
        });
    });

</script>
<script>
    $(function () {
        var requistionId = @Model.RequisitionID;


        var printurl = "@Url.Action("Print", "BeneficiaryAllocation", new { area = "Logistics" })" +"/"+requistionId;
        $("#toolbar_button_print").attr("href", printurl);
    });
</script>
