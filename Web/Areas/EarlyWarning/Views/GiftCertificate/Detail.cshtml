@model Cats.Areas.GiftCertificate.Models.GiftCertificateViewModel
@using Cats.Areas.EarlyWarning.Models
@using Cats.Areas.GiftCertificate.Models
@using Cats.Helpers
@using Cats.Models
@using Cats.Security
@using Kendo.Mvc.UI
@using LanguageHelpers.Localization
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    ViewBag.PageTitle = Html.Translate("Detail Gift Certificate");
    ViewBag.PageTitleDescription = "";
    ViewBag.IsInEditMode = true;
}

@section Toolbar{
    <a class="btn btn-fit-height grey-salt" data-buttontype="btn_cancel" href="@Url.Action("Index", "GiftCertificate")"><span class="fa fa-list"></span> @Html.Translate("Back to List")</a>
}

<div class="row">
    <div class="col-md-12">

        @using (Html.BeginForm("Edit", "GiftCertificate", FormMethod.Post, new { id = "frm_edit_gift", @class = "form-horizontal" }))
        {
            <div class="portlet light bordered bg-inverse">
                <div class="portlet-title">
                    <div class="caption font-green-sharp">
                        <i class="icon-list font-green-sharp"></i>
                        <span class="caption-subject bold uppercase"> @Html.Translate("Gift Certificate Header")</span>
                    </div>
                    <div class="tools">
                        <a href="#" class="collapse" data-original-title="" title=""></a>
                    </div>
                    <div class="actions">
                        <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;"></a>
                    </div>
                </div>
                <div class="portlet-body row" id="giftheader">
                    @Html.ValidationSummary(true)

                    @Html.HiddenFor(model => model.GiftCertificateID)
                    @Html.HiddenFor(model => model.rowCount)

                    <div class="col-md-6 col-sm-6 form-horizontal">
                        <div class="form-group">
                            @Html.LabelFor(model => model.GiftDate, Html.Translate("Gift Date"), new { @class = "col-sm-4 control-label cats-date-pref" })
                            <div class="col-sm-8">

                                @Html.TextBoxFor(model => model.GiftDate, new { @class = " form-control cats-datepicker2" })
                                @Html.ValidationMessageFor(model => model.GiftDate)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DModeOfTransport, Html.Translate("Mode Of transport"), new { @class = "col-sm-4 control-label" })
                            <div class="col-sm-8">
                                @Html.DropDownList("DModeOfTransport", null, String.Empty, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DModeOfTransport)
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.ProgramID, Html.Translate("Program"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">

                                @Html.DropDownList("ProgramID", null, String.Empty, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProgramID)
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.DonorID, Html.Translate("Donor"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">

                                @Html.DropDownList("DonorID", null, String.Empty, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DonorID)
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.DeclarationNumber, Html.Translate("Declaration Number"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">

                                @Html.TextBoxFor(model => model.DeclarationNumber, new { @class = " form-control" })

                                @Html.ValidationMessageFor(model => model.DeclarationNumber)

                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.CommodityTypeID, Html.Translate("Commodity Type"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">

                                @Html.DropDownList("CommodityTypeID", null, String.Empty, new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.CommodityTypeID)

                            </div>
                        </div>

                    </div>
                    <div class="col-md-6 col-sm-6 form-horizontal">
                        <div class="form-group">

                            @Html.LabelFor(model => model.SINumber, Html.Translate("SI/Batch Number"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">
                                @Html.TextBoxFor(model => model.SINumber, new { @class = " form-control" })
                                @Html.ValidationMessageFor(model => model.SINumber)
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.PortName, Html.Translate("Port Name"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">
                                @Html.TextBoxFor(model => model.PortName, new { @class = " form-control" })
                                @Html.ValidationMessageFor(model => model.PortName)
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.ReferenceNo, Html.Translate("Reference Number"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">
                                @Html.TextBoxFor(model => model.ReferenceNo, new { @class = " form-control" })
                                @Html.ValidationMessageFor(model => model.ReferenceNo)
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(model => model.Vessel, Html.Translate("Vessel"), new { @class = "col-sm-4 control-label" })

                            <div class="col-sm-8">
                                @Html.TextBoxFor(model => model.Vessel, new { @class = " form-control" })
                                @Html.ValidationMessageFor(model => model.Vessel)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="control-label">
                                @Html.LabelFor(model => model.ETA, Html.Translate("ETA"), new { @class = "col-sm-4 control-label cats-date-pref" })
                            </div>

                            <div class="col-sm-8">
                                @Html.TextBoxFor(model => model.ETA, new { @class = "form-control cats-datepicker2" })
                                @Html.ValidationMessageFor(model => model.ETA)
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        }
    </div>
    <div class="col-md-12">
        <div class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption font-green-sharp">
                    <i class="icon-list font-green-sharp"></i>
                    <span class="caption-subject bold uppercase"> @Html.Translate("Commodity")</span>
                </div>
                <div class="tools">
                    <a href="#" class="collapse" data-original-title="" title=""></a>
                </div>
                <div class="actions">
                    @if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Edit_Gift_Certificate))
                    {
                        <a id="save_button" class="btn green btn-sm"  data-buttontype="btn_save" href="javascript:saverecords()"><span class="fa fa-save"></span> @Html.Translate("Save")</a>
                    }
                    <a class="btn red btn-sm" data-buttontype="btn_cancel" href="@Url.Action("Index", "GiftCertificate")"><span class="fa fa-lg fa-times-circle"></span> @Html.Translate("Cancel")</a>
                    <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;"></a>
                </div>
            </div>
            <div class="portlet-body row">

                <div class="table-responsive box-body">
                    @(Html.Kendo().Grid<GiftCertificateDetailsViewModel>()
           .Name("Grid")
            .ToolBar(commands =>
            {
                if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Add_Gift_Certificate_Detail))
                {
                    commands.Create();
                }
            })
           .Editable(editing => editing.Mode(GridEditMode.InLine))
           .Columns(columns =>
           {
               columns.AutoGenerate(false);
               columns.ForeignKey(o => o.CommodityID, (IEnumerable<Commodity>)ViewData["Commodities"], "CommodityID", "Name").Title(Html.Translate("Commodity"))
                   .Filterable(true);
               columns.Bound(o => o.BillOfLoading).Title(@Html.Translate("Bill of Loading"));

               columns.Bound(o => o.YearPurchased).Title(@Html.Translate("Year Purchased")).HtmlAttributes(new { align = "right" });//.HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });

               columns.Bound(o => o.AccountNumber).Title(@Html.Translate("Acc. No")).HtmlAttributes(new { align = "right" });
               columns.Bound(o => o.WeightInMT).Title(Html.Translate("Sent Qty (MT)")).HtmlAttributes(new { align = "right" }).Format("{0:N3}");
               columns.Bound(o => o.EstimatedPrice).Title(@Html.Translate("Est. Price")).HtmlAttributes(new { align = "right" }).Format("{0:N2}");
               columns.Bound(o => o.EstimatedTax).Title(Html.Translate("Est. Tax")).HtmlAttributes(new { align = "right" }).Format("{0:N2}");

               columns.ForeignKey(o => o.DCurrencyID, (System.Collections.IEnumerable)ViewData["DCurrencies"], "DetailID", "Name").Title(Html.Translate("Currency"))
                   .Filterable(true);
               columns.ForeignKey(o => o.DFundSourceID, (System.Collections.IEnumerable)ViewData["DFundSources"], "DetailID", "Name").Title(Html.Translate("Fund Source"))
                   .Filterable(true);
               columns.ForeignKey(o => o.DBudgetTypeID, (System.Collections.IEnumerable)ViewData["DBudgetTypes"], "DetailID", "Name").Title(Html.Translate("Fund Type"))
                   .Filterable(true);
               columns.Bound(o => o.ExpiryDate).Title(Html.Translate("Expiry Date")).Format("{0:dd/MM/yyyy}");
               columns.Command(commands => commands.Destroy().HtmlAttributes(new { align = "center" })).Title(Html.Translate("Action")).Width((80));
               columns.Command(commands => commands.Edit()).Title(@Html.Translate("Est. Price")).Width((170));
           })

           .DataSource(binding => binding.Ajax()
                                       .Read(read => read.Action("GiftCertificateDetail_Read", "GiftCertificate", new { id = Model.GiftCertificateID }))
                                       .Create(create =>
                                       {
                                           if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.New_Gift_Certificate))
                                           {
                                               create.Action("GiftCertificateDetail_Create", "GiftCertificate", new { id = Model.GiftCertificateID });
                                           }
                                       })
                                       .Update(update =>
                                       {
                                           if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Edit_Gift_Certificate))
                                           {
                                               update.Action("GiftCertificateDetail_Update", "GiftCertificate");
                                           }
                                       })
                                       .Destroy(destroy =>
                                       {
                                           if (UserAccountHelper.EarlyWarningPsnpOperationCheck(EarlyWarningConstants.Operation.Delete_Gift_Certificate))
                                           {
                                               destroy.Action("GiftCertificateDetail_Destroy", "GiftCertificate");
                                           }
                                       })
                                       .Model(m =>
                                       {
                                           m.Id(t => t.GiftCertificateDetailID);
                                           m.Field(t => t.CommodityID).DefaultValue(-1);

                                       }).ServerOperation(true)

        //                              .Batch(true)
        //.ServerOperation(false)
        ).Events(e => e.DataBound("onDataBound"))
           .Navigatable().Scrollable().HtmlAttributes(new { style = "width:100%;" })
                    )

                </div>

            </div>
        </div>

        </div>
    </div>

@Html.ValidationMessageFor(model => model.rowCount)

<script type="text/javascript">

    $('#giftheader').find('input, textarea, button, select').attr('disabled', 'disabled');

    function onDataBound(e) {
        console.log('on data baound');
        $(".table-responsive .k-button").removeClass("k-button").addClass("btn btn-xs mrgn3-b col-md-12");
        $(".k-grid-delete").addClass("btn-danger");
        $(".table-responsive .k-grid-delete")
            .find('span.k-icon.k-delete')
            .removeClass("k-icon")
            .removeClass("k-delete")
            .addClass("fa fa-times")
            .css({"margin-right":"5px"});

    }
    function saverecords() {
        var url = '@Url.Action("Index", "GiftCertificate")';
        //$("#save_button").attr('href', url);
        $("#Grid").data("kendoGrid").saveChanges();
        document.location.href = url;
    }

</script>

