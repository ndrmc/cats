@using Cats.Helpers
@using Cats.Models.Constant
@using Cats.Security
@using Kendo.Mvc.UI
@model  List<Cats.Models.Bid>

@{
    ViewBag.Title = "Create Bid";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    //Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.PageTitle = Html.Translate("List of ") + ViewBag.BidTitle + Html.Translate(" Bids");
    ViewBag.PageTitleDescription = "";
}



@*@section Toolbar
{
<div class="pull-right tooltips" data-placement="bottom" data-original-title="Create New Bid">
    <a data-buttontype="btn_new_record" class="btn btn-fit-height grey-salt toolbar-btn" href="@Url.Action("Create", "Bid")"><i class="fa fa-plus-circle"></i> @Html.Translate("Create New Bid")</a>
</div>
}*@
@section LeftBar
{
    @Html.Partial("_BidLeftBar")
}
<div class="portlet light bordered" style="display: block;">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-list font-green-sharp"></i>
            <span class="caption-subject bold uppercase"> @Html.Translate("List of Bids")</span>
            <span class="caption-helper">  </span>
        </div>
        <div class="tools">
            <a href="#" class="collapse" data-original-title="" title=""></a>
            <a href="javascript:;" class="remove" data-original-title="" title=""></a>
        </div>
        <div class="actions">
            @if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Create_new_bid))
            {
                <a class="btn btn-circle btn-default btn-sm green-stripe" data-buttontype="btn_new_record" href="@Url.Action("Create", "Bid")"><i class="fa fa-plus-circle"></i> @Html.Translate("Create New Bid")</a>
            }
            <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
        </div>
    </div>
    <div class="portlet-body">

        @(Html.Kendo().Grid<Cats.Models.ViewModels.Bid.BidViewModel>()
              .Name("Bid")
              .Columns(columns =>
              {
                columns.Bound(p => p.BidNumber).Template(

                    @<text>
                        @if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Edit_bid))
                        {
                            <a href="@Url.Action("Edit", "Bid", new {Area = "Procurement", id = item.BidID})">@Html.DisplayFor(modelItem => item.BidNumber)</a>
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.BidNumber)
                        }
                     </text>);
                  columns.Bound(p => p.StartDatePref).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });
                  columns.Bound(p => p.EndDatePref).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });
                  columns.Bound(p => p.OpeningDatePref).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });
                  columns.Bound(p => p.BidBondAmount).Title("Bid Bond Amount").Format("{0:N2}").HtmlAttributes(new { align = "Right" });
                  columns.Bound(p => p.Status).Title("Status");
                  columns.Command(p =>
                  {

                      if (ViewBag.BidStatus == (int)BidStatus.Open || ViewBag.BidStatus == 0)
                      {
                          if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Edit_bid))
                          {
                              p.Custom("Edit").Click("bidEdit");
                          }
                          if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Approve_bid))
                          {
                              p.Custom("Approve").Click("onApprove");
                          }
                      }
                      if (ViewBag.BidStatus == (int)BidStatus.Approved)
                      {
                          if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Active_bid))
                          {
                              p.Custom("Active").Click("onActive");
                          }
                      }
                      if (ViewBag.BidStatus == (int)BidStatus.Active)
                      {
                          if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Close_bid))
                          {
                              p.Custom("Close Bid").Click("onClose");
                          }
                      }

                  });

              })
                                      .HtmlAttributes(new { style = "height:430px;" })
                                      .Scrollable()
                                      .Filterable()
                                      .ClientDetailTemplateId("template")
                                      //.HtmlAttributes(new { style = "height:430px;" })
                                      .Editable(editable =>
                                      {
                                          if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Edit_bid))
                                          {
                                              editable.Mode(GridEditMode.PopUp);
                                          }
                                      })
                                      .Navigatable()
                                      .DataSource(dataSource => dataSource
                                          .Ajax()
                                          .Model(model => model.Id(p => p.BidID))
                                          .Read(read => read.Action("Bid_Read", "Bid", new { id = ViewBag.BidStatus }))

                                      )
                                      .Events(events => events.DataBound("dataBound"))
        )

    </div>
</div>

<script id="template" type="text/kendo-tmpl">

    @(Html.Kendo().Grid<Cats.Models.ViewModels.Bid.BidDetailViewModel>()
                        .Name("bid_#=BidID#")
                        .Columns(columns =>
                        {
                            //columns.Bound(b => b.BidDetailID).Title("ID").Width(56);
                            columns.Bound(b => b.Region).Width(120).HtmlAttributes(new { style = "background-color:lightgray" });
                            columns.Bound(b => b.AmountForReliefProgram).Width(50).Title("Relief");
                            columns.Bound(b => b.AmountForPSNPProgram).Width(50).Title("PSNP");
                            columns.Bound(b => b.Total).Width(50);
                            columns.Bound(b => b.BidDocumentPrice).Width(80);
                            columns.Bound(b => b.CPO).Width(80);

                        })
                        .ToolBar(toolBar =>
                        {
                            if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Bid_detail_update))
                            {
                                toolBar.Save();
                            }
                        })
                        .Editable(editable =>
                        {
                            if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Bid_detail_update))
                            {
                                editable.Mode(GridEditMode.InCell);
                            }
                        })
                        .Events(events => events.DataBound("onDataBound"))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Events(events => events.Error("error_handler"))
                             .Events(events => events.Change("onGridKeydown"))
                            .Model(model =>
                            {
                                model.Id(p => p.BidDetailID);
                                model.Field(p => p.RegionID);
                                model.Field(p => p.BidDetailID).Editable(false);
                                model.Field(p => p.Region).Editable(false);
                                if (ViewBag.BidStatus == (int)BidStatus.Closed)
                                {
                                    model.Field(p => p.AmountForPSNPProgram).Editable(false);
                                    model.Field(p => p.AmountForReliefProgram).Editable(false);
                                    model.Field(p => p.CPO).Editable(false);
                                    model.Field(p => p.BidDocumentPrice).Editable(false);
                                }
                            })
                            .Read(read => read.Action("BidDetail_Read", "Bid", new { bidID = "#=BidID#" }))
                            .Update(update =>
                            {
                                if (UserAccountHelper.ProcurementOperationCheck(ProcurementConstants.Operation.Bid_detail_update))
                                {
                                    update.Action("BidDetail_Update", "Bid");
                                }
                            })

                        )
                         .HtmlAttributes(new { style = "height:110px;" })
                        .Scrollable()
                        .Sortable()
                        .ToClientTemplate())

</script>

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function bidEdit(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = "@Url.Action("EditBidStatus", "Bid")" + "/" + dataItem.BidID;

    }
    function onActive(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = "@Url.Action("MakeActive", "Bid")" + "/" + dataItem.BidID;
    }
    function onClose(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = "@Url.Action("CloseBid", "Bid")" + "/" + dataItem.BidID;
    }
    function onApprove(e) {
        e.preventDefault();
        var grid = this;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var row = $(e.currentTarget).closest("tr");
        wnd.center().open();

        $("#yes").click(function () {

            window.location = "@Url.Action("ApproveBid", "Bid")" + "/" + dataItem.BidID;
            wnd.close();
        });

        $("#no").click(function () {
            wnd.close();
        });
        //var agree = confirm("Are you sure you want to approve this bid?");
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //if (agree)
        //    window.location = "bid/ApproveBid/" + dataItem.BidID;
    }
</script>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function onGridKeydown(e) {
        if (e.keyCode === kendo.keys.TAB) {
            var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
            var current = grid.current();
            if (!current.hasClass("editable-cell")) {
                var nextCell = current.nextAll(".editable-cell");
                if (!nextCell[0]) {
                    //search the next row
                    var nextRow = current.parent().next();
                    var nextCell = current.parent().next().children(".editable-cell:first");
                }
                grid.current(nextCell);
                grid.editCell(nextCell[0]);
            }
        }
    };

    function onDataBound(e) {

        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("focus", "input", function(e) {
            var input = $(this);
            setTimeout(function() { input.select(); }, 100);

        });
    }
</script>

<div id="modalWindow">
    <h4>Approve Bid?</h4>
    <button id="yes" class="k-button">Yes</button>
    <button id="no" class="k-button">No</button>
</div>
<script>
    var wnd;
    $(document).ready(function () {
        wnd = $("#modalWindow").kendoWindow({
            title: "Approve confirmation",
            modal: true,
            visible: false,
            resizable: false,
            width: 300
        }).data("kendoWindow");
    });
</script>
