@model Cats.Models.Hubs.DispatchViewModel

@using Cats.Web.Hub.Helpers
@using Kendo.Mvc.UI
@using Telerik.Web.Mvc.UI
@using GridEditMode = Kendo.Mvc.UI.GridEditMode
@{
    ViewBag.Title = Html.Translate("New/Edit Dispatch");

    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    //Layout = "~/Views/Shared/_MainLayoutWide.cshtml";
    ViewBag.PageTitle = Html.Translate("New/Edit Dispatch");
    ViewBag.PageTitleDescription = "";
}
<style type="text/css">
    .help-block {
        color: red;
    }</style>
@using (Html.BeginForm("CreateDispatch","Dispatch",FormMethod.Post,new {id="frmCreate", @class="form-horizontal"}))
{
    @Html.HiddenFor(model=>model.DispatchAllocationID)
    @Html.HiddenFor(model=>model.ProgramID)
    @Html.HiddenFor(model=>model.HubID)
    @Html.HiddenFor(model=>model.FDPID)
    @Html.HiddenFor(model=>model.TransporterID)
   // @Html.HiddenFor(model=>model.UnitID)
   @Html.HiddenFor(model=>model.DispatchID) 
   @Html.HiddenFor(model=>model.UserProfileID)
    @Html.HiddenFor(model => model.SINumber)
     @Html.HiddenFor(model => model.Region)
    @Html.HiddenFor(model => model.Woreda)
     @Html.HiddenFor(model => model.ProjectNumber)
     @Html.HiddenFor(model => model.Zone)
     @Html.HiddenFor(model => model.FDP)
     @Html.HiddenFor(model => model.Commodity)
     @Html.HiddenFor(model => model.RequisitionNo)
     @Html.HiddenFor(model => model.RequisitionId)
     @Html.HiddenFor(model => model.Year)
     @Html.HiddenFor(model => model.Month)
    @Html.HiddenFor(model => model.Round)
     @Html.HiddenFor(model => model.Transporter)
      @Html.HiddenFor(model => model.BidNumber)
    @Html.HiddenFor(model=>model.CommodityID)
<div class="portlet light bordered">
    <div class="portlet-title">
        <div class="caption font-green-sharp">
            <i class="fa fa-credit-card font-green-sharp"></i>
            <span id="bar-title" class="caption-subject bold uppercase"> Dispatch Details</span>
            <span class="caption-helper">  </span>
        </div>
        <div class="tools">
            <a href="#" class="collapse" data-original-title="" title=""></a>
        </div>
        <div class="actions">
            <a class="btn toolbar-btn green " data-buttontype="btn_save" data-submittedform="frmCreate"><i class="fa fa-save"></i> Save</a>
            <a class="btn toolbar-btn red" data-buttontype="btn_cancel" href="@Url.Action("Index", "Dispatch")"><i class="fa fa-times-circle"></i> Cancel</a>

            <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
        </div>
    </div>
<div class="portlet-body">
    <h4>Dispatch Header</h4>
<div class="row">

    <div class="col-md-4">
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.GIN)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.GIN, new {@class = "form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.GIN)</span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.DispatchDate)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.DispatchDate, new {@class = "cats-datepicker2 form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.DispatchDate)</span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.DispatchedByStoreMan)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.DispatchedByStoreMan, new {@class = "form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.DispatchedByStoreMan)</span>
            </div>
        </div>

    </div>
    <div class="col-md-4">
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.SINumber)
            </div>
            <div class="col-md-8">
                @(Html.Kendo().ComboBoxFor(m => m.ShippingInstructionID)
                      .Placeholder("Select SI Number")
                      .DataTextField("SIcode")
                      .DataValueField("siCodeId").HtmlAttributes(new {@class = "form-control"})
                      .Filter(FilterType.Contains)
                      .DataSource(source => source.Read(read => read.Action("AvailableSI", "Dispatch",
                          new {@reqDetailId = ViewBag.RequisitionDetailID, @siID = Model.ShippingInstructionID, @ComID = Model.CommodityID, @DaID = Model.DispatchAllocationID}))))
                <span class="help-block">@Html.ValidationMessageFor(model => model.ShippingInstructionID)</span>
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Region)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Region, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Woreda)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Woreda, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.ProjectNumber)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.ProjectNumber, new {Disabled = true, @class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Zone)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Zone, new {Disabled = true, @class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.FDP)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.FDP, new {Disabled = true, @class = "form-control"})
            </div>
        </div>

    </div>
</div>
<hr/>
    <h4>Dispatch Quantity</h4>
<div class="row">
    <div class="col-md-4">
        <div class="form-group ">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Commodity)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Commodity, new {Disabled = true, @class = "form-control"})
            </div>
        </div>


        <div class="form-group ">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.CommodityChildID)
            </div>
            <div class="col-md-8">
                @(Html.Kendo().ComboBoxFor(m => m.CommodityChildID)
                      .Placeholder("Select Commodity")
                      .DataTextField("CommodityName")
                      .DataValueField("CommodityId").HtmlAttributes(new {@class = "form-control"})
                      .Filter(FilterType.Contains)
                      .DataSource(source => source.Read(read => read.Action("GetCommodities", "Dispatch", new {@dispatchAllocationId = Model.DispatchAllocationID}))))
                <span class="help-block">@Html.ValidationMessageFor(model => model.CommodityChildID)</span>
            </div>
        </div>


        <div class="form-group ">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.UnitID)
            </div>
            <div class="col-md-8">
                @(Html.Kendo().ComboBoxFor(m => m.UnitID)
                      .Placeholder("Select Unit")
                      .DataTextField("Name")
                      .DataValueField("UnitId")
                      .Filter(FilterType.Contains).HtmlAttributes(new {@class = "form-control"})
                      .DataSource(source => source.Read(read => read.Action("GetUnities", "Dispatch")))
                      )
                <span class="help-block">@Html.ValidationMessageFor(model => model.UnitID)</span>

            </div>
        </div>
        <div class="form-group ">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.QuantityInUnit)
            </div>
            <div class="col-md-8">
                @if (!string.IsNullOrEmpty(Model.DispatchID.ToString()))
                {
                    @Html.TextBoxFor(model => model.QuantityInUnit, new {@class = "form-control"})
                }
                else
                {
                    @Html.TextBoxFor(model => model.QuantityInUnit, new {@class = "form-control"})
                }

            </div>
        </div>
        <div class="form-group ">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.QuantityPerUnit, "Quantity in Qtl")
            </div>
            <div class="col-md-8">
                @if (!string.IsNullOrEmpty(Model.DispatchID.ToString()))
                {
                    @Html.TextBoxFor(model => model.QuantityPerUnit, new {@class = "form-control"})
                }
                else
                {
                    @Html.TextBoxFor(model => model.QuantityPerUnit, new {@id = "txtQtl", @onchange = "onchangeevent();", @class = "form-control"})
                }
            </div>
        </div>
        <div class="form-group ">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Quantity, "Quantity in MT")
            </div>
            <div class="col-md-8">
                @if (!string.IsNullOrEmpty(Model.DispatchID.ToString()))
                {
                    @Html.TextBoxFor(model => model.Quantity, new {@class = "form-control"})
                }
                else
                {
                    @Html.TextBoxFor(model => model.Quantity, new {@readonly = "readonly", @class = "form-control"})
                }
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.RequisitionNo)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.RequisitionNo, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Year)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Year, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
    </div>
    <div class="col-md-4">

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Month)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Month, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Round)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Round, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
    </div>

</div>
<hr/>
    <h4>Transporter Details</h4>
<div class="row ">
    
    <div class="col-md-6">

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Transporter)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Transporter, new {Disabled = true, @class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.DriverName)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.DriverName, new {@class = "form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.DriverName)</span>
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.PlateNo_Prime)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.PlateNo_Prime, new {@class = "form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.PlateNo_Prime)</span>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.Remark)
            </div>
            <div class="col-md-8">
                @Html.TextAreaFor(model => model.Remark, new {@class = "form-control"})
            </div>
        </div>

    </div>
    <div class="col-md-6">
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.BidNumber)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.BidNumber, new {Disabled = true, @class = "form-control"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.WeighBridgeTicketNumber)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.WeighBridgeTicketNumber, new {@class = "form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.WeighBridgeTicketNumber)</span>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4 control-label">
                @Html.LabelFor(model => model.PlateNo_Trailer)
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.PlateNo_Trailer, new {@class = "form-control"})
                <span class="help-block">@Html.ValidationMessageFor(model => model.PlateNo_Trailer)</span>
            </div>

        </div>

    </div>

</div>

</div>
</div>

}
<script>

    jQuery('#txtQtl').on('input', function () {
        var amountEntered = $('#txtQtl').val();
        var amountPlanned = "@ViewBag.plannedAmount";
        var recivedAmount = "@ViewBag.recivedAmount";
        var remainngAmount = amountPlanned - recivedAmount;
        if ((amountEntered / 10) > remainngAmount) {
            alert("Dispatch amount must be less than the remaing Amount amount [ " + (remainngAmount * 10) + " Qtl ]!");
            $('#txtQtl').val(0);
            $('#Quantity').val(0);
        }

        if ($('#txtQtl').val() > 410) {


            var response = window.confirm('Quintal value can not be greater than 410! : Continue?');

            if (response) {
                $('#Quantity').val($('#txtQtl').val() / 10);
            }
            else {

                $('#txtQtl').val(0);
                $('#Quantity').val(0);
            }

        }
        $('#Quantity').val($('#txtQtl').val() / 10);

    });
    $('.change_si_no').on('click',
                function (e) {
                    $('#cats-modal').remove();
                    e.preventDefault();
                    var $this = $(this)
                      , $remote = $this.data('remote') || $this.attr('href')
                      , $modal = $('<div class="modal" id="cats-modal"><div class="modal-body"></div></div>');
                    console.log($remote);
                    $('body').append($modal);
                    $modal.modal({ backdrop: 'static', keyboard: false });
                    $modal.load($remote);
                }
              );
    function OnComOpen(e) {
        var combo = $('#CommodityID').data('tComboBox');
        var comboType = $('#CommodityTypeID').data('tComboBox').value();
        if (combo) {
            var siText = $('#SINumber');
            if (siText) { // && $(siText).val() != '') {

                var params = {};
                params["SINumber"] = $(siText).val();
                params["commodityTypeId"] = comboType;
                params["dispatchAllocationID"] = $('#dispatchAllocationID').val();
                params["CommoditySourceID"] = $('#CommoditySourceID').val();
                $.getJSON('@Url.Action("AvailbaleCommodities", "Dispatch")', params, function (comodities) {
                    combo.dataBind(comodities);
                });
            }
        }
    }

</script>
@*<script type="text/javascript">
   
    function CalculateQuantityMT() {
       
        var unit = $('#UnitID').val();
        var quantityInUnit = $('#QuantityInUnit').val();
        if (unit == 8) {
            var quantity = quantityInUnit / 1000;
            $('#Quantity').val(quantity);
        }
        if (unit == 9) {
            var total = quantityInUnit / 100;
            $('#Quantity').val(total);
        }
        
    };

    function CalculateQuantityQTL() {

        var unit = $('#UnitID').val();
        var quantityInUnit = $('#QuantityInUnit').val();
        if (unit == 8) {
            var quantity = quantityInUnit / 100;
            $('#Quantity').val(quantity);
        }
        if (unit == 9) {
            var total = quantityInUnit;
            $('#Quantity').val(total);
        }

    };

   
    $(document).ready(function() {
        var unitPreference = '@ViewBag.UnitPreference';
        $('#UnitID').change(function () {
            if (unitPreference = 'MT') {
                CalculateQuantityMT();
            }
            if (unitPreference = 'QTL') {
                alert("here");
                CalculateQuantityQTL();
            }
            

        });
    });
    $(document).ready(function () {
        var unitPreference = '@ViewBag.UnitPreference';
        alert(unitPreference);
        $('#QuantityInUnit').change(function () {
            if (unitPreference ='MT') {
                
                    CalculateQuantityMT();
                }
            if (unitPreference = 'QTL') {
                alert("here");
                CalculateQuantityQTL();
                }

        });
    });
</script>*@