@using System.Collections
@using Cats.Helpers
@using Cats.Models.Hubs.ViewModels
@using Kendo.Mvc.UI
@model dynamic

@{
    ViewBag.Title = "Receive";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    ViewBag.PageTitle = Html.Translate("Add Additional Commodities");
    string quanityColumnHeader = "MT";
}

<div class="form-horizontal row-fluid">
    <div class="portlet light bordered bg-inverse">
        <div class="portlet-title">
            <div class="caption font-green-sharp"><i class="fa fa-list font-green-sharp"></i> @Html.Translate("Commodities Detail")</div>
            <div class="tools"><a href="#" class="collapse" data-original-title="" title=""></a></div>
            <div class="actions">
                <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
            </div>
        </div>
        <div class="portlet-body">
            @(Html.Kendo().Grid<ReceiveDetailsViewModel>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        columns.ForeignKey(p => p.CommodityId, (IEnumerable<Cats.Models.Hubs.CommodityModel>)ViewBag.Commodities, "Id", "Name").EditorTemplateName("CommodityEditor").Width(150).Title(Html.Translate("Commodity"));
                        //columns.ForeignKey(p => p.SiNumber, (IEnumerable<Cats.Models.Hubs.ViewModels.ShippingInstructionModel>)ViewBag.SI, "Id", "Value").EditorTemplateName("SIEditor").Width(150).Title(Html.Translate("SI Number"));
                        columns.Bound(p => p.Description).Width(100);
                        columns.ForeignKey(p => p.UnitId, (IEnumerable<Cats.Models.Hubs.UnitModel>)ViewBag.Units, "Id", "Name").EditorTemplateName("UnitEditor").Width(150);
                        //columns.ForeignKey(p => p.UnitId, Model.Units, "UnitID", "Name").Title(Html.Translate("Units"));
                        //columns.Bound(p => p.CommodityId).Title(Html.Translate("Commodity ID")).Width(150);
                        columns.Bound(p => p.SentQuantityInUnit).Width(100);
                        columns.Bound(p => p.SentQuantityInMt).Width(100);
                        columns.Bound(p => p.ReceivedQuantityInUnit).Width(100);
                        columns.Bound(p => p.ReceivedQuantityInMt).Width(100);
                        columns.Bound(p => p.ReceiveDetailsId).Width(100).Hidden(true);
                        //columns.Bound(p => p.ReceiveDetailsId).ClientTemplate("<input name = 'ReceiveDetailsId' value='<#= ReceiveDetailsId #>'/>").Width(100);//.Hidden(true);
                        //columns.Command(command => { command.Edit(); command.Destroy(); });
                    })
                            .ToolBar(toolbar => { toolbar.Create();
                                                    toolbar.Save();
                            })
                            .Editable(editable => editable.Mode(Kendo.Mvc.UI.GridEditMode.InCell))
                    .Pageable()
                    .Sortable()
                    .Scrollable()
                    .HtmlAttributes(new { style = "height:430px;" })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(20)
                        .Events(events => events.Error("error_handler"))
                        .Model(model => model.Id(p => p.ReceiveDetailsId))
                                               .Create(update => update.Action("CreateCommoditiesFromReceive", "ReceiveNew", new {@ViewBag.receiveId }))
                                    .Read(read => read.Action("ReadCommoditiesFromReceive", "ReceiveNew", new {@ViewBag.receiveId }))
                                            .Update(update => update.Action("CreateCommoditiesFromReceive", "ReceiveNew", new { @ViewBag.receiveId }))
                    //.Destroy(update => update.Action("ReceiveDetails_Destroy", "ReceiveNew"))
                    )
            )
            <script type="text/javascript">
                function error_handler(e) {
                    if (e.errors) {
                        var message = "Errors:\n";
                        $.each(e.errors, function (key, value) {
                            if ('errors' in value) {
                                $.each(value.errors, function () {
                                    message += this + "\n";
                                });
                            }
                        });
                        alert(message);
                    }
                }
            </script>
        </div>
    </div>
</div>

