@using System.Collections
@using Cats.Helpers
@using Cats.Models.Hubs
@using Cats.Models.Hubs.ViewModels
@using Kendo.Mvc.UI
@using NUnit.Framework
@using GridButtonType = Telerik.Web.Mvc.UI.GridButtonType
@using GridEditMode = Telerik.Web.Mvc.UI.GridEditMode

@model Cats.Models.Hubs.ViewModels.ReceiveNewViewModel

@{
    //Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = "Receive";
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    ViewBag.PageTitle = Html.Translate("Receive");
    string quanityColumnHeader = "MT";
}

@section Toolbar
{
    @*<a class="btn toolbar-btn " data-buttontype="btn_save" data-submittedform="frm_receive"></a>
        <a class="btn toolbar-btn " data-buttontype="btn_cancel" href="#" title="Cancel"></a>*@
    <a data-buttontype="btn_save" id="SubmitButton" data-submittedform ="frm_receive" class="btn btn-fit-height grey-salt toolbar-btn"><i class="fa fa-save"></i> @Html.Translate("Save")</a>

    <a class="btn grey-salt " href='@Url.Action("index", "Receive" )' data-buttontype="btn_cancel"><i class="fa fa-times-circle"></i> @Html.Translate("Back to list")</a>

}


@using (Html.BeginForm("Create", "ReceiveNew", FormMethod.Post, new { id = "frm_receive", @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true)
    @Html.ValidationMessageFor(m => m.ReceiveId)
    @Html.HiddenFor(model => model.ReceiveId)
    @Html.HiddenFor(model => model.ReceiptAllocationId)
    @Html.HiddenFor(model => model.CommoditySourceTypeId)
    @Html.HiddenFor(model => model.CurrentHub)
    @Html.HiddenFor(model => model.ProgramId)
    @Html.HiddenFor(model => model.CommodityTypeId)
    @Html.HiddenFor(model => model.UserProfileId)
    @Html.HiddenFor(model => model.ReceiveDetailNewViewModel.ReceiveId)
    @Html.HiddenFor(model => model.ReceiveDetailNewViewModel.CommodityId)
    @Html.HiddenFor(m => m.IsFalseGRN)

    <div class="form-horizontal row-fluid">
        <div class="portlet light bordered bg-inverse">
            <div class="portlet-title">
                <div class="caption font-green-sharp"><i class="fa fa-list font-green-sharp"></i> @Html.Translate("Receive")</div>
                <div class="tools"><a href="#" class="collapse" data-original-title="" title=""></a></div>
                <div class="actions">
                    <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
                </div>
            </div>
            <div class="portlet-body">
                <div class="row">
                    <div class="col-md-5">
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.Grn)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.Grn, new { @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.Grn)</span>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.CommoditySource)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.CommoditySource, new { @readonly = "readonly", @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.CommoditySource)</span>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.SiNumber)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.SiNumber, new { @readonly = "readonly", @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.SiNumber)</span>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.Program)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.Program, new { @readonly = "readonly", @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.Program)</span>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.CommodityType)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.CommodityType, new { @readonly = "readonly", @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.CommodityType)</span>
                            </div>
                        </div>

                        @if (CommoditySource.Constants.LOCALPURCHASE == Model.CommoditySourceTypeId)
                        {
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.PurchaseOrder)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(model => model.PurchaseOrder, new { @class = "form-control" })
                                    <span class="help-block">@Html.ValidationMessageFor(model => model.PurchaseOrder)</span>
                                </div>
                            </div>
                        }

                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.StoreId)</div>
                            <div class="col-md-8">
                                @(Html.Kendo().ComboBoxFor(m => m.StoreId)
                                      .Placeholder("Select store")
                                      .DataTextField("Name")
                                      .DataValueField("StoreId")
                                        .Filter(FilterType.Contains)
                                        .HtmlAttributes(new { @class = "form-control" })
                                      .DataSource(source => source.Read(read => read.Action("GetStroes", "ReceiveNew", new { @hubId = Model.CurrentHub }))))
                                <span class="help-block">@Html.ValidationMessageFor(model => model.StoreId)</span>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ReceivedByStoreMan)</div>
                            <div class="col-md-8">
                                @Html.TextAreaFor(model => model.ReceivedByStoreMan)
                                <span class="help-block">@Html.ValidationMessageFor(model => model.ReceivedByStoreMan)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ReceiptDate, new { @class = "cats-date-pref" })</div>
                            <div class="col-md-8">
                                @if (!Model.EditbleDateGap)
                                {
                                    @Html.TextBoxFor(model => model.ReceiptDate, new { @class = "cats-datepicker2 form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.ReceiptDate, new { @readonly = true, @class = "form-control cats-datepicker2" })

                                }
                                <span class="help-block">@Html.ValidationMessageFor(model => model.ReceiptDate)</span>
                            </div>
                        </div>
                        @if (CommoditySource.Constants.LOAN == Model.CommoditySourceTypeId
|| CommoditySource.Constants.SWAP == Model.CommoditySourceTypeId
|| CommoditySource.Constants.TRANSFER == Model.CommoditySourceTypeId
|| CommoditySource.Constants.REPAYMENT == Model.CommoditySourceTypeId)
                        {
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.SourceHub)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(model => model.SourceHub, new { @readonly = "readonly", @class = "form-control" })
                                    <span class="help-block">@Html.ValidationMessageFor(model => model.SourceHub)</span>
                                </div>
                            </div>
                        }

                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ProjectCode)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.ProjectCode, new { @readonly = "readonly", @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.ProjectCode)</span>
                            </div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.WayBillNo)</div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.WayBillNo, new { @class = "form-control" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model.WayBillNo)</span>
                            </div>
                        </div>

                        @if (CommoditySource.Constants.LOCALPURCHASE == Model.CommoditySourceTypeId)
                        {
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.SupplierName)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(model => model.SupplierName, new { @class = "form-control" })
                                    <span class="help-block">@Html.ValidationMessageFor(model => model.SupplierName)</span>
                                </div>
                            </div>
                        }

                        <div class="form-group col-md-12">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.StackNumber)</div>
                            <div class="col-md-8">
                                @(Html.Kendo().ComboBox()
                                  .Name("StackNumber")
                                  .Placeholder("Select stack")
                                  .DataTextField("Name")
                                  .DataValueField("Id")
                                  .Filter(FilterType.Contains)
                                .HtmlAttributes(new { @class = "form-control" })
                                  .DataSource(source => source.Read(read => read.Action("GetStacks", "ReceiveNew").Data("filterStacks"))
                                      .ServerFiltering(true))
                                  .Enable(false)
                                  .AutoBind(false)
                                  .CascadeFrom("StoreId"))
                                <span class="help-block">@Html.ValidationMessageFor(model => model.StackNumber)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 note note-success">
                        <p>Allocated InMT: <span class="text-success">@Model.AllocationStatusViewModel.TotalAllocation</span></p>
                        <p>Receive so far: <span class="text-success">@Model.AllocationStatusViewModel.ReceivedAllocation</span></p>
                        <p>Remaining: <span class="text-success">@Model.AllocationStatusViewModel.RemainingAllocation</span></p>
                    </div>
                </div>

            </div>
        </div>
    </div>

    @*<div class="form-horizontal row-fluid">
            <div class="portlet light bordered bg-inverse">
                <div class="portlet-title">
                    <div class="caption font-green-sharp"><i class="fa fa-list font-green-sharp"></i> @Html.Translate("Receive Details")</div>
                    <div class="tools"><a href="#" class="collapse" data-original-title="" title=""></a></div>
                    <div class="actions">
                        <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
                    </div>
                </div>
                <div class="portlet-body">
                    @(Html.Kendo().Grid(new List<ReceiveDetailsViewModel>())
                        .Name("grid")
                        .Columns(columns =>
                        {
                            //columns.ForeignKey(p => p.CommodityId, Model.Commodities, "CommodityID", "Name").Width(150).Title(Html.Translate("Commodity Name"));
                            columns.Bound(p => p.CommodityId).Width(150).Title(Html.Translate("Commodity Name"));
                            columns.Bound(p => p.Description).Width(100);
                            //columns.ForeignKey(p => p.UnitId, Model.Units, "UnitID", "Name").Title(Html.Translate("Units"));
                            columns.Bound(p => p.UnitId).Title(Html.Translate("Units")).Width(150);
                            columns.Bound(p => p.SentQuantityInUnit).Width(100);
                            columns.Bound(p => p.SentQuantityInMt).Width(100);
                            columns.Bound(p => p.ReceivedQuantityInUnit).Width(100);
                            columns.Bound(p => p.ReceivedQuantityInMt).Width(100);
                            columns.Bound(p => p.ReceiveDetailsIdString).Width(100);//.Hidden(true);
                            //columns.Bound(p => p.ReceiveDetailsId).ClientTemplate("<input name = 'ReceiveDetailsId' value='<#= ReceiveDetailsId #>'/>").Width(100);//.Hidden(true);
                            //columns.Command(command => { command.Edit(); command.Destroy(); });
                        })
                        .ToolBar(toolbar => toolbar.Create())
                        //.Editable(editable => editable.Mode(Kendo.Mvc.UI.GridEditMode.InLine))
                        .Pageable()
                        .Sortable()
                        .Scrollable()
                        .HtmlAttributes(new { style = "height:430px;" })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            .Events(events => events.Error("error_handler"))
                            .Model(model => model.Id(p => p.ReceiveDetailsIdString))
                            .Create(update => update.Action("Create", "ReceiveNew"))//, new { @ReceiveId =  Model.ReceiveId }))
                            //.Read(read => read.Action("ReadCommoditiesFromReceive", "ReceiveNew"))
                    //.Update(update => update.Action("ReceiveDetails_Update", "ReceiveNew"))
                            //.Destroy(update => update.Action("ReceiveDetails_Destroy", "ReceiveNew"))
                        )
                    )
                    <script type="text/javascript">
                        function error_handler(e) {
                            if (e.errors) {
                                var message = "Errors:\n";
                                $.each(e.errors, function (key, value) {
                                    if ('errors' in value) {
                                        $.each(value.errors, function () {
                                            message += this + "\n";
                                        });
                                    }
                                });
                                alert(message);
                            }
                        }
                    </script>
                </div>
            </div>
        </div>*@

    <div class="form-horizontal row-fluid">
        <div class="portlet light bordered bg-inverse">
            <div class="portlet-title">
                <div class="caption font-green-sharp"><i class="fa fa-list font-green-sharp"></i> @Html.Translate("Commodity Details")</div>
                <div class="tools">
                    <a href="#" class="collapse" data-original-title="" title=""></a>
                </div>
                @*<div class="actions">
                        <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>

                        @if (ViewBag.isEditMode == true)
                        {
                            <a class="btn btn-default green-haze-stripe" href="@Url.Action("Commodities", "ReceiveNew", new { @receiptAllocationId = Model.ReceiptAllocationId, @grn = Model.Grn, @receiveId = Model.ReceiveId })" title="Commodities">Add New Commodities</a>
                        }

                    </div>*@
            </div>
            <div class="portlet-body">
                @*<div class="row">
                        <div class="col-md-4" style="vertical-align: top">
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(model => model.ReceiveDetailNewViewModel.CommodityChildID)
                                </div>
                                <div class="col-md-8">

                                    @(Html.Kendo().ComboBoxFor(m => m.ReceiveDetailNewViewModel.CommodityChildID)
                                          .Placeholder("Select Commodity")
                                          .DataTextField("CommodityName")
                                          .DataValueField("CommodityId")
                                          .Filter(FilterType.Contains).HtmlAttributes(new { @class = "form-control" })
                                          .Enable(false)
                                          .DataSource(source => source.Read(read => read.Action("GetCommodities", "ReceiveNew", new { @receiptAllocationId = Model.ReceiptAllocationId }))))

                                    <span class="help-block">
                                        @Html.ValidationMessageFor(model => model.ReceiveDetailNewViewModel.CommodityChildID)
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-12 form-group ">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(model => model.ReceiveDetailNewViewModel.UnitId)
                                </div>
                                <div class="col-md-8">
                                    @(Html.Kendo().DropDownListFor(m => m.ReceiveDetailNewViewModel.UnitId)

                                          .DataTextField("Name")
                                          .DataValueField("UnitId")
                                          .HtmlAttributes(new { @class = "form-control" })
                                          .DataSource(source => source.Read(read => read.Action("GetUnities", "ReceiveNew")))
                                    )
                                    <span class="help-block">
                                        @Html.ValidationMessageFor(model => model.ReceiveDetailNewViewModel.UnitId)
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-12 form-group">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(m => m.ReceiveDetailNewViewModel.SentQuantityInUnit)
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.ReceiveDetailNewViewModel.SentQuantityInUnit)
                                    <span class="help-block">@Html.ValidationMessageFor(m => m.ReceiveDetailNewViewModel.SentQuantityInUnit)</span>
                                </div>
                            </div>
                            <div class="col-md-12 form-group">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(m => m.ReceiveDetailNewViewModel.SentQuantityInMt)
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.ReceiveDetailNewViewModel.SentQuantityInMt)
                                    <span class="help-block">@Html.ValidationMessageFor(m => m.ReceiveDetailNewViewModel.SentQuantityInMt)</span>
                                </div>
                            </div>

                        </div>
                        <div class="col-md-4" style="vertical-align: top">
                            <div class="col-md-12 form-group">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(m => m.ReceiveDetailNewViewModel.Description)
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(m => m.ReceiveDetailNewViewModel.Description)
                                    <span class="help-block">@Html.ValidationMessageFor(m => m.ReceiveDetailNewViewModel.Description)</span>
                                </div>
                            </div>
                            <div class="col-md-12 form-group">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(m => m.ReceiveDetailNewViewModel.ReceivedQuantityInUnit)
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.ReceiveDetailNewViewModel.ReceivedQuantityInUnit)
                                    <span class="help-block">@Html.ValidationMessageFor(m => m.ReceiveDetailNewViewModel.ReceivedQuantityInUnit)</span>
                                </div>
                            </div>
                            <div class="col-md-12 form-group">
                                <div class="col-md-4 control-label">
                                    @Html.LabelFor(m => m.ReceiveDetailNewViewModel.ReceivedQuantityInMt)
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.ReceiveDetailNewViewModel.ReceivedQuantityInMt)
                                    <span class="help-block">@Html.ValidationMessageFor(m => m.ReceiveDetailNewViewModel.ReceivedQuantityInMt)</span>
                                </div>
                            </div>

                        </div>

                        <div class="col-md-4" style="vertical-align: top">

                        </div>
                    </div>*@

                <div class="form-horizontal row-fluid">
                    <div class="portlet light bordered bg-inverse">

                        <div class="portlet-body">
                            @(Html.Kendo().Grid<ReceiveDetailsViewModel>(Model.ReceiveDetailsViewModels)
                    .Name("grid")
                    .Columns(columns =>
                    {
                        //columns.ForeignKey(p => p.CommodityId, (IEnumerable<Cats.Models.Hubs.CommodityModel>) ViewBag.Commodities, "Id", "Name").EditorTemplateName("CommodityEditor").Width(150).Title(Html.Translate("Commodity"))
                        //.ClientTemplate(
                        // "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].CommodityId' value='#=CommodityId#' />");
                        columns.ForeignKey(p => p.CommodityId, (IEnumerable<Cats.Models.Hubs.CommodityModel>)ViewBag.Commodities, "Id", "Name").EditorTemplateName("CommodityEditor").Width(150).Title(Html.Translate("Commodity"));
                        columns.Bound(p => p.CommodityId).Hidden().EditorTemplateName("CommodityEditor").Width(150).Title(Html.Translate("Commodity"))
                        .ClientTemplate("#= CommodityId #" +
                        "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].CommodityId' value='#=CommodityId#' />");

                        //columns.ForeignKey(p => p.SiNumber, (IEnumerable<Cats.Models.Hubs.ViewModels.ShippingInstructionModel>)ViewBag.SI, "Id", "Value").EditorTemplateName("SIEditor").Width(150).Title(Html.Translate("SI Number"));
                        columns.ForeignKey(p => p.CommodityChildID, (IEnumerable<Cats.Models.Hubs.SubCommodity>)ViewBag.SubCommodities, "Id", "Name").EditorTemplateName("CommodityChildEditor").Width(150).Title(Html.Translate("Sub Commodity"));
                        columns.Bound(p => p.CommodityChildID).Hidden().EditorTemplateName("CommodityChildEditor").Width(150).Title(Html.Translate("Commodity"))
                       .ClientTemplate("#= CommodityChildID #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].CommodityChildID' value='#=CommodityChildID#' />");
                        //columns.ForeignKey(p => p.CommodityId, (IEnumerable<Cats.Models.Hubs.CommodityModel>)ViewBag.SubCommodities, "Id", "Name").EditorTemplateName("SubCommoditiesEditor").Width(150).Title(Html.Translate("Commodity"));
                        // columns.Bound(p => p.CommodityChildID).Width(100);
                        columns.Bound(p => p.Description).Width(100).ClientTemplate("#= Description #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].Description' value='#= Description #' />");
                        columns.ForeignKey(p => p.UnitId, (IEnumerable<Cats.Models.Hubs.UnitModel>)ViewBag.Units, "Id", "Name").EditorTemplateName("UnitEditor").Width(80);
                        columns.Bound(p => p.UnitId).Hidden().EditorTemplateName("UnitEditor").Width(150).Title(Html.Translate("UnitId"))
                        .ClientTemplate("#= UnitId #" +
                        "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].UnitId' value='#=UnitId#' />");


                        columns.Bound(p => p.SentQuantityInUnit).Width(100).ClientTemplate("#= SentQuantityInUnit #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].SentQuantityInUnit' value='#= SentQuantityInUnit #' />"); ;
                        columns.Bound(p => p.SentQuantityInMt).Width(100).ClientTemplate("#= SentQuantityInMt #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].SentQuantityInMt' value='#= SentQuantityInMt #' />");

                        columns.Bound(p => p.ReceivedQuantityInUnit).Width(100).ClientTemplate("#= ReceivedQuantityInUnit #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].ReceivedQuantityInUnit' value='#= ReceivedQuantityInUnit #' />");
                        //columns.Bound(p => p.ReceivedQuantityInMt).Width(100);
                        columns.Bound(p => p.ReceivedQuantityInMt).Width(100).ClientTemplate("#= ReceivedQuantityInMt #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].ReceivedQuantityInMt' value='#= ReceivedQuantityInMt #' />");

                        //columns.Bound(p => p.ReceiveDetailsId).Width(100).Hidden(true);
                        columns.Bound(p => p.ReceiveDetailsId).ClientTemplate("#= ReceiveDetailsId #" +
                       "<input type='hidden' name='ReceiveDetailsViewModels[#= index(data)#].ReceiveDetailsId' value='#= ReceiveDetailsId #' />").Hidden(true);
                        //columns.Command(command => { command.Edit(); command.Destroy(); });
                    })
                            .ToolBar(toolbar =>
                            {
                                toolbar.Create();

                            })
                            .Editable(editable => editable.Mode(Kendo.Mvc.UI.GridEditMode.InCell))
                    .Pageable()
                    .Selectable()
                    .Sortable()
                           .Events(x => x.Edit("onEdit"))
                    .Events(e => e.Change("onChange"))
                    .Scrollable()
                    //.Events(e=>e.Edit("OnEdit"))
                    .HtmlAttributes(new { style = "height:430px;" })
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(20)
                                .Events(events => events.Error("error_handler"))
                                .Model(model =>
                                {
                                    model.Id(p => p.ReceiveDetailsId);
                                    //model.Field(p => p.CommodityId).Editable(
                                    //    false);
                                    //model.Field(p => p.CommodityChildID).Editable(false);
                                    //model.Field(p => p.Description).Editable(false);
                                    //model.Field(p => p.UnitId).Editable(false);
                                    //model.Field(p => p.SentQuantityInUnit).Editable(false);
                                    //model.Field(p => p.SentQuantityInMt).Editable(false);
                                    //model.Field(p => p.ReceivedQuantityInUnit).Editable(false);
                                    //model.Field(p => p.ReceivedQuantityInMt).Editable(false);
                                }).ServerOperation(false)
                                .Model(model => model.Id(p => p.ReceiveDetailsId))
                                                       .Create(update => update.Action("CreateCommoditiesFromReceive", "ReceiveNew", new { @Model.ReceiveId }))
                                                    // .Read(read => read.Action("ReadCommoditiesFromReceive", "ReceiveNew", new { @Model.ReceiveId }))
                                                    .Update(update => update.Action("CreateCommoditiesFromReceive", "ReceiveNew", new { @Model.ReceiveId })).ServerOperation(false)
                            //.Destroy(update => update.Action("ReceiveDetails_Destroy", "ReceiveNew"))
                            )
                            )
                            <script type="text/javascript">
                                function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                                        $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                                                $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
                                }
                                function gridonDataBound(arg) {
                                    console.log("Grid data bound");
                                }
        function filterTemplate() {
            var id;
            var grid = $("#grid").data("kendoGrid");

            var ddl = $('#CommodityId');


            var selectedItem = grid.dataItem(grid.select().closest("tr"));
            //alert(model.text);

            return {
                CommodityId: selectedItem.CommodityId
                                    };
        }

        function index(dataItem) {

            var data = $("#grid").data("kendoGrid").dataSource.data();
            return data.indexOf(dataItem);
        }
                            </script>

                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
    if (Model.IsTransporterDetailVisible)
        {
        <div class="form-horizontal row-fluid">
            <div class="portlet light bordered bg-inverse">
                <div class="portlet-title">
                    <div class="caption font-green-sharp"><i class="fa fa-list font-green-sharp"></i> @Html.Translate("Transportation Details")</div>
                    <div class="tools"><a href="#" class="collapse" data-original-title="" title=""></a></div>
                    <div class="actions">
                        <a class="btn btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title=""></a>
                    </div>
                </div>
                <div class="portlet-body">
                    <div class="row">
                        <div class="col-md-6">
                            @if (CommoditySource.Constants.LOAN != Model.CommoditySourceTypeId)
{
                                <div class="form-group col-md-12">
                                    <div class="col-md-4 control-label">@Html.LabelFor(model => model.ResponsibleDonorId)</div>
                                    <div class="col-md-8">
                                        @(Html.Kendo().ComboBoxFor(m => m.ResponsibleDonorId)
                                              .Name("ResponsibleDonorId")
                                              .Placeholder("--Select Responsible Donor--")
                                              .DataTextField("Name")
                                              .DataValueField("DonorId")
                                              .Filter(FilterType.Contains)
                                              .HtmlAttributes(new { @class = "form-control" })
                                              .DataSource(source => source.Read(read => read.Action("GetResponsibleDonor", "ReceiveNew"))
                                              )
                                        )
                                        <span class="help-block"> @Html.ValidationMessageFor(model => model.ResponsibleDonorId)</span>
                                    </div>
                                </div>
                                <div class="form-group col-md-12">
                                    <div class="col-md-4 control-label">@Html.LabelFor(model => model.SourceDonorId)</div>
                                    <div class="col-md-8">
                                        <span class="help-block"> @Html.ValidationMessageFor(model => model.SourceDonorId)</span>
                                        @(Html.Kendo().ComboBoxFor(s => s.SourceDonorId)
                                              .Name("SourceDonorId")
                                              .Placeholder("--Select Source Donor--")
                                              .DataTextField("Name")
                                              .DataValueField("DonorId")
                                              .Filter(FilterType.Contains)
                                              .HtmlAttributes(new { @class = "form-control" })
                                              .DataSource(source => source.Read(read => read.Action("GetSourceDonor", "ReceiveNew")
                                              )
                                      )
                                        )
                                        <span class="help-block"> @Html.ValidationMessageFor(model => model.SourceDonorId)</span>

                                    </div>
                                </div>
                            }

                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.WeightBridgeTicketNumber)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.WeightBridgeTicketNumber, new { @class = "form-control" })
                                    <span class="help-block"> @Html.ValidationMessageFor(m => m.WeightBridgeTicketNumber)</span>
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.WeightBeforeUnloading)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.WeightBeforeUnloading, new { @class = "form-control" })
                                    <span class="help-block"> @Html.ValidationMessageFor(m => m.WeightBeforeUnloading)</span>
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.WeightAfterUnloading)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.WeightAfterUnloading, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.WeightAfterUnloading)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.TransporterId)</div>
                                <div class="col-md-8">
                                    @(Html.Kendo().ComboBoxFor(m => m.TransporterId)
                                       .Name("TransporterID")
                                       .Placeholder("--Select Transporter--")
                                       .DataTextField("Name")
                                       .DataValueField("TransporterId")
                                       .Filter(FilterType.Contains)
                                       .HtmlAttributes(new { @class = "form-control" })
                                       .DataSource(source => source.Read(read => read.Action("GetTransporter", "ReceiveNew")
                                    )
                                       )

                                    )
                                    <span class="help-block">@Html.ValidationMessageFor(model => model.TransporterId)</span>

                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.PlateNoPrime)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.PlateNoPrime, new { @class = "form-control" })
                                    <span class="help-block"> @Html.ValidationMessageFor(m => m.PlateNoPrime)</span>
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.PortName)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.PortName, new { @class = "form-control" })
                                    <span class="help-block"> @Html.ValidationMessageFor(m => m.PortName)</span>
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.Remark)</div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(m => m.Remark, new { @class = "form-control" })
                                    <span class="help-block"> @Html.ValidationMessageFor(m => m.Remark)</span>
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.DriverName)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.DriverName, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="col-md-4 control-label">@Html.LabelFor(model => model.PlateNoTrailer)</div>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(m => m.PlateNoTrailer, new { @class = "form-control" })
                                    <span class="help-block"> @Html.ValidationMessageFor(m => m.PlateNoTrailer)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

}

<script>

    $(document).ready(function () {
        $("#ReceiveDetailNewViewModel_SentQuantityInUnit").on('input', function () {

            // alert("why ?");
            var mesarement = $('#ReceiveDetailNewViewModel_UnitId').val();
            var sentValue = $('#ReceiveDetailNewViewModel_SentQuantityInUnit').val();

            if (mesarement === '1') {

                $('#ReceiveDetailNewViewModel_SentQuantityInMt').val((sentValue * (1 / 20)).toFixed(2));
            } else if (mesarement === '8') {
                $('#ReceiveDetailNewViewModel_SentQuantityInMt').val((sentValue * (1 / 1000)).toFixed(2));
            } else if (mesarement === '9') {
                $('#ReceiveDetailNewViewModel_SentQuantityInMt').val((sentValue * (1 / 10)).toFixed(2));
            }
        });
    });
    $(document).ready(function () {
        $("#ReceiveDetailNewViewModel_ReceivedQuantityInUnit").on('input', function () {
            // alert("why ?");
            var mesarement = $('#ReceiveDetailNewViewModel_UnitId').val();
            var sentValue = $('#ReceiveDetailNewViewModel_ReceivedQuantityInUnit').val();

            if (mesarement === '1') {
                //alert(sentValue);
                $('#ReceiveDetailNewViewModel_ReceivedQuantityInMt').val((sentValue * (1 / 20)).toFixed(2));
            } else if (mesarement === '8') {
                $('#ReceiveDetailNewViewModel_ReceivedQuantityInMt').val((sentValue * (1 / 1000)).toFixed(2));
            } else if (mesarement === '9') {
                $('#ReceiveDetailNewViewModel_ReceivedQuantityInMt').val((sentValue * (1 / 10)).toFixed(2));
            }
        });
    });


    //#region Grid Unit Converter

    $(document).ready(function () {

        $("#grid").on("keydown", function (e) {

            var grid = $("#grid").data("kendoGrid");
            if (changedColumn >= 7) {
                changeIndicator = true; //to apply unit conversion

            }

        });

    });

    var changeIndicator = false;
    var changedColumn = -1;
    var editedValue = -1;
    var selectedRowModel = null;


    function onUnitChange(e) {
        try {
            convertMeasuringUnit(selectedRowModel, changedColumn);
        } catch (err)
        { }
    }

    function onChange(arg) {

        if (changeIndicator) {
            convertMeasuringUnit(selectedRowModel, changedColumn);
            changeIndicator = false;

        }

    }

    function onEdit(e) {


        changedColumn = e.container[0].cellIndex;
        selectedRowModel = e.model;
        var selectedIndex = e.sender._data.indexOf(e.model);
    }

    function convertMeasuringUnit(model, changedColumn) {
        var result = 0;
        if (model == null) return;

        if (changedColumn == 5)//Unit of measurment is changed
        {
            //change  sent and received in unit
            result = converter(model.UnitId, model.SentQuantityInUnit);
            if (result == -1) result = model.SentQuantityInMt;
            model.SentQuantityInMt = result;

            result = converter(model.UnitId, model.ReceivedQuantityInUnit);
            if (result == -1) result = model.ReceivedQuantityInMt;
            model.ReceivedQuantityInMt = result;


        }
        else if (changedColumn == 8)//SentQuantityInMt is changed
        {
            result = converterReverse(model.UnitId, model.SentQuantityInMt);
            if (result == -1) result = model.SentQuantityInUnit;
            model.SentQuantityInUnit = result;

        }
        else if (changedColumn == 7)//SentQuantityInUnit is changed
        {
            result = converter(model.UnitId, model.SentQuantityInUnit);
            if (result == -1) result = model.SentQuantityInMt;
            model.SentQuantityInMt = result;

        }
        else if (changedColumn == 10)//ReceivedQuantityInMt is changed
        {
            result = converterReverse(model.UnitId, model.ReceivedQuantityInMt);
            if (result == -1) result = model.ReceivedQuantityInUnit;
            model.ReceivedQuantityInUnit = result;

        }
        else if (changedColumn == 9)//ReceivedQuantityInUnit is changed
        {
            result = converter(model.UnitId, model.ReceivedQuantityInUnit);
            if (result == -1) result = model.ReceivedQuantityInMt;
            model.ReceivedQuantityInMt = result;


        }
        $("#grid").data("kendoGrid").refresh();

    }
    //if in UNIT value is changed
    function converter(type, value) {

        if (type == '1') {
            return (value * (1 / 20)).toFixed(2);

        }
        else if (type == '8') {
            return (value * (1 / 1000)).toFixed(2);

        }
        else if (type == '9') {
            return (value * (1 / 10)).toFixed(2);

        }

        return -1;

    }
    //if in MT value is changed

    function converterReverse(type, value) {

        if (type == '1') {
            return (value * (20)).toFixed(2);

        }
        else if (type == '8') {
            return (value * (1000)).toFixed(2);

        }
        else if (type == '9') {
            return (value * (10)).toFixed(2);

        }

        return -1;

    }

    //#endregion Grid Unit Converter

    //function index(dataItem) {
    //    var data = $("#ReceiveDetailGrid").data("kendoGrid").dataSource.data();
    //    return data.indexOf(dataItem);
    //}

    function filterStacks() { return { storeId: $("#StoreId").val() }; }

    function filterGRN() { return { siNo: $("#SiNumber").val() }; }

    kendo.data.DataSource.prototype.GetUnsavedData = function () {
        var that = this, idx, length, created = [], updated = [], destroyed = that._destroyed, allRows = [], data = that._flatData(that._data);

        for (idx = 0, length = data.length; idx < length; idx++) {
            if (data[idx].isNew()) {
                created.push(data[idx]);
            } else if (data[idx].dirty) {
                updated.push(data[idx]);
            }
        }

        allRows = created.concat(updated).concat(destroyed);
        var allRowsJson = JSON.stringify(allRows);
        return allRowsJson;
    }

    function makeKendoDirty() {
        var grid = $("#grid").data("kendoGrid");
        var kdata = grid.dataSource.data();
        for (var i = 0; i < kdata.length; i++) {
            kdata[i].dirty = true;


            var rci = kendo.toString(receiveCommodityId.value);
            kdata[i].CommodityId = rci == null ? receiveCommodityId.value : rci;

        }
        return true;
    }

    //$(function () {

    //    $("#SubmitButton").click(function () {

    //            //makeKendoDirty();
    //            $(this).button('loading');
    //            $("#frm_receive").submit();


    //    });
    //});
</script>
