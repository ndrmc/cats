@using Cats.Models.Hubs
@using Cats.Models.Hubs.ViewModels
@using Cats.Web.Hub.Helpers
@using Kendo.Mvc.UI
@using Cats.Security
@{
    ViewBag.Title = Html.Translate("Receipt Allocations");
}

<style>
    .action-link {
        display: none;
    }

    .assign-code3 {
        display: block;
    }

    .k-grid td {
        overflow: visible;
    }
</style>

@{
    int allocationType = ViewBag.CommoditySourceType;
    string quanityColumnHeader = "MT";
    decimal toqt = 1;


    if (@Html.GetCurrentUser().PreferedWeightMeasurment == "QTL")
    {
        quanityColumnHeader = "QTL";
        toqt = 10;
    }
    

}
@(Html.Kendo().Grid<ReceiptAllocationViewModel>()
    .Name("ReceiveAllocationGrid" + allocationType)
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:300px;" })
    .ClientDetailTemplateId("template_receive")
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model => model.Id(p => p.ReceiptAllocationID))
        .Read(read => read.Action("AllocationListAjax", "Receive", new { type = allocationType, grn = Request.QueryString["FilterGRN"] }))
        .Destroy(update => update.Action("DeleteAjax", "Receive"))

        ).Events(events => events.DataBound("dataBound"))
    .Columns(columns =>
    {
        columns.Bound(dis => dis.CommodityName).Title(Html.Translate("Commodity")).Filterable(true);
        columns.Bound(dis => dis.SINumber).Title(Html.Translate("SINumber")).Filterable(true);
        columns.Bound(dis => dis.ProjectNumber).Title(Html.Translate("Project Code")).Filterable(true);
        //columns.Bound(dis => dis.QuantityInMT).Title(Html.Translate("Allocated In " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" }).Encoded(false).ClientTemplate("#=adjustuom(QuantityInMT)#");
        columns.Bound(dis => dis.QuantityInMTFormatted).Title(Html.Translate("Allocated In " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" });
        //columns.Bound(dis => dis.ReceivedQuantityInMT).Title(Html.Translate("Received in " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" }).Encoded(false).ClientTemplate("#=adjustuom(ReceivedQuantityInMT)#");
        columns.Bound(dis => dis.ReceivedQuantityInMTFormatted).Title(Html.Translate("Received in " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" });
        columns.Bound(dis => dis.RemainingBalanceInMT).ClientTemplate(
    "# if (RemainingBalanceInMT < 0) { #" +
            "#: RemainingBalanceInMT * -1 #" + "  <span style='font-weight: bold;'>  (over received) </span>" +
            "# } else { #" +
            "#: RemainingBalanceInMT #" +
            "# } #"
            );
        //columns.Bound(dis => dis.RemainingBalanceInMT).Visible(false).Title(Html.Translate("Remaining in " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" }).Encoded(false).ClientTemplate("#=adjustuom(RemainingBalanceInMT)#");
        if (Cats.Helpers.UserAccountHelper.HubOperationCheck(HubConstants.Operation.New_receipt_from_donation))
        {
            columns.Bound(dis => dis.ReceiptAllocationID).Title("").ClientTemplate("<a href='" +
                                                                                   @Url.Action("Create", "ReceiveNew", new { @ReceiptAllocationID = "#=ReceiptAllocationID#", @type = allocationType }) +
                                                                                   "'>Recieve  </a> &nbsp; " +
                                                                                   "<a  class='close_#=IsClosed#' href='javascript:ClosePlanByID(\"#=ReceiptAllocationID#\"," + allocationType + ")'>Close</a>"
                );
        }

        columns.Template(
            @<text>
               
                <div class='btn-group'>
                    <button type='button' id='workflow-#=RequisitionId#' class='btn btn-default dropdown-toggle btn-xs green-stripe' data-toggle='dropdown'>
                        <i class='fa fa-ellipsis-horizontal'>
                        </i>Workflow<i class='fa fa-angle-down'></i>
                    </button>

                    <ul class='dropdown-menu pull-right' style='overflow: visible;'>

                        <li class="divider"></li>
                        <li class='edit_button'>
                            <a href="javascript:workflow_history(@item.BusinessProcessID)"> History </a>
                        </li>
                    </ul>
                </div>
            </text>
                              ).Title(@Html.Translate("Action")).Width("200px");
    })

)

<script id="template_receive" type="text/kendo-tmpl">
    
    @(Html.Kendo().Grid<ReceiveViewModelDto>()
        .Name("Receives_#=ReceiptAllocationID#")
        .Columns(columns =>
        {
            columns.Bound(d => d.ReceiptDatePref).HeaderHtmlAttributes(new {@class = "cats-date-pref-grid"});
            columns.Bound(d => d.GRN).ClientTemplate("<a href='" + @Url.Action("Create", "ReceiveNew", new { @receiptAllocationId = "\\#=ReceiveID\\#", @GRN = "\\#=GRN\\#" }) + "'>\\#:GRN\\#</a> &nbsp; ");
            columns.Bound(b => b.ReceivedByStoreMan);
        })
        .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .Read(read => read.Action("ReceiveListAjax", "Receive", new { ReceiptAllocationID = "#=ReceiptAllocationID#", grn = Request.QueryString["FilterGRN"] }))

            )
    .HtmlAttributes(new { style = "max-height:250px;" })
    .Scrollable()
    .Sortable()
    .ClientDetailTemplateId("template_receive_detail")
    .ToClientTemplate())
                
</script>

<script id="template_receive_detail" type="text/kendo-tmpl">
    
                    @(Html.Kendo().Grid<ReceiveDetailViewModelDto>()
                         .Name("ReceiveDetails_#=ReceiveID#")
                        .Columns(columns =>
                        {
                            columns.Bound(com => com.CommodityName).Title(Html.Translate("Commodity"));
                            columns.Bound(com => com.UnitName).Title(Html.Translate("Unit"));
                            columns.Bound(com => com.SentQuantityInUnitFormatted).Title(Html.Translate("Sent Qty (Unit)")).HtmlAttributes(new { align = "right" });
                            columns.Bound(com => com.ReceivedQuantityInUnitFormatted).Title("Received Qty (Unit)").HtmlAttributes(new { align = "right"});
                            //columns.Bound(com => com.SentQuantityInMT).Title(Html.Translate("Sent Qty " + quanityColumnHeader)).HtmlAttributes(new { align = "right", @class = "cats_amt_in_uom" }).Encoded(false).ClientTemplate("#=adjustuom(SentQuantityInMT)#");
                            columns.Bound(com => com.SentQuantityInMTFormatted).Title(Html.Translate("Sent Qty " + quanityColumnHeader)).HtmlAttributes(new {align = "right", @class = "cats_amt_in_uom"});
                            //columns.Bound(com => com.ReceivedQuantityInMT).Title(Html.Translate("Received Qty " + quanityColumnHeader)).HtmlAttributes(new { align = "right", @class = "cats_amt_in_uom" }).Encoded(false).ClientTemplate("#=adjustuom(ReceivedQuantityInMT)#");
                            columns.Bound(com => com.ReceivedQuantityInMTFormatted).Title(Html.Translate("Received Qty " + quanityColumnHeader)).HtmlAttributes(new {align = "right", @class = "cats_amt_in_uom"});

                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(false)
                            .Read(read => read.Action("ReceiveDetailAjax", "Receive", new { ReceiveID = "#=ReceiveID#" }))

                        )
                         .HtmlAttributes(new { style = "max-height:250px;" })
                        .Scrollable()
                        .Sortable()
                        .ToClientTemplate())
                
</script>
<script>
    
    function numberWithCommas(x) {
        var parts = x.toFixed(3).toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }
   
    // end of function CurrencyFormatted()



    function adjustuom(amt) {

        
        if ('@quanityColumnHeader' == "QTL")


            return numberWithCommas(amt*10);
        else {
            return numberWithCommas(amt);

        }
    }
    
    function grnInfo() {return { grn : document.getElementById('FilterGRN').value }}

    function dataBound() {
        if (document.getElementById('FilterGRN').value !== "") this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function workflow_history(BusinessProcessID) {
        $('#modalHistory').modal();
        $('#modalHistoryBody').html("<div style='text-align:center;'> <img src='/content/images/loading.gif'/></div>");
        $.post(history_link + BusinessProcessID, {},
            function (data) {
                $("#modalHistoryBody").html(data);
            }
        );
    }
</script>