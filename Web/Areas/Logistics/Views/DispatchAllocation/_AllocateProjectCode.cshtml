@model List<int?>
@using Kendo.Mvc.UI
@using Cats.Helpers
@using Cats.Security
@{

    var gridid = Guid.NewGuid().ToString();
}
<style>
    .action-link {
        display: none;
    }

    .assign-code3 {
        display: block;
    }
</style>


@(Html.Kendo().Grid<Cats.Models.RequisitionViewModel>()
    .Name("ProjectCodegrid" + gridid)
    .Columns(columns =>
    {
        columns.Bound(e => e.RequisitionNo).Width(120).Title(@Html.Translate("Requisition No")).Filterable(false);
        columns.Bound(e => e.Program).Width(120).Title(@Html.Translate("Program")).Filterable(true);
        columns.Bound(e => e.MonthName).Width(90).Title(@Html.Translate("Month")).Filterable(true);
        columns.Bound(e => e.Round).Width(120).Title(@Html.Translate("Round"));
        columns.Bound(e => e.Region).Width(120).Title(@Html.Translate("Region")).Filterable(false);
        columns.Bound(e => e.Zone).Width(120).Title(@Html.Translate("Zone")).Filterable(false);
        columns.Bound(e => e.Commodity).Title(@Html.Translate("Commodity")).Width(110).Filterable(false);
        columns.Bound(e => e.Amount).Width(100).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal; ", title =@Html.Translate("Amount Allocated"), @class = "cats-unit-pref-grid" }).Format("{0:N2}").HtmlAttributes(new { align = "Right" }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " }).Filterable(false);
        //columns.Bound(e => e.StrRequisitionDate).Title("Requested On").Width(140);
        columns.Bound(e => e.BenficiaryNo).Title(@Html.Translate("Beneficiaries")).Width(90).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Benficiary No" }).Format("{0:n0}").HtmlAttributes(new { align = "Right" }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " }).Filterable(false);
        columns.Bound(e => e.Status).Title(@Html.Translate("Status"));//.Width(120).ClientTemplate("<a class='action-link assign-code#=Status#' href='" + @Url.Action("Index", "FDPSIAllocation", new { Area = "Logistics", regionid = ViewBag.regionId }) + "&RequisitionID=#=RequisitionId#'>PC/SI Allocate</a>  ").Filterable(false);
        //columns.Command(e =>
        //{
        //    if (LogisticsConstants.isValidOperation(LogisticsConstants.Operation.UnCommit_Allocation).ToString() == "UnCommit_Allocation")
        //        e.Custom(@Html.Translate("Uncommmit")).Click("onUnCommit");
        //    if (LogisticsConstants.isValidOperation(LogisticsConstants.Operation.Approve_Allocation).ToString() == "Approve_Allocation")
        //        e.Custom(@Html.Translate("Approve")).Click("onApprove");

        //}).Width(200);
        columns.Bound(requisition => requisition.Status).Title("Actions")
                .ClientTemplate(
                @"<div class='btn-group'>
                <button type='button' id='workflow-#=RequisitionId#' class='btn btn-default dropdown-toggle btn-xs green-stripe' data-toggle='dropdown'>
                    <i class='fa fa-ellipsis-horizontal'></i>Workflow<i class='fa fa-angle-down'></i>
                </button>
                <ul class='dropdown-menu pull-right' style='overflow: visible;'>" +
                    "# if (Status == 'Project Code Assigned') { #" +
                        "# if ('" + LogisticsConstants.isValidOperation(LogisticsConstants.Operation.UnCommit_Allocation).ToString() + "' == 'UnCommit_Allocation') { #" +
                            "<li class='edit_button'><a href = \"javascript:promot_workflow('#=BusinessProcessID#','#=UncommitStateID#','Uncommit','#=RequisitionId#')\" title='Reject Requisition'>Uncommit</a></li>" +
                        " # } #" +
                        "# if ('" + LogisticsConstants.isValidOperation(LogisticsConstants.Operation.Approve_Allocation).ToString() + "' == 'Approve_Allocation') { #" +
                            "<li class='edit_button'><a href = \"javascript:promot_workflow('#=BusinessProcessID#','#=ApproveStateID#','Approve','#=RequisitionId#')\" title='Reject Requisition'>Approve</a></li>" +
                        " # } #" +
                    " # } #" +
                    " # if ('" + LogisticsConstants.isValidOperation(LogisticsConstants.Operation.View_dispatch_allocation_menu_item).ToString() + "' == 'View_dispatch_allocation_menu_item') { #" +
                        "<li class='edit_button'><a href=\"javascript: workflow_history('#=BusinessProcessID#')\"> History </a></li>" +
                    " # } #" +
                "</ul></div>");


        //columns.Bound(e => e.Round).Width(120).Title("Round");
    })
                         .Events(e => e.DataBound("onDataBound"))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Read(read => read.Action("AllocateProjectCode", "DispatchAllocation", new { regionId = Model[0], status = "Project Code Assigned" }))

                         // .PageSize(5)
                         )
                         .Scrollable(scroll => scroll.Height(350))
                         //.Selectable(select => select.Mode(GridSelectionMode.Single))
                         .Navigatable()
                         .Filterable(filterable => filterable
                             .Extra(false)
                             .Operators(operators => operators
                                 .ForString(str => str.Clear()
                                     .StartsWith(@Html.Translate("Starts with"))
                                     .IsEqualTo(@Html.Translate("Is equal to"))
                                     .IsNotEqualTo(@Html.Translate("Is not equal to"))
                          )))
                         //.Filterable()
                         .Sortable()
                         .HtmlAttributes(new { style = "height:450px;" })
//.Pageable()
)


<script>
   

    function roundChange(e) {
        e.preventDefault();
        var value = this.value();
        var grid = $("#ProjectCodegrid" + '@gridid').data("kendoGrid");
        if (value) {
            grid.dataSource.filter({ field: "Round", operator: "eq", value: parseInt(value) });

        } else {
            grid.dataSource.filter({});
        }
    }
    
    function onUnCommit(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = "@Url.Action("UncommitRequsition","DispatchAllocation")" + "/" + dataItem.RequisitionId;
    }

    function onApprove(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = "@Url.Action("ApproveSiPcAllocation","DispatchAllocation")" + "/" + dataItem.RequisitionId;
    }
    function onDataBound(e) {
       
        var grid = $("#ProjectCodegrid" + '@gridid').data("kendoGrid");
        var gridData = grid.dataSource.view();

      
        for (var i = 0; i < gridData.length; i++) {
            var currentUid = gridData[i].uid;
            
            if (gridData[i].Status == 3) {
                var currentRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var uncommitButton = $(currentRow).find(".k-grid-Uncommmit");
                uncommitButton.hide();
               
            }
            if (gridData[i].Status == 8) {

              
                    var currentRo = grid.table.find("tr[data-uid='" + currentUid + "']");
                    var approvebutton = $(currentRo).find(".k-grid-Approve");
                    approvebutton.hide();
                
            }

            
        }
    }
</script>