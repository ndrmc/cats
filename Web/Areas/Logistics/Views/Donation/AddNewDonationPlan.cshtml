@using System.Collections
@using Cats.Helpers
@using Kendo.Mvc.UI

@model Cats.Areas.Logistics.Models.DonationViewModel

@{
    ViewBag.Title = "Receive Plan for Donation";
   
    var headerId = 0;
    if(Model!=null)
    {
        headerId = Model.DonationHeaderPlanID;
    }
    Layout = "~/Views/Shared/NewTheme _MainLayout.cshtml";
    ViewBag.PageTitle = Html.Translate("Receive Plan for Donation");
    ViewBag.PageTitleDescription = "";
}


@section Toolbar{
    
   
@*    <a class="btn green" id="btnReceiptDispatch" href="@Url.Action("CloseLocalPlan", "Donation", new { donationPlanHeaderId = @headerId })">@Html.Translate("Send to Hub")</a>*@
    
@*    <a class="btn toolbar-btn "  data-buttontype="btn_save" data-submittedform="frmDonation"></a>*@
    <a id="btnAddProposal" data-buttontype="btn_back_to_list" class="btn btn-default btn-fit-height" href="@Url.Action("Index", "Donation")"><i class="fa fa-list"></i> @Html.Translate("Back to List")</a>
}



@using (Html.BeginForm("Save", "Donation", FormMethod.Post, new { id = "frmDonation" }))
{
    @Html.HiddenFor(h=>h.DonationHeaderPlanID)

     @Html.HiddenFor(h=>h.CommodityID)
     @Html.HiddenFor(h=>h.ProgramID)
     @Html.HiddenFor(h=>h.CommodityTypeID)
     @Html.HiddenFor(h=>h.DonorID)

    <div class="portlet light bordered bg-inverse form-horizontal">
        <div class="portlet-title">
            <div class="caption font-green-sharp">
                <i class="fa fa-list font-green-sharp"></i>
                <span class="caption-subject bold uppercase"> @Html.Translate("Receive Plan for Donation")</span>
                <span class="caption-helper">  </span>
            </div>
            <div class="tools">
                <a href="#" class="collapse" data-original-title="" title=""></a>
                @*                <a href="javascript:;" class="remove" data-original-title="" title=""></a>*@
            </div>
            <div class="actions">
                <a class="btn green-stripe btn-default" id="btnReceiptDispatch" href="@Url.Action("CloseLocalPlan", "Donation", new {donationPlanHeaderId = @headerId})"><i class="fa fa-send-o"></i> @Html.Translate("Send to Hub")</a>
                <button class="btn toolbar-btn green" data-buttontype="btn_save" data-submittedform="frmDonation" type="submit"><i class="fa fa-save"></i> @Html.Translate("Save")</button>
            </div>
        </div>
        <div class="portlet-body">
            <div class="row">
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.LabelFor(model => model.SINumber, @Html.Translate("SI / Batch Number"))
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.SINumber, "SINumber", new {@readonly = "readonly", @class = "form-control"})
                        <span class="help-block"> @Html.ValidationMessageFor(model => model.SINumber)</span>
                    </div>
                </div>
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.Label(@Html.Translate("Commodity Type"))
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.CommomdityTypeName, new {@readonly = "readonly", @class = "form-control"})
                        @*  @(Html.DropDownListFor(model => model.DonorID, new SelectList(Model.Donors, "DonorID", "Name"),new { @readonly = "readonly" }))*@
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.LabelFor(model => model.ETA, @Html.Translate("ETA"))
                    </div>
                    <div class="col-md-8">
                        @(Html.TextBoxFor(model => model.ETA, new {@readonly = "readonly", @class = "cats-datepicker2 form-control"}))
                        <span class="help-block"> @Html.ValidationMessageFor(model => model.ETA) </span>
                    </div>
                </div>
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.Label(@Html.Translate("Commodity"))
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.CommodityName, new {@readonly = "readonly", @class = "form-control"})
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.Label(@Html.Translate("Program"))
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.DonorName, new {@readonly = "readonly", @class = "form-control"})
                        @*  @(Html.DropDownListFor(model => model.DonorID, new SelectList(Model.Donors, "DonorID", "Name"),new { @readonly = "readonly" }))*@
                    </div>
                </div>
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.Label(@Html.Translate("Donor"))
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.ProgramName, new {@readonly = "readonly", @class = "form-control"})
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <div class="col-md-4 control-label">
                        @Html.LabelFor(model => model.WieghtInMT, @Html.Translate("Gift Certificate Amount"))
                    </div>
                    <div class="col-md-4">
                        @(Html.TextBoxFor(model => model.WieghtInMT, new {@readonly = "readonly", @class = "form-control"}))
                    </div>
                </div>
            </div>
        </div>
    </div>

  
    <div class="portlet light bordered">
        <div class="portlet-title">
            <div class="caption font-green-sharp">
                <i class="fa fa-list font-green-sharp"></i>
                <span class="caption-subject bold uppercase"> @Html.Translate("Hubs")</span>
                <span class="caption-helper">  </span>
            </div>
            <div class="tools">
                <a href="#" class="collapse" data-original-title="" title=""></a>
@*                <a href="javascript:;" class="remove" data-original-title="" title=""></a>*@
            </div>
            <div class="actions">
                
            </div>
        </div>
        <div class="portlet-body">
            @(Html.Kendo().Grid(Model.DonationPlanDetails)
          .Name("grid")
          .Columns(columns =>
          {
              columns.Bound(p => p.HubID).Title(Html.Translate("Hub Id")).Width(100).Hidden(true).ClientTemplate("#= HubID #" +
       "<input type='hidden' name='DonationPlanDetails[#= index(data)#].HubID' value='#= HubID #' />");
              columns.Bound(p => p.Hub).Title(Html.Translate("Hub")).Width(100).ClientTemplate("#= Hub #" +
      "<input type='hidden' name='DonationPlanDetails[#= index(data)#].Hub' value='#= Hub #' />");

              columns.Bound(p => p.AllocatedAmount).Title(Html.Translate("Allocated Amount")).Width(30).Format("{0:n2}").ClientFooterTemplate("<div style='text-align: right'> Sum: #=sum#</div>").HtmlAttributes(new { align = "Right" }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " }).ClientTemplate("#= AllocatedAmount #" +
       "<input type='hidden' name='DonationPlanDetails[#= index(data)#].AllocatedAmount' value='#= AllocatedAmount #' />");

              //        columns.Bound(p => p.ReceivedAmount).Title("Received").Width(30).Format("{0:n2}").HtmlAttributes(new { align = "Right" }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " }).ClientTemplate("#= ReceivedAmount #" +
              // "<input type='hidden' name='DonationPlanDetails[#= index(data)#].ReceivedAmount' value='#= ReceivedAmount #' />");

              //        columns.Bound(p => p.Balance).Title("Balance").Width(30).Format("{0:n2}").HtmlAttributes(new { align = "Right" }).HtmlAttributes(new { style = "text-align: right; font-size: 12px; " }).ClientTemplate("#= Balance #" +
              //"<input type='hidden' name='DonationPlanDetails[#= index(data)#].Balance' value='#= Balance #' />");

          })

          .Editable(editable => editable.Mode(GridEditMode.InCell))
          .Sortable()
          .Scrollable()
          .Events(events => events.DataBound("onDataBound"))

          .HtmlAttributes(new { style = "height:250px;" })
          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .Aggregates(aggregates => aggregates.Add(p => p.AllocatedAmount).Sum())
                                        .PageSize(20)
                                        .Events(events => events.Error("error_handler"))


                                        .ServerOperation(false)
                                        .Model(model => model.Id(p => p.DonationDetailPlanID))
                                        .Model(model => model.Field(p => p.Hub).Editable(false))


          )
            )
        </div>
    </div>
    
}


<script>
      

    
    
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    

    function index(dataItem) {
        var data = $("#grid").data("kendoGrid").dataSource.data();

        return data.indexOf(dataItem);
    }
    
    function onDataBound(e) {
        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("focus", "input", function (e) {
            var input = $(this);
            setTimeout(function () { input.select(); }, 100);
        });
    }
    function saverecords() {
        $("#grid").data("kendoGrid").saveChanges();
    }

   
</script>          