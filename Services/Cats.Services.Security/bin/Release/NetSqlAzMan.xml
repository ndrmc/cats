<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSqlAzMan</name>
    </assembly>
    <members>
        <member name="T:NetSqlAzMan.Utilities.MergeUtilities">
            <summary>
            Merge Utilities
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Utilities.MergeUtilities.IsOn(NetSqlAzMan.SqlAzManMergeOptions,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Determines whether the specified merge options is on.
            </summary>
            <param name="mergeOptions">The merge options.</param>
            <param name="option">The option.</param>
            <returns>
            	<c>true</c> if the specified merge options is on; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NetSqlAzMan.Logging.LoggingUtility">
            <summary>
            Utility for message logging.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Logging.LoggingUtility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Logging.LoggingUtility"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Logging.LoggingUtility.WriteEvent(NetSqlAzMan.Interfaces.IAzManStorage,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Writes the event.
            </summary>
            <param name="storage">The storage.</param>
            <param name="message">The message.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:NetSqlAzMan.Logging.LoggingUtility.WriteInfo(NetSqlAzMan.Interfaces.IAzManStorage,System.String)">
            <summary>
            Writes the info.
            </summary>
            <param name="storage">The storage.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NetSqlAzMan.Logging.LoggingUtility.WriteWarning(NetSqlAzMan.Interfaces.IAzManStorage,System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="storage">The storage.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NetSqlAzMan.Logging.LoggingUtility.WriteError(NetSqlAzMan.Interfaces.IAzManStorage,System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="storage">The storage.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManBizRule">
            <summary>
            Public Interface for All NetSqlAzMan Business Rules
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManBizRule.Execute(System.Collections.Hashtable,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManItem,NetSqlAzMan.Interfaces.AuthorizationType@)">
            <summary>
            Executes the specified Business Rule.
            </summary>
            <param name="contextParameters">The context parameters.</param>
            <param name="identity">The identity.</param>
            <param name="ownerItem">The owner itemName.</param>
            <param name="ForcedCheckAccessResult">The ForcedCheckAccessResult property sets a value that indicates whether the Business Rule (BizRule) forces CheckAccess result to some value.</param>
            <returns>True or False</returns>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManStorageCache">
            <summary>
            IAzManStorageCache Interface
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.BuildStorageCache">
            <summary>
            Builds the storage cache.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.BuildStorageCache(System.String,System.String)">
            <summary>
            Builds the storage cache.
            </summary>
            <param name="storeNameFilter">The store name filter.</param>
            <param name="applicationNameFilter">The application name filter.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.BuildStorageCache(System.String)">
            <summary>
            Builds the storage cache.
            </summary>
            <param name="storeNameFilter">The store name filter.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.String[],System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="userSSid">The user S sid.</param>
            <param name="groupsSSid">The groups S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="DBuserSSid">The D buser S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="DBuserSSid">The D buser S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.String[],System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="userSSid">The user S sid.</param>
            <param name="groupsSSid">The groups S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.GetAuthorizedItems(System.String,System.String,System.String,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Gets the authorized items.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="DBuserSSid">The D buser S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorageCache.GetAuthorizedItems(System.String,System.String,System.String,System.String[],System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Gets the authorized items.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="userSSid">The user S sid.</param>
            <param name="groupsSSid">The groups S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorageCache.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorageCache.Storage">
            <summary>
            Gets or sets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.AuthorizationType">
            <summary>
            Authorization Type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AuthorizationType.Neutral">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AuthorizationType.Allow">
            <summary>
            Allow.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AuthorizationType.Deny">
            <summary>
            Deny.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AuthorizationType.AllowWithDelegation">
            <summary>
            Allow with delegation
            </summary>
        </member>
        <member name="T:NetSqlAzMan.LINQ.NetSqlAzManStorageDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetSqlAzMan.LINQ.NetSqlAzManStorageDataContext.GetDBUsersEx(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Gets the DB users ex.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="dBUserSid">The d B user sid.</param>
            <param name="dBUserName">Name of the d B user.</param>
            <returns></returns>
        </member>
        <member name="T:NetSqlAzMan.ENS.IAzManENS">
            <summary>
            Interface for ENS (Event Notification System).
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationDeleted">
            <summary>
            Occurs after a SqlAzManApplication object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationUpdated">
            <summary>
            Occurs after a SqlAzManApplication object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationRenamed">
            <summary>
            Occurs after a SqlAzManApplication object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupCreated">
            <summary>
            Occurs after an Application Group object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemCreated">
            <summary>
            Occurs after an Item object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationPermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationPermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupDeleted">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupRenamed">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupMemberCreated">
            <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupDeleted">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupRenamed">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupMemberCreated">
            <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.AuthorizationDeleted">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.AuthorizationUpdated">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.AuthorizationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.AuthorizationAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.AuthorizationAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationGroupMemberDeleted">
            <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupMemberDeleted">
            <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemDeleted">
            <summary>
            Occurs after a SqlAzManItem object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemUpdated">
            <summary>
            Occurs after a SqlAzManItem object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.BizRuleUpdated">
            <summary>
            Occurs after a SqlAzManItem BizRule has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ItemRenamed">
            <summary>
            Occurs after a SqlAzManItem object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.AuthorizationCreated">
            <summary>
            Occurs after an Authorization object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.DelegateCreated">
            <summary>
            Occurs after a Delegate has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.DelegateDeleted">
            <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.MemberAdded">
            <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.MemberRemoved">
            <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreCreated">
            <summary>
            Occurs after a Store object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreOpened">
            <summary>
            Occurs after a Store object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.TransactionBeginned">
            <summary>
            Occurs after a Storage Transaction has benn initiated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.TransactionTerminated">
            <summary>
            Occurs after a Storage Transaction has benn terminated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.NetSqlAzManModeChanged">
            <summary>
            Occurs after NetSqlAzManMode has ben changed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreDeleted">
            <summary>
            Occurs after a SqlAzManStore object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreUpdated">
            <summary>
            Occurs after a SqlAzManStore object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreRenamed">
            <summary>
            Occurs after a SqlAzManStore object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationCreated">
            <summary>
            Occurs after an Application object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StoreGroupCreated">
            <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.ApplicationOpened">
            <summary>
            Occurs after an Application object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StorePermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.IAzManENS.StorePermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.ItemType">
            <summary>
            Is the Item Type categorization for Items. An itemName can be of one of these types.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.ItemType.Role">
            <summary>
            A Role itemName can contain: Roles, Tasks, Operations.
            </summary>
            <remarks>Administrative purpose only. Do not use in the Applications.</remarks>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.ItemType.Task">
            <summary>
            A Task itemName can contain: Tasks, Operations.
            </summary>
            <remarks>Administrative purpose only. Do not use in the Applications.</remarks>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.ItemType.Operation">
            <summary>
            An Operation can contain: Operations.
            </summary>
            <remarks>Administrative and Developer purpose. Invoke Operations CheckAccess in the Applications.</remarks>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.AzManIsolationLevel">
            <summary>
            Specifies the transaction locking behavior for AzMan store operations. 
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AzManIsolationLevel.ReadCommitted">
            <summary>
            Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data. 
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AzManIsolationLevel.ReadUncommitted">
            <summary>
            A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored. 
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AzManIsolationLevel.RepeatableRead">
            <summary>
            Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible. 
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.AzManIsolationLevel.Snapshot">
            <summary>
            Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery. 
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManMergeOptions">
            <summary>
            SqlAzMan Merge Options (Import)
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.NoMerge">
            <summary>
            No merge
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.CreatesNewItems">
            <summary>
            Create New Items
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.OverwritesExistingItems">
            <summary>
            Overwrites Existing Items
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.DeleteMissingItems">
            <summary>
            Delete Missing Items 
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.CreatesNewItemAuthorizations">
            <summary>
            Creates New Item Authorizations  
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.OverwritesExistingItemAuthorization">
            <summary>
            Overwrites Existing Item Authorization
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManMergeOptions.DeleteMissingItemAuthorizations">
            <summary>
            Delete Missing Item Authorizations
            </summary>
        </member>
        <member name="T:NetSqlAzMan.LINQ.BuildUserPermissionCacheResult2">
            <summary>
            BuildUserPermissionCacheResult2 LINQ class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.LINQ.BuildUserPermissionCacheResult2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.LINQ.BuildUserPermissionCacheResult2"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:NetSqlAzMan.LINQ.BuildUserPermissionCacheResult2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManAttribute`1">
            <summary>
            Interfaces interface for all Attributes
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManAttribute`1">
            <summary>
            Interfaces interface for all Attributes
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManExport">
            <summary>
            Common interface for all NetSqlAzMan importable/exportable objects
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManExport.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAttribute`1.Update(System.String,System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAttribute`1.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAttribute`1.AttributeId">
            <summary>
            Gets the authorization attribute id.
            </summary>
            <value>The authorization attribute id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAttribute`1.Owner">
            <summary>
            Gets the Owner.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAttribute`1.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAttribute`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManAttribute`1.AttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManAttribute`1.AttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManAttribute`1.db">
            <summary>
            NetSqlAzManStorageDataContext object reference
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManAttribute`1.attributeId">
            <summary>
            Attribute Id
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManAttribute`1.owner">
            <summary>
            Attribute Owner
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManAttribute`1.key">
            <summary>
            Attribute Key
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManAttribute`1.value">
            <summary>
            Attribute Value
            </summary>
        </member>
        <member name="F:NetSqlAzMan.SqlAzManAttribute`1.ens">
            <summary>
            Event Notification System
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.raiseAttributeDeleted(`0,System.String)">
            <summary>
            Raises the attribute deleted.
            </summary>
            <param name="owner">The owner.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.raiseAttributeUpdated(NetSqlAzMan.Interfaces.IAzManAttribute{`0},System.String,System.String)">
            <summary>
            Raises the attribute updated.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="oldKey">The old key.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.#ctor(NetSqlAzMan.LINQ.NetSqlAzManStorageDataContext,`0,System.Int32,System.String,System.String,NetSqlAzMan.ENS.SqlAzManENS)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManAttribute&lt;OWNER&gt;"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="owner">The owner.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="ens">The ens.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.Update(System.String,System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAttribute`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManAttribute`1.AttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManAttribute`1.AttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAttribute`1.AttributeId">
            <summary>
            Gets the attribute id.
            </summary>
            <value>The attribute id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAttribute`1.Owner">
            <summary>
            Gets the Owner.
            </summary>
            <value>The Owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAttribute`1.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAttribute`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManSID">
            <summary>
            Represent a Security IDentifier (SID)
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManSid">
            <summary>
            Represents a Security IDentifier (SID)
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManSid.BinaryValue">
            <summary>
            Gets the binary value.
            </summary>
            <value>The binary value.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManSid.StringValue">
            <summary>
            Gets the string value.
            </summary>
            <value>The string value.</value>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManSID"/> class.
            </summary>
            <param name="sddlForm">The SDDL form.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManSID"/> class.
            </summary>
            <param name="sddlForm">The SDDL form.</param>
            <param name="customSid">if set to <c>true</c> [custom sid].</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.#ctor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManSID"/> class.
            </summary>
            <param name="sid">The sid.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManSID"/> class.
            </summary>
            <param name="binaryForm">The binary form.</param>
            <remarks>Valid only for SecurityIdentifier(s) and Guid(s)</remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManSID"/> class.
            </summary>
            <param name="binaryForm">The binary form.</param>
            <param name="customSid">if set to <c>true</c> [custom sid].</param>
            <remarks>Valid only for custom Sid (DB Users)</remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.NewSqlAzManSid">
            <summary>
            News the SQL az man owner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.op_Equality(NetSqlAzMan.SqlAzManSID,System.Byte[])">
            <summary>
            Operator == for SqlAzManSID.
            </summary>
            <param name="sid">The sid.</param>
            <param name="binaryForm">The binary form.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.op_Inequality(NetSqlAzMan.SqlAzManSID,System.Byte[])">
            <summary>
            Operator != for SqlAzManSID.
            </summary>
            <param name="sid">The owner.</param>
            <param name="binaryForm">The binary form.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.op_Equality(NetSqlAzMan.SqlAzManSID,NetSqlAzMan.SqlAzManSID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="sid1">The sid1.</param>
            <param name="sid2">The sid2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.op_Inequality(NetSqlAzMan.SqlAzManSID,NetSqlAzMan.SqlAzManSID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="sid1">The sid1.</param>
            <param name="sid2">The sid2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.op_Implicit(System.Security.Principal.WindowsIdentity)~NetSqlAzMan.SqlAzManSID">
            <summary>
            Implicit operators the specified windows identity.
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.Equals(NetSqlAzMan.SqlAzManSID)">
            <summary>
            Equalses the specified sqlazman sid.
            </summary>
            <param name="sqlazmanSid">The sqlazman sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.Equals(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Equalses the specified sid.
            </summary>
            <param name="sid">The sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.Equals(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Equalses the specified sid.
            </summary>
            <param name="sid">The sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.Equals(System.Guid)">
            <summary>
            Equalses the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.GetBytesFromInt32(System.Int32)">
            <summary>
            Gets the bytes from int32.
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.SIDToInt32(System.Int32)">
            <summary>
            SIDs to int32.
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.SqlAzManSID"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManSID.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManSID.BinaryValue">
            <summary>
            Gets the binary value.
            </summary>
            <value>The binary value.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManSID.StringValue">
            <summary>
            Gets the string value.
            </summary>
            <value>The string value.</value>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManStoreGroupMember">
            <summary>
            Interfaces interface for all Store Group Members.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.GetMemberInfo(System.String@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="displayName">Name of the display.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.StoreGroupMemberId">
            <summary>
            Gets the store group member id.
            </summary>
            <value>The store group member id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.StoreGroup">
            <summary>
            Gets the store group.
            </summary>
            <value>The store group.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.WhereDefined">
            <summary>
            Gets where member is defined.
            </summary>
            <value>The where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.IsMember">
            <summary>
            Gets a value indicating whether this instance is member.
            </summary>
            <value><c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStoreGroupMember.StoreGroupMemberDeleted">
            <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManImport">
            <summary>
            Common interface for all NetSqlAzMan importable/exportable objects
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManImport.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.RestrictedAuthorizationType">
            <summary>
            Restricted Authorization Type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.RestrictedAuthorizationType.Allow">
            <summary>
            Allow.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.RestrictedAuthorizationType.Deny">
            <summary>
            Deny.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Cache.WindowsIdentityExtensions">
            <summary>
            WindowsIdentity extension methods.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Cache.WindowsIdentityExtensions.GetUserBinarySSid(System.Security.Principal.WindowsIdentity)">
            <summary>
            Gets the user binary sid.
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.WindowsIdentityExtensions.GetGroupsBinarySSid(System.Security.Principal.WindowsIdentity)">
            <summary>
            Gets the groups binary sid.
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns></returns>
        </member>
        <member name="T:NetSqlAzMan.Providers.NetSqlAzManRoleProvider">
            <summary>
            ASP.NET Role Provider for .NET Sql Authorization Manager.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.storageCache">
            <summary>
            The Storage Cache
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.userLookupType">
            <summary>
            The user lookup type.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.defaultDomain">
            <summary>
            The default Domain.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzManRoleProvider"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetDBUser(System.String)">
            <summary>
            Gets the DB user.
            </summary>
            <param name="dbUserName">Name of the db user.</param>
            <returns></returns>
            <remarks>Thread-Safe</remarks>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles.</param>
            <param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <param name="roleName">The role to search in.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <param name="username">The user to return a list of roles for.</param>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to get the list of users for.</param>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles.</param>
            <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to search for in the data source.</param>
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.getUpn(System.String)">
            <summary>
            This code takes the user name supplied in the login form, constructs a UPN in the format userName@domainName, and passes the UPN to the WindowsIdentity constructor. This constructor uses the Kerberos S4U extension to obtain a Windows token for the user.
            </summary>
            <param name="userName"></param>
            <returns></returns>
            <remarks>http://msdn2.microsoft.com/en-us/library/ms998355.aspx</remarks>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetStorage">
            <summary>
            Gets the storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetStore">
            <summary>
            Gets the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.InvalidateCache(System.Boolean)">
            <summary>
            Invalidates the cache.
            </summary>
            <param name="waitForCacheBuiltCompletition">if set to <c>true</c> [wait for cache built completition].</param>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.StoreName">
            <summary>
            Gets the store.
            </summary>
            <value>The store.</value>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.UseWCFCacheService">
            <summary>
            Gets a value indicating whether [use WCF cache service].
            </summary>
            <value><c>true</c> if [use WCF cache service]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <value></value>
            <returns>The name of the application to store and retrieve role information for.</returns>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.Name">
            <summary>
            Gets the friendly name used to refer to the provider during configuration.
            </summary>
            <value></value>
            <returns>The friendly name used to refer to the provider during configuration.</returns>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.Description">
            <summary>
            Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).
            </summary>
            <value></value>
            <returns>A brief, friendly description suitable for display in administrative tools or other UIs.</returns>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.UserLookupType">
            <summary>
            Gets or sets the User Lookup Type. (LDAP or DB)
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Providers.NetSqlAzManRoleProvider.DefaultDomain">
            <summary>
            Gets or sets the Default Domain. (Valid only for UserLookupType = "LDAP")
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.MemberType">
            <summary>
            Type of member
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.MemberType.StoreGroup">
            <summary>
            StoreGroup type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.MemberType.ApplicationGroup">
            <summary>
            ApplicationGroup type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.MemberType.WindowsNTGroup">
            <summary>
            WindowsNTGroup type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.MemberType.WindowsNTUser">
            <summary>
            WindowsNTUser type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.MemberType.AnonymousSID">
            <summary>
            AnonymousSID type
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.MemberType.DatabaseUser">
            <summary>
            DatabaseUser type
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManItemAttribute">
            <summary>
            Item Attribute
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItemAttribute.Update(System.String,System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItemAttribute.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStorage">
            <summary>
            AzMan Storage Class.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManStorage">
            <summary>
            Interfaces interface for all AzMan Storage
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManTransactable">
            <summary>
            Interfaces interface for all AzMan Transactable objects
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManTransactable.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManTransactable.BeginTransaction(NetSqlAzMan.Interfaces.AzManIsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManTransactable.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManTransactable.RollBackTransaction">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManTransactable.TransactionInProgress">
            <summary>
            Gets a value indicating whether [transaction in progress].
            </summary>
            <value>
            	<c>true</c> if [transaction in progress]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.CreateStore(System.String,System.String)">
            <summary>
            Creates the specified store name.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="storeDescription">The store description.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.GetStore(System.String)">
            <summary>
            Opens the specified store name.
            </summary>
            <param name="storeName">Name of the store.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.HasStores">
            <summary>
            Determines whether this instance has stores.
            </summary>
            <returns>
            	<c>true</c> if this instance has stores; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.GetStores">
            <summary>
            Gets the stores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.GetDBUser(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="customSid">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.GetDBUser(System.String)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="userName">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.GetDBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.CheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.CheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.BeginCheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.BeginCheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.EndCheckAccess(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.EndCheckAccessForDBUsers(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStorage.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.DatabaseVesion">
            <summary>
            Gets the database vesion.
            </summary>
            <value>The database vesion.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.StorageTimeOut">
            <summary>
            Gets or sets the storage time out.
            </summary>
            <value>The storage time out.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.Item(System.String)">
            <summary>
            Gets the <see cref="T:IAzManStore"/> with the specified store name.
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.Stores">
            <summary>
            Gets the stores.
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.DBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <value>The DB users.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.Mode">
            <summary>
            Gets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.ENS">
            <summary>
            Gets the ENS (Event Notification System).
            </summary>
            <value>The ENS.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.LogStream">
            <summary>
            Gets or sets the log stream.
            </summary>
            <value>The log stream.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.LogErrors">
            <summary>
            Gets or sets a value indicating whether [log errors].
            </summary>
            <value><c>true</c> if [log errors]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.LogWarnings">
            <summary>
            Gets or sets a value indicating whether [log warnings].
            </summary>
            <value><c>true</c> if [log warnings]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.LogInformations">
            <summary>
            Gets or sets a value indicating whether [log informations].
            </summary>
            <value><c>true</c> if [log informations]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.IAmAdmin">
            <summary>
            Gets a value indicating whether I am a NetSqlAzMan_Administrators member.
            </summary>
            <value><c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.LogOnEventLog">
            <summary>
            Gets a value indicating whether [log on event log].
            </summary>
            <value><c>true</c> if [log on event log]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStorage.LogOnDb">
            <summary>
            Gets a value indicating whether [log on db].
            </summary>
            <value><c>true</c> if [log on db]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStorage.StoreCreated">
            <summary>
            Occurs after a Store object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStorage.StoreOpened">
            <summary>
            Occurs after a Store object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStorage.TransactionBeginned">
            <summary>
            Occurs after a Storage Transaction has benn initiated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStorage.TransactionTerminated">
            <summary>
            Occurs after a Storage Transaction has benn terminated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStorage.NetSqlAzManModeChanged">
            <summary>
            Occurs after NetSqlAzMan Mode has been changed.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.SqlAzManStorage"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlAzManStore"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.VerifyStorageDB(System.String)">
            <summary>
            Verifies if the database is a valid NetSqlAzMan Storage DB.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.GetStore(System.String)">
            <summary>
            Opens the specified store name.
            </summary>
            <param name="storeName">Name of the store.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.HasStores">
            <summary>
            Determines whether this instance has stores.
            </summary>
            <returns>
            	<c>true</c> if this instance has stores; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.GetStores">
            <summary>
            Gets the stores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CreateStore(System.String,System.String)">
            <summary>
            Creates the specified store name.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="storeDescription">The store description.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users only].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users only].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR DB Users only].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR DB Users only].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [ONLY FOR Windows Users].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.BeginCheckAccess(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [ONLY FOR Windows Users].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.BeginCheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [ONLY FOR DB Users].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.BeginCheckAccess(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Boolean,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [ONLY FOR DB Users].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.EndCheckAccess(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.EndCheckAccessForDBUsers(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.BeginTransaction(NetSqlAzMan.Interfaces.AzManIsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.RollBackTransaction">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.GetDBUser(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="customSid">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.GetDBUser(System.String)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="userName">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStorage.GetDBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.LogStream">
            <summary>
            Gets or sets the log stream.
            </summary>
            <value>The log stream.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.RootDSEPath">
            <summary>
            Gets or sets the root dse path.
            </summary>
            <value>The root DSE path.</value>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStorage.StoreCreated">
            <summary>
            Occurs after a Store object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStorage.StoreOpened">
            <summary>
            Occurs after a Store object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStorage.TransactionBeginned">
            <summary>
            Occurs after a Storage Transaction has been initiated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStorage.TransactionTerminated">
            <summary>
            Occurs after a Storage Transaction has been terminated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStorage.NetSqlAzManModeChanged">
            <summary>
            Occurs after NetSqlAzMan Mode has been changed.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.StorageTimeOut">
            <summary>
            Gets or sets the storage time out.
            </summary>
            <value>The storage time out.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.DatabaseVesion">
            <summary>
            Gets the database vesion.
            </summary>
            <value>The database vesion.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.DBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <value>The DB users.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.Stores">
            <summary>
            Gets the stores.
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.Item(System.String)">
            <summary>
            Gets the <see cref="T:IAzManStore"/> with the specified store name.
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.IAmAdmin">
            <summary>
            Gets a value indicating whether I am a NetSqlAzMan_Administrators member.
            </summary>
            <value><c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.TransactionInProgress">
            <summary>
            Gets a value indicating whether [transaction in progress].
            </summary>
            <value>
            	<c>true</c> if [transaction in progress]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.Mode">
            <summary>
            Gets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.LogErrors">
            <summary>
            Gets or sets a value indicating whether [log errors].
            </summary>
            <value><c>true</c> if [log errors]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.LogWarnings">
            <summary>
            Gets or sets a value indicating whether [log Warnings].
            </summary>
            <value><c>true</c> if [log Warnings]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.LogInformations">
            <summary>
            Gets or sets a value indicating whether [log Informations].
            </summary>
            <value><c>true</c> if [log Informations]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.LogOnEventLog">
            <summary>
            Gets or sets a value indicating whether [log on event log].
            </summary>
            <value><c>true</c> if [log on event log]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.LogOnDb">
            <summary>
            Gets or sets a value indicating whether [log on db].
            </summary>
            <value><c>true</c> if [log on db]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStorage.ENS">
            <summary>
            Gets the ENS (Event Notification System).
            </summary>
            <value>The ENS.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStorage.AsyncCheckAccess">
            <summary>
            Delegate for Async Check Access [FOR Windows Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The Attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStorage.AsyncCheckAccessForDBUsers">
            <summary>
            Delegate for Async Check Access [FOR DB Users ONLY].
            </summary>
            <param name="StoreName">Name of the store.</param>
            <param name="ApplicationName">Name of the application.</param>
            <param name="ItemName">Name of the itemName.</param>
            <param name="dbUser">The db user.</param>
            <param name="ValidFor">The valid for.</param>
            <param name="OperationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The Attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="T:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils">
            <summary>
            DirectoryServicesUtils class. Provides methods to manipulate AD Objects.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.LookupAccountSid(System.String,System.Byte[],System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@,NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.SID_NAME_USE@)">
            <summary>
            Lookups the account sid.
            </summary>
            <param name="lpSystemName">Name of the lp system.</param>
            <param name="Sid">The sid.</param>
            <param name="lpName">Name of the lp.</param>
            <param name="cchName">Name of the CCH.</param>
            <param name="ReferencedDomainName">Name of the referenced domain.</param>
            <param name="cchReferencedDomainName">Name of the CCH referenced domain.</param>
            <param name="peUse">The pe use.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.IsGroup(System.Byte[])">
            <summary>
            Determines whether the specified sid is group.
            </summary>
            <param name="sid">The sid.</param>
            <returns>
            	<c>true</c> if the specified sid is group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.IsGroup(System.String)">
            <summary>
            Determines whether the specified login is group.
            </summary>
            <param name="login">The login.</param>
            <returns>
            	<c>true</c> if the specified login is group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.ConvertSidToString(System.Byte[])">
            <summary>
            Converts the owner to string.
            </summary>
            <param name="sidBytes">The owner bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.ConvertStringToSid(System.String)">
            <summary>
            Converts the string to owner.
            </summary>
            <param name="sid">The owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.GetMemberInfo(System.String,System.String@,System.Boolean@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="sid">The sid.</param>
            <param name="memberName">Name of the member.</param>
            <param name="isLocal">if set to <c>true</c> [is local].</param>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.GetMemberInfo(System.String,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="memberName">Name of the member.</param>
            <param name="isAGroup">if set to <c>true</c> [is A group].</param>
            <param name="isLocal">if set to <c>true</c> [is local].</param>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.ExecuteLDAPQuery(System.String)">
            <summary>
            Executes the LDAP query.
            </summary>
            <param name="lDapQuery">The l dap query.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.TestLDAPQuery(System.String)">
            <summary>
            Executes the LDAP query.
            </summary>
            <param name="lDapQuery">The l dap query.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.GetRootDSEPart(System.String)">
            <summary>
            Gets the root DSE part.
            </summary>
            <param name="LDAPQuery">The LDAP query.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.GetLDAPQueryPart(System.String)">
            <summary>
            Return the LDAP Query portion of a NetSqlAzMan LDAPQuery
            </summary>
            <param name="LDAPQuery">The NetSqlAzMan LDAP Query</param>
            <returns>the LDAP Query portion</returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.SetActiveDirectoryLookUpCredential(System.String,System.String)">
            <summary>
            Sets the active directory look up credential.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.newDirectoryEntry(System.String)">
            <summary>
            News the directory entry.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.AttributeValuesMultiString(System.String,System.String,System.Collections.ArrayList,System.Boolean)">
            <summary>
            Attributes the values multi string.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="objectDn">The object dn.</param>
            <param name="valuesCollection">The values collection.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.Groups(System.String,System.Boolean)">
            <summary>
            Groupses the specified user dn.
            </summary>
            <param name="userDn">The user dn.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.DirectoryServices.DirectoryServicesUtils.GetAllDomainUsers">
            <summary>
            Gets all domain users.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManDBUser">
            <summary>
            SqlAzManDBUser class for custom DB User.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManDBUser">
            <summary>
            Common Interface for All Database Custom Users
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManDBUser.CustomSid">
            <summary>
            Custom Unique identifier of the DB User
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManDBUser.UserName">
            <summary>
            Username of the DB User
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManDBUser.CustomColumns">
            <summary>
            Gets the custom columns.
            </summary>
            <value>The custom columns.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManDBUser.CustomSid">
            <summary>
            Custom Unique identifier of the DB User
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManDBUser.UserName">
            <summary>
            Username of the DB User
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManDBUser.CustomColumns">
            <summary>
            Gets the custom columns.
            </summary>
            <value>The custom columns.</value>
        </member>
        <member name="T:NetSqlAzMan.NetSqlAzManAuthorizationContext">
            <summary>
            NetSqlAzManAuthorizationContext Class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.NetSqlAzManAuthorizationContext.#ctor(System.String,System.String,System.String,System.Security.Principal.WindowsIdentity,System.Boolean)">
            <summary>
            Initializes the context.
            </summary>
            <param name="storageConnectionString">The storage connection string.</param>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="useStorageCache">if set to <c>true</c> [use storage cache].</param>
        </member>
        <member name="M:NetSqlAzMan.NetSqlAzManAuthorizationContext.#ctor(System.String,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.Boolean)">
            <summary>
            Initializes the context.
            </summary>
            <param name="storageConnectionString">The storage connection string.</param>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="dbUserIdentity">The db user identity.</param>
            <param name="useStorageCache">if set to <c>true</c> [use storage cache].</param>
        </member>
        <member name="M:NetSqlAzMan.NetSqlAzManAuthorizationContext.CheckSecurity(System.Object)">
            <summary>
            Checks the security.
            </summary>
            <param name="o">The Object containing fields marked with the NetSqlAzManAuthorization Attributes.</param>
        </member>
        <member name="M:NetSqlAzMan.NetSqlAzManAuthorizationContext.InvalidateCache">
            <summary>
            Invalidates the Storage Cache.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.NetSqlAzManAuthorizationContext.BeforeCheckAccess">
            <summary>
            Occurs when [before check access].
            </summary>
        </member>
        <member name="E:NetSqlAzMan.NetSqlAzManAuthorizationContext.AfterCheckAccess">
            <summary>
            Occurs when [after check access].
            </summary>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.StoreName">
            <summary>
            Gets or sets the name of the store.
            </summary>
            <value>The name of the store.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.ApplicationName">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.StorageCache">
            <summary>
            Gets or sets the storage cache.
            </summary>
            <value>The storage cache.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.Storage">
            <summary>
            Gets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.UseStorageCache">
            <summary>
            Gets or sets a value indicating whether [use storage cache].
            </summary>
            <value><c>true</c> if [use storage cache]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.WindowsIdentity">
            <summary>
            Gets or sets the windows identity.
            </summary>
            <value>The windows identity.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.DBUserIdentity">
            <summary>
            Gets or sets the DB user identity.
            </summary>
            <value>The DB user identity.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationContext.StorageConnectionString">
            <summary>
            Gets or sets the storage connection string.
            </summary>
            <value>The storage connection string.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStoreGroup">
            <summary>
            SqlAzMan Store Group class.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManStoreGroup">
            <summary>
            Interfaces interface for all Store Groups.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.Update(System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Updates the specified object owner.
            </summary>
            <param name="description">The description.</param>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.UpdateLDapQuery(System.String)">
            <summary>
            Updates the L dap query.
            </summary>
            <param name="newLdapQuery">The new ldap query.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.Rename(System.String)">
            <summary>
            Renames the specified new name.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.CreateStoreGroupMember(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,System.Boolean)">
            <summary>
            Creates the store group member.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="whereDefined">Where member is defined.</param>
            <param name="isMember">if set to <c>true</c> [is member].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.GetStoreGroupMembers">
            <summary>
            Gets the store group members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.GetStoreGroupNonMembers">
            <summary>
            Gets the store group non members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.GetStoreGroupAllMembers">
            <summary>
            Gets the store group all members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.IsInGroup(NetSqlAzMan.Interfaces.IAzManDBUser)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="dbUser">The db user.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.GetStoreGroupMember(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the store group member.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.ExecuteLDAPQuery">
            <summary>
            Executes the LDAP query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStoreGroup.ExecuteLDAPQuery(System.String)">
            <summary>
            Executes the LDAP query.
            </summary>
            <param name="testLDapQuery">The test LDap query.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.StoreGroupId">
            <summary>
            Gets the store group id.
            </summary>
            <value>The store group id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.Store">
            <summary>
            Gets the store.
            </summary>
            <value>The store.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.LDAPQuery">
            <summary>
            Gets the LDAP query.
            </summary>
            <value>The LDAP query.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.GroupType">
            <summary>
            Gets the type of the group.
            </summary>
            <value>The type of the group.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStoreGroup.Members">
            <summary>
            Gets the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStoreGroup.StoreGroupDeleted">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStoreGroup.StoreGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStoreGroup.StoreGroupUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStoreGroup.StoreGroupRenamed">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStoreGroup.StoreGroupMemberCreated">
            <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.Update(System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Updates the specified object owner.
            </summary>
            <param name="description">The description.</param>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.UpdateLDapQuery(System.String)">
            <summary>
            Updates the L dap query.
            </summary>
            <param name="newLdapQuery">The new ldap query.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.Rename(System.String)">
            <summary>
            Renames the specified new name.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.CreateStoreGroupMember(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,System.Boolean)">
            <summary>
            Creates the store group member.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="whereDefined">Where member is defined.</param>
            <param name="isMember">if set to <c>true</c> [is member].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.GetStoreGroupAllMembers">
            <summary>
            Gets the store group members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.GetStoreGroupMembers">
            <summary>
            Gets the store group members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.GetStoreGroupMember(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the store group member.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.GetStoreGroupNonMembers">
            <summary>
            Gets the store group non members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.IsInGroup(NetSqlAzMan.Interfaces.IAzManDBUser)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="dbUser">The db user.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.isAMemberOfGroup(System.Boolean,System.Byte[],System.Boolean,System.String,System.Byte[],System.Int32)">
            <summary>
            Determines whether [is A member of group] [the specified group type].
            </summary>
            <param name="groupType">if set to <c>true</c> [group type].</param>
            <param name="GroupSid">The group sid.</param>
            <param name="netSqlAzManMode">if set to <c>true</c> [net SQL az man mode].</param>
            <param name="rootDsePath">The root dse path.</param>
            <param name="token">The token.</param>
            <param name="userGroupsCount">The user groups count.</param>
            <returns>
            	<c>true</c> if [is A member of group] [the specified group type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.ExecuteLDAPQuery">
            <summary>
            Executes the LDAP query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.ExecuteLDAPQuery(System.String)">
            <summary>
            Executes the LDAP query.
            </summary>
            <param name="testLDapQuery">The test L dap query.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStoreGroup.StoreGroupDeleted">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStoreGroup.StoreGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStoreGroup.StoreGroupUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStoreGroup.StoreGroupRenamed">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStoreGroup.StoreGroupMemberCreated">
            <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.Members">
            <summary>
            Gets the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.StoreGroupId">
            <summary>
            Gets the store group id.
            </summary>
            <value>The store group id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.Store">
            <summary>
            Gets the store.
            </summary>
            <value>The store.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.LDAPQuery">
            <summary>
            Gets the LDAP query.
            </summary>
            <value>The LDAP query.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroup.GroupType">
            <summary>
            Gets the type of the group.
            </summary>
            <value>The type of the group.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManItem">
            <summary>
            Represents an AzManItem stored on Sql Server.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManItem">
            <summary>
            Interface for all AzMan Items
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.Update(System.String)">
            <summary>
            Updates the specified application description.
            </summary>
            <param name="newItemDescription">The new itemName description.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.Rename(System.String)">
            <summary>
            Renames the specified application with a new application name.
            </summary>
            <param name="newItemName">New name of the itemName.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.Delete">
            <summary>
            Deletes this Item.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.HasMembers">
            <summary>
            Determines whether this instance has members.
            </summary>
            <returns>
            	<c>true</c> if this instance has members; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CreateAuthorization(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,NetSqlAzMan.Interfaces.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates the authorization.
            </summary>
            <param name="owner">The owner.</param>
            <param name="ownerSidWhereDefined">The owner sid where defined.</param>
            <param name="sid">The object owner.</param>
            <param name="sidWhereDefined">The object owner where defined.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetMembers">
            <summary>
            Gets the members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetItemsWhereIAmAMember">
            <summary>
            Gets the Items where I'am a member.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.AddMember(NetSqlAzMan.Interfaces.IAzManItem)">
            <summary>
            Adds the member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.RemoveMember(NetSqlAzMan.Interfaces.IAzManItem)">
            <summary>
            Removes the member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAuthorizations">
            <summary>
            Gets the authorizations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAuthorizations(NetSqlAzMan.Interfaces.AuthorizationType)">
            <summary>
            Gets the authorizations.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAuthorizationsOfMember(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the authorizations by SID.
            </summary>
            <param name="sid">The member owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAuthorizationsOfOwner(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the authorizations by Owner SID.
            </summary>
            <param name="owner">The Owner owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAuthorizations(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the authorizations by Owner SID and Member SID.
            </summary>
            <param name="owner">The Owner owner.</param>
            <param name="sid">The member owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAuthorization(System.Int32)">
            <summary>
            Gets the authorization.
            </summary>
            <param name="authorizationId">The authorization id.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.BeginCheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.BeginCheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.EndCheckAccess(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.EndCheckAccessForDBUsers(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CreateDelegateAuthorization(System.Security.Principal.WindowsIdentity,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates the delegation [Windows Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
            <returns>IAzManAuthorization</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CreateDelegateAuthorization(NetSqlAzMan.Interfaces.IAzManDBUser,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates the delegation [DB Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
            <returns>IAzManAuthorization</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.DeleteDelegateAuthorization(System.Security.Principal.WindowsIdentity,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType)">
            <summary>
            Removes the delegate [Windows Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.DeleteDelegateAuthorization(NetSqlAzMan.Interfaces.IAzManDBUser,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType)">
            <summary>
            Removes the delegate [DB Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAttributes">
            <summary>
            Gets the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.ReloadBizRule(System.String,NetSqlAzMan.BizRuleSourceLanguage)">
            <summary>
            Reloads the biz rule.
            </summary>
            <param name="bizRule">The biz rule.</param>
            <param name="bizRuleScriptLanguage">The biz rule script language.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.ClearBizRule">
            <summary>
            Clears the biz rule.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManItem.LoadBizRuleAssembly">
            <summary>
            Loads the biz rule compiled assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.ItemId">
            <summary>
            Gets the itemName id.
            </summary>
            <value>The itemName id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Application">
            <summary>
            Gets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.BizRuleSource">
            <summary>
            Gets the biz rule.
            </summary>
            <value>The biz rule.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.BizRuleSourceLanguage">
            <summary>
            Gets the biz rule script language.
            </summary>
            <value>The biz rule script language.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.ItemType">
            <summary>
            Is the type of the Item (Role, Task or Operation).
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Members">
            <summary>
            Gets the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.ItemsWhereIAmAMember">
            <summary>
            Gets the items where I am A member.
            </summary>
            <value>The items where I am A member.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Authorizations">
            <summary>
            Gets the authorizations.
            </summary>
            <value>The authorizations.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManItem.Item(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the <see cref="T:IAzManAuthorization[]"/> with the specified owner.
            </summary>
            <value></value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.ItemAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.ItemDeleted">
            <summary>
            Occurs after a SqlAzManItem object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.ItemUpdated">
            <summary>
            Occurs after a SqlAzManItem object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.BizRuleUpdated">
            <summary>
            Occurs after a SqlAzManItem Biz Rule has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.ItemRenamed">
            <summary>
            Occurs after a SqlAzManItem object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.AuthorizationCreated">
            <summary>
            Occurs after an Authorization object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.DelegateCreated">
            <summary>
            Occurs after a Delegated has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.DelegateDeleted">
            <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.MemberAdded">
            <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManItem.MemberRemoved">
            <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.Update(System.String)">
            <summary>
            Updates the specified itemName description.
            </summary>
            <param name="newItemDescription">The new itemName description.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetMembers">
            <summary>
            Gets the members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetItemsWhereIAmAMember">
            <summary>
            Gets the Items where I'am a member.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.MembershipAllowed(NetSqlAzMan.Interfaces.IAzManItem,NetSqlAzMan.Interfaces.IAzManItem)">
            <summary>
            Determines whether an Item can be a member of a parent Item.
            </summary>
            <param name="parentItem">The parent itemName.</param>
            <param name="childItem">The child itemName.</param>
            <returns>
            	<c>true</c> if this instance [can be an itemName A son of] the specified parent itemName; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.AddMember(NetSqlAzMan.Interfaces.IAzManItem)">
            <summary>
            Adds the member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.RemoveMember(NetSqlAzMan.Interfaces.IAzManItem)">
            <summary>
            Removes the member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.Rename(System.String)">
            <summary>
            Renames the specified itemName with a new itemName name.
            </summary>
            <param name="newItemName">New name of the itemName.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.LoadBizRuleAssembly">
            <summary>
            Loads the biz rule compiled assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.ClearBizRule">
            <summary>
            Clears the biz rule.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.ReloadBizRule(System.String,NetSqlAzMan.BizRuleSourceLanguage)">
            <summary>
            Reloads the biz rule.
            </summary>
            <param name="bizRule">The biz rule.</param>
            <param name="bizRuleLanguage">The biz rule language.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.Delete">
            <summary>
            Deletes this Item.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.HasMembers">
            <summary>
            Determines whether [has child items].
            </summary>
            <returns>
            	<c>true</c> if [has child items]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CreateAuthorization(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,NetSqlAzMan.Interfaces.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates the authorization.
            </summary>
            <param name="owner">The owner owner.</param>
            <param name="ownerSidWhereDefined">The owner sid where defined.</param>
            <param name="sid">The object owner.</param>
            <param name="sidWhereDefined">The object owner where defined.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAuthorizations(NetSqlAzMan.Interfaces.AuthorizationType)">
            <summary>
            Gets the authorizations.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAuthorizations">
            <summary>
            Gets the authorizations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAuthorizations(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the authorizations.
            </summary>
            <param name="owner">The owner Sid.</param>
            <param name="Sid">The member sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAuthorizationsOfMember(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the authorizations by SID.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAuthorizationsOfOwner(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the authorizations by Owner SID.
            </summary>
            <param name="owner">The owner Sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAuthorization(System.Int32)">
            <summary>
            Gets the authorization.
            </summary>
            <param name="authorizationId">The authorization id.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users only].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users only].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users only].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [FOR Windows Users only].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.BeginCheckAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.BeginCheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.BeginCheckAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.AsyncCallback,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access in async way [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="callBack">The call back.</param>
            <param name="stateObject">The state object.</param>
            <param name="attributes">The attributes readed.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>AuthorizationType</returns>
            <remarks>
            	<para>Remeber to: </para>
            	<para>1) add "Asynchronous Processing=true" in the Storage Connection String</para>
            	<para>2) Storage Connection must be manually opened and closed.</para>
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.EndCheckAccess(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.EndCheckAccess(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR Windows Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.EndCheckAccessForDBUsers(System.IAsyncResult)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.EndCheckAccessForDBUsers(System.IAsyncResult,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Ends the check access [FOR DB Users ONLY].
            </summary>
            <param name="asyncResult">The async authorizationType.</param>
            <param name="attributes">The attributes readed.</param>
            <returns>AuthorizationType</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CreateDelegateAuthorization(System.Security.Principal.WindowsIdentity,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates the delegation [Windows Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
            <returns>IAzManAuthorization</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CreateDelegateAuthorization(NetSqlAzMan.Interfaces.IAzManDBUser,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates the delegation [DB Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
            <returns>IAzManAuthorization</returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.DeleteDelegateAuthorization(System.Security.Principal.WindowsIdentity,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType)">
            <summary>
            Removes the delegate [Windows Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.DeleteDelegateAuthorization(NetSqlAzMan.Interfaces.IAzManDBUser,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.RestrictedAuthorizationType)">
            <summary>
            Removes the delegate [DB Users].
            </summary>
            <param name="delegatingUser">The delegating user.</param>
            <param name="delegateUser">The delegate user.</param>
            <param name="authorizationType">Type of the authorization.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAttributes">
            <summary>
            Gets the itemName attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.GetAttribute(System.String)">
            <summary>
            Gets the itemName attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an itemName attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.areEquals(NetSqlAzMan.Interfaces.IAzManAuthorization,NetSqlAzMan.Interfaces.IAzManAuthorization)">
            <summary>
            Detect if auth1 is the same of auth2
            </summary>
            <param name="auth1">The auth1.</param>
            <param name="auth2">The auth2.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManItem.ClearBizRuleAssemblyCache">
            <summary>
            Clears the biz rule assembly cache.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.ItemDeleted">
            <summary>
            Occurs after a SqlAzManItem object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.ItemUpdated">
            <summary>
            Occurs after a SqlAzManItem object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.BizRuleUpdated">
            <summary>
            Occurs after a Biz Rule has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.ItemRenamed">
            <summary>
            Occurs after a SqlAzManItem object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.AuthorizationCreated">
            <summary>
            Occurs after an Authorization object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.DelegateCreated">
            <summary>
            Occurs after a Delegate has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.DelegateDeleted">
            <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.MemberAdded">
            <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.MemberRemoved">
            <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManItem.ItemAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Authorizations">
            <summary>
            Gets the authorizations.
            </summary>
            <value>The authorizations.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Members">
            <summary>
            Gets the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.ItemsWhereIAmAMember">
            <summary>
            Gets the items where I am A member.
            </summary>
            <value>The items where I am A member.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.NetSqlAzMan#Interfaces#IAzManItem#ItemId">
            <summary>
            Gets the itemName id.
            </summary>
            <value>The itemName id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.ItemType">
            <summary>
            Gets the type of the itemName.
            </summary>
            <value>The type of the itemName.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Application">
            <summary>
            Gets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.BizRuleSource">
            <summary>
            Gets the biz rule.
            </summary>
            <value>The biz rule.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.BizRuleSourceLanguage">
            <summary>
            Gets the biz rule source language.
            </summary>
            <value>The biz rule script language.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManItem.Item(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the <see cref="T:IAzManAuthorization[]"/> with the specified owner.
            </summary>
            <value></value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStoreAttribute">
            <summary>
            Store Attribute
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreAttribute.Update(System.String,System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreAttribute.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManAuthorization">
            <summary>
            Represents an AzManAuthorization stored on Sql Server.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManAuthorization">
            <summary>
            Interfaces interface for all AzManAuthorizations
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.Update(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,NetSqlAzMan.Interfaces.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Updates the specified authorization type.
            </summary>
            <param name="Owner">The owner.</param>
            <param name="sid">The sid.</param>
            <param name="sidWhereDefined">The sid where defined.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.GetAttributes">
            <summary>
            Gets the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.GetMemberInfo(System.String@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="displayName">Display Name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManAuthorization.GetOwnerInfo(System.String@)">
            <summary>
            Gets the owner info.
            </summary>
            <param name="displayName">Display Name of the owner.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.AuthorizationId">
            <summary>
            Gets the authorization id.
            </summary>
            <value>The authorization id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.Item">
            <summary>
            Gets the itemName.
            </summary>
            <value>The itemName.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.Owner">
            <summary>
            Gets the Owner.
            </summary>
            <value>The Owner object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.OwnerSidWhereDefined">
            <summary>
            Gets the where is defined the Owner.
            </summary>
            <value>The object owner where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.SidWhereDefined">
            <summary>
            Gets the object owner where defined.
            </summary>
            <value>The object owner where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.AuthorizationType">
            <summary>
            Gets the type of the authorization.
            </summary>
            <value>The type of the authorization.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.ValidFrom">
            <summary>
            Gets the valid from.
            </summary>
            <value>The valid from.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.ValidTo">
            <summary>
            Gets the valid to.
            </summary>
            <value>The valid to.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManAuthorization.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManAuthorization.AuthorizationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManAuthorization.AuthorizationDeleted">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManAuthorization.AuthorizationUpdated">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Updated.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.Update(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,NetSqlAzMan.Interfaces.AuthorizationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Updates the specified authorization type.
            </summary>
            <param name="owner">The owner Sid.</param>
            <param name="sid">The member Sid.</param>
            <param name="sidWhereDefined">The object owner where defined.</param>
            <param name="authorizationType">Type of the authorization.</param>
            <param name="validFrom">The valid from.</param>
            <param name="validTo">The valid to.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.GetAttributes">
            <summary>
            Gets the authorization attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.GetAttribute(System.String)">
            <summary>
            Gets the authorization attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an authorization attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.GetMemberInfo(System.String@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="displayName">Display name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.GetOwnerInfo(System.String@)">
            <summary>
            Gets the owner info.
            </summary>
            <param name="displayName">Display name of the Owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorization.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManAuthorization.AuthorizationDeleted">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManAuthorization.AuthorizationUpdated">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManAuthorization.AuthorizationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.NetSqlAzMan#Interfaces#IAzManAuthorization#AuthorizationId">
            <summary>
            Gets the authorization id.
            </summary>
            <value>The authorization id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.Item">
            <summary>
            Gets the itemName.
            </summary>
            <value>The itemName.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.Owner">
            <summary>
            Gets the Owner owner.
            </summary>
            <value>The Owner owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.SID">
            <summary>
            Gets the Member owner.
            </summary>
            <value>The Member owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.SidWhereDefined">
            <summary>
            Gets the object owner where defined.
            </summary>
            <value>The object owner where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.OwnerSidWhereDefined">
            <summary>
            Gets the object owner Sid where defined.
            </summary>
            <value>The object owner where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.AuthorizationType">
            <summary>
            Gets the type of the authorization.
            </summary>
            <value>The type of the authorization.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.ValidFrom">
            <summary>
            Gets the valid from.
            </summary>
            <value>The valid from.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManAuthorization.ValidTo">
            <summary>
            Gets the valid to.
            </summary>
            <value>The valid to.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStoreGroupMember">
            <summary>
            SqlAzMan Store Group Member class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroupMember.GetMemberInfo(System.String@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="displayName">Name of the display.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroupMember.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroupMember.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroupMember.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStoreGroupMember.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStoreGroupMember.StoreGroupMemberDeleted">
            <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroupMember.StoreGroupMemberId">
            <summary>
            Gets the store group member id.
            </summary>
            <value>The store group member id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroupMember.StoreGroup">
            <summary>
            Gets the store group.
            </summary>
            <value>The store group.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroupMember.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroupMember.WhereDefined">
            <summary>
            Gets where member is defined.
            </summary>
            <value>The where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStoreGroupMember.IsMember">
            <summary>
            Gets a value indicating whether this instance is member.
            </summary>
            <value><c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManStore">
            <summary>
            Interfaces interface for all AzMan Stores
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManSecurable">
            <summary>
            Common interface for all NetSqlAzMan securable objects.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.GetManagers">
            <summary>
            Gets the managers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.GetUsers">
            <summary>
            Gets the users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.GetReaders">
            <summary>
            Gets the readers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.GrantAccessAsManager(System.String)">
            <summary>
            Grants the access as manager.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.GrantAccessAsUser(System.String)">
            <summary>
            Grants the access as user.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.GrantAccessAsReader(System.String)">
            <summary>
            Grants the access as reader.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.RevokeAccessAsManager(System.String)">
            <summary>
            Revokes the access as manager.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.RevokeAccessAsUser(System.String)">
            <summary>
            Revokes the access as user.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManSecurable.RevokeAccessAsReader(System.String)">
            <summary>
            Revokes the access as reader.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManSecurable.IAmAdmin">
            <summary>
            Gets a value indicating whether [I am admin].
            </summary>
            <value><c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManSecurable.IAmManager">
            <summary>
            Gets a value indicating whether [I am manager].
            </summary>
            <value><c>true</c> if [I am manager]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManSecurable.IAmUser">
            <summary>
            Gets a value indicating whether [I am user].
            </summary>
            <value><c>true</c> if [I am user]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManSecurable.IAmReader">
            <summary>
            Gets a value indicating whether [I am reader].
            </summary>
            <value><c>true</c> if [I am reader]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.Update(System.String)">
            <summary>
            Updates store info with the specified store description and LDap path.
            </summary>
            <param name="storeDescription">The store description.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.Rename(System.String)">
            <summary>
            Renames the specified new store name.
            </summary>
            <param name="newStoreName">New name of the store.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.Delete">
            <summary>
            Deletes current Store.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.CreateApplication(System.String,System.String)">
            <summary>
            Creates the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="applicationDescription">The application description.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetApplication(System.String)">
            <summary>
            Opens the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetApplications">
            <summary>
            Gets the applications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.CreateStoreGroup(NetSqlAzMan.Interfaces.IAzManSid,System.String,System.String,System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Creates the store group.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="lDapQuery">The ldap query.</param>
            <param name="groupType">Type of the group.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.HasStoreGroups">
            <summary>
            Determines whether [has store groups].
            </summary>
            <returns>
            	<c>true</c> if [has store groups]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetStoreGroups">
            <summary>
            Gets the store groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetStoreGroup(System.String)">
            <summary>
            Gets the store group.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetStoreGroup(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the store group.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetDBUser(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="customSid">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetDBUser(System.String)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="userName">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetDBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetAttributes">
            <summary>
            Gets the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.CheckStoreAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Store access [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>[true] for access allowd, [false] otherwise.</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManStore.CheckStoreAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Store access [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>[true] for access allowd, [false] otherwise.</returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.StoreId">
            <summary>
            Gets the store id.
            </summary>
            <value>The store id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.Item(System.String)">
            <summary>
            Gets the <see cref="T:IAzManApplication"/> with the specified application name.
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.Applications">
            <summary>
            Gets the applications.
            </summary>
            <value>The applications.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.StoreGroups">
            <summary>
            Gets the store groups.
            </summary>
            <value>The store groups.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManStore.Storage">
            <summary>
            Gets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StoreAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StoreDeleted">
            <summary>
            Occurs after a SqlAzManStore object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StoreUpdated">
            <summary>
            Occurs after a SqlAzManStore object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StoreRenamed">
            <summary>
            Occurs after a SqlAzManStore object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.ApplicationCreated">
            <summary>
            Occurs after an Application object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StoreGroupCreated">
            <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.ApplicationOpened">
            <summary>
            Occurs after an Application object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StorePermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManStore.StorePermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManApplicationAttribute">
            <summary>
            Application Attribute
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationAttribute.Update(System.String,System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationAttribute.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManAuthorizationAttribute">
            <summary>
            Authorization Attribute
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorizationAttribute.Update(System.String,System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManAuthorizationAttribute.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Cache.UserPermissionCache">
            <summary>
            UserPermissionCache class.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManUserPermissionCache">
            <summary>
            IAzManUserPermissionCache Interface.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManUserPermissionCache.CheckAccess(System.String,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Checks the access.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="validFor">The valid for.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManUserPermissionCache.CheckAccess(System.String,System.DateTime)">
            <summary>
            Checks the access.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="validFor">The valid for.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManUserPermissionCache.ItemAttributes">
            <summary>
            Gets the item attributes.
            </summary>
            <value>The item attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManUserPermissionCache.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.storage">
            <summary>
            The IAzManStorage Storage
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.storeName">
            <summary>
            The Store Name
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.applicationName">
            <summary>
            The Application Name
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.windowsIdentity">
            <summary>
            The User WindowsIdentity
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.dbUser">
            <summary>
            The DB User Identity
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.checkAccessTimeSlice">
            <summary>
            The CheckAccess Time Splice array
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.contextParameters">
            <summary>
            The Context Parameters
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.itemAttributes">
            <summary>
            The Item Attributes
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.retrieveAttributes">
            <summary>
            Gets or Sets if Retrieve Item Attributes.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.items">
            <summary>
            The Items Array
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.UserPermissionCache.dtHierarchy">
            <summary>
            The Items Hierarchy DataTable
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Cache.UserPermissionCache.#ctor(NetSqlAzMan.Interfaces.IAzManStorage,System.String,System.String,System.Security.Principal.WindowsIdentity,System.Boolean,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Cache.UserPermissionCache"/> class.
            </summary>
            <param name="storage">The storage.</param>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="retrieveAttributes">if set to <c>true</c> [retrieve attributes].</param>
            <param name="multiThreadBuild">if set to <c>true</c> [multi thread build].</param>
            <param name="contextParameters">The context parameters.</param>
        </member>
        <member name="M:NetSqlAzMan.Cache.UserPermissionCache.#ctor(NetSqlAzMan.Interfaces.IAzManStorage,System.String,System.String,NetSqlAzMan.Interfaces.IAzManDBUser,System.Boolean,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Cache.UserPermissionCache"/> class.
            </summary>
            <param name="storage">The storage.</param>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="dbUser">The db user.</param>
            <param name="retrieveAttributes">if set to <c>true</c> [retrieve attributes].</param>
            <param name="multiThreadBuild">if set to <c>true</c> [multi thread build].</param>
            <param name="contextParameters">The context parameters.</param>
        </member>
        <member name="M:NetSqlAzMan.Cache.UserPermissionCache.CheckAccess(System.String,System.DateTime,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Checks the access.
            </summary>
            <param name="itemName">Name of the operation.</param>
            <param name="validFor">The valid for.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.UserPermissionCache.CheckAccess(System.String,System.DateTime)">
            <summary>
            Checks the access.
            </summary>
            <param name="itemName">Name of the itemName.</param>
            <param name="validFor">The valid for.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Cache.UserPermissionCache.Items">
            <summary>
            Gets Item names.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.UserPermissionCache.ItemAttributes">
            <summary>
            Gets the item attributes.
            </summary>
            <value>The item attributes.</value>
        </member>
        <member name="T:NetSqlAzMan.Cache.AuthorizedItem">
            <summary>
            Authorized Item Class.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.Cache.AuthorizedItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.AuthorizedItem.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.AuthorizedItem.Authorization">
            <summary>
            Gets or sets the authorization.
            </summary>
            <value>The authorization.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.AuthorizedItem.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="T:NetSqlAzMan.BeforeCheckAccessHandler">
            <summary>
            BeforeCheckAccessHandler delegate.
            </summary>
            <param name="context">The NetSqlAzMan Security Context</param>
            <param name="attribute">The attribute</param>
        </member>
        <member name="T:NetSqlAzMan.AfterCheckAccessHandler">
            <summary>
            AfterCheckAccessHandler delegate.
            </summary>
            <param name="context">The NetSqlAzMan Security Context</param>
            <param name="attribute">The attribute</param>
            <param name="partialResult">the partial check access result</param>
        </member>
        <member name="T:NetSqlAzMan.Cache.StorageCache">
            <summary>
            Storage Cache class able to cache all Storage data without querying the DB Storage.
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.StorageCache.storage">
            <summary>
            The SqlAzMan Storage
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.StorageCache.ldapQueryResults">
            <summary>
            LDAP Query Results
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.StorageCache.itemResultCache">
            <summary>
            Item Result Cache
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Cache.StorageCache.attributesResultCache">
            <summary>
            Attributes Result Cache
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Cache.StorageCache"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Cache.StorageCache"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.BuildStorageCache">
            <summary>
            Build a cache version of the Storage.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.BuildStorageCache(System.String)">
            <summary>
            Build a cache version of the Storage.
            </summary>
            <param name="storeNameFilter">The store name filter.</param>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.BuildStorageCache(System.String,System.String)">
            <summary>
            Build a cache version of the Storage.
            </summary>
            <param name="storeNameFilter">The store name filter.</param>
            <param name="applicationNameFilter">The application name filter.</param>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.String[],System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [WINDOWS USERS ONLY].
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="userSSid">The user S sid.</param>
            <param name="groupsSSid">The groups S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.String[],System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [WINDOWS USERS ONLY].
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="userSSid">The user S sid.</param>
            <param name="groupsSSid">The groups S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [DB USERS ONLY].
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="DBuserSSid">The D buser S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="attributes">The attributes.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.CheckAccess(System.String,System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the access [DB USERS ONLY].
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="itemName">Name of the item.</param>
            <param name="DBuserSSid">The D buser S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="operationsOnly">if set to <c>true</c> [operations only].</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.GetAuthorizedItems(System.String,System.String,System.String,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Gets the authorized Items.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="DBuserSSid">The D buser S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Cache.StorageCache.GetAuthorizedItems(System.String,System.String,System.String,System.String[],System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Gets the authorized Items.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="userSSid">The user S sid.</param>
            <param name="groupsSSid">The groups S sid.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Cache.StorageCache.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.StorageCache.Storage">
            <summary>
            Gets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="T:NetSqlAzMan.NetSqlAzManAuthorizationAttribute">
            <summary>
            Authorization Attribute class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.NetSqlAzManAuthorizationAttribute"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.HasAccess(NetSqlAzMan.NetSqlAzManAuthorizationContext,System.String,System.String)">
            <summary>
            Determines whether the specified control name has access.
            </summary>
            <param name="context">The context.</param>
            <param name="controlName">Name of the control.</param>
            <param name="itemName">Name of the item.</param>
            <returns>
            	<c>true</c> if the specified control name has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.ContextParameters">
            <summary>
            Gets or sets the context parameters.
            </summary>
            <value>The context parameters.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.ValidFor">
            <summary>
            Gets or sets the valid for.
            </summary>
            <value>The valid for.</value>
        </member>
        <member name="P:NetSqlAzMan.NetSqlAzManAuthorizationAttribute.OperationsOnly">
            <summary>
            Gets or sets a value indicating whether [operations only].
            </summary>
            <value><c>true</c> if [operations only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManApplicationGroup">
            <summary>
            Interfaces interface for all Application Groups.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Update(System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Updates the specified object owner.
            </summary>
            <param name="description">The description.</param>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.UpdateLDapQuery(System.String)">
            <summary>
            Updates the L dap query.
            </summary>
            <param name="newLdapQuery">The new ldap query.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Rename(System.String)">
            <summary>
            Renames the specified new name.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.CreateApplicationGroupMember(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,System.Boolean)">
            <summary>
            Creates the application group member.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="whereDefined">Where member is defined.</param>
            <param name="isMember">if set to <c>true</c> [is member].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.GetApplicationGroupMembers">
            <summary>
            Gets the application group members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.GetApplicationGroupNonMembers">
            <summary>
            Gets the application group non members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.GetApplicationGroupAllMembers">
            <summary>
            Gets the A application group all members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.GetApplicationGroupMember(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the application group member.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.IsInGroup(NetSqlAzMan.Interfaces.IAzManDBUser)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="dbUser">The db user.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ExecuteLDAPQuery">
            <summary>
            Executes the LDAP query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ExecuteLDAPQuery(System.String)">
            <summary>
            Executes the LDAP query.
            </summary>
            <param name="testLDapQuery">The test LDap query.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ApplicationGroupId">
            <summary>
            Gets the application group id.
            </summary>
            <value>The application group id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Application">
            <summary>
            Gets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.LDAPQuery">
            <summary>
            Gets the LDAP query.
            </summary>
            <value>The LDAP query.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.GroupType">
            <summary>
            Gets the type of the group.
            </summary>
            <value>The type of the group.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroup.Members">
            <summary>
            Gets the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ApplicationGroupDeleted">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ApplicationGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ApplicationGroupUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ApplicationGroupRenamed">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplicationGroup.ApplicationGroupMemberCreated">
            <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationDeletedDelegate">
            <summary>
            Delegate for Application Deleted events.
            </summary>
            <param name="ownerStore">The owner store.</param>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationRenamedDelegate">
            <summary>
            Delegate for Application Renamed events.
            </summary>
            <param name="application">The application.</param>
            <param name="oldName">The old name.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationUpdatedDelegate">
            <summary>
            Delegate for Application Updated events.
            </summary>
            <param name="application">The application.</param>
            <param name="oldDescription">The old description.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupCreatedDelegate">
            <summary>
            Delegate for ApplicationGroupCreated events.
            </summary>
            <param name="application">The application.</param>
            <param name="applicationGroupCreated">The application group created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ItemCreatedDelegate">
            <summary>
            Delegate for ItemCreated events.
            </summary>
            <param name="application">The application.</param>
            <param name="itemCreated">The itemName created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationPermissionGrantedDelegate">
            <summary>
            Delegate for ApplicationPermissionGranted events
            </summary>
            <param name="application">The Application.</param>
            <param name="sqlLogin">The SQL Login.</param>
            <param name="role">The NetSqlAzMan Role.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationPermissionRevokedDelegate">
            <summary>
            Delegate for ApplicationPermissionRevoked events
            </summary>
            <param name="application">The Application</param>
            <param name="sqlLogin">The SQL Login</param>
            <param name="role">The NetSqlAzMan Role.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupDeletedDelegate">
            <summary>
            Delegate for ApplicationGroup Deleted events.
            </summary>
            <param name="ownerApplication">The owner application.</param>
            <param name="applicationGroupName">Name of the applicationGroup.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupRenamedDelegate">
            <summary>
            Delegate for ApplicationGroup Renamed events.
            </summary>
            <param name="applicationGroup">The applicationGroup.</param>
            <param name="oldName">The old name.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupUpdatedDelegate">
            <summary>
            Delegate for ApplicationGroup Updated events.
            </summary>
            <param name="applicationGroup">Application Group updated</param>
            <param name="oldSid">The old SID</param>
            <param name="oldDescription">The old Description</param>
            <param name="oldGroupType">The old Group Type</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupLDAPQueryUpdatedDelegate">
            <summary>
            Delegate for ApplicationGroup LDAPQueryUpdated events.
            </summary>
            <param name="applicationGroup">Application Group updated</param>
            <param name="oldLDapQuery">The old LDapQuery</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupMemberCreatedDelegate">
            <summary>
            Delegate for ItemCreated events.
            </summary>
            <param name="applicationGroup">The applicationGroup.</param>
            <param name="memberCreated">The member created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupDeletedDelegate">
            <summary>
            Delegate for StoreGroup Deleted events.
            </summary>
            <param name="ownerStore">The owner Store.</param>
            <param name="storeGroupName">Name of the storeGroup.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupRenamedDelegate">
            <summary>
            Delegate for StoreGroup Renamed events.
            </summary>
            <param name="storeGroup">The storeGroup.</param>
            <param name="oldName">The old name.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupUpdatedDelegate">
            <summary>
            Delegate for StoreGroup Updated events.
            </summary>
            <param name="storeGroup">Application Group updated</param>
            <param name="oldSid">The old SID</param>
            <param name="oldDescription">The old Description</param>
            <param name="oldGroupType">The old Group Type</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupLDAPQueryUpdatedDelegate">
            <summary>
            Delegate for StoreGroup LDAPQueryUpdated events.
            </summary>
            <param name="storeGroup">Application Group updated</param>
            <param name="oldLDapQuery">The old LDapQuery</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupMemberCreatedDelegate">
            <summary>
            Delegate for ItemCreated events.
            </summary>
            <param name="storeGroup">The storeGroup.</param>
            <param name="memberCreated">The member created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.AuthorizationDeletedDelegate">
            <summary>
            Delegate for Authorization Deleted events.
            </summary>
            <param name="ownerItem">The owner Item.</param>
            <param name="owner">Owner Sid of the authorization.</param>
            <param name="sid">Sid of the authorization.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.AuthorizationUpdatedDelegate">
            <summary>
            Delegate for Authorization Updated events.
            </summary>
            <param name="authorization">The authorization updated object.</param>
            <param name="oldOwner">The old Owner.</param>
            <param name="oldOwnerSidWhereDefined">The old OwnerSidWhereDefined.</param>
            <param name="oldSid">The old Sid.</param>
            <param name="oldSidWhereDefined">The old SidWhereDefined.</param>
            <param name="oldAuthorizationType">The old AuthorizationType.</param>
            <param name="oldValidFrom">The old ValidFrom.</param>
            <param name="oldValidTo">The old ValidTo.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.AttributeCreatedDelegate`1">
            <summary>
            Delegate for AttributeCreated events.
            </summary>
            <param name="owner">The Owner.</param>
            <param name="attributeCreated">The Attribute created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.AttributeDeletedDelegate`1">
            <summary>
            Delegate for AttributeDeleted events.
            </summary>
            <param name="owner">The owner Authorization.</param>
            <param name="key">The key of the AuthorizationAttribute.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.AttributeUpdatedDelegate`1">
            <summary>
            Delegate for AttributeUpdated events.
            </summary>
            <param name="attribute">The attribute object.</param>
            <param name="oldKey">The old key.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationGroupMemberDeletedDelegate">
            <summary>
            Delegate for ApplicationGroupMember Deleted events.
            </summary>
            <param name="ownerApplicationGroup">The owner Application Group.</param>
            <param name="sid">The owner of the ApplicationGroupMember.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupMemberDeletedDelegate">
            <summary>
            Delegate for StoreGroupMember Deleted events.
            </summary>
            <param name="ownerStoreGroup">The owner Store Group.</param>
            <param name="sid">The owner of the StoreGroupMember.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ItemDeletedDelegate">
            <summary>
            Delegate for Item Deleted events.
            </summary>
            <param name="applicationContainer">The Application Container.</param>
            <param name="itemName">Name of the itemName.</param>
            <param name="itemType">Type of the itemName.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ItemRenamedDelegate">
            <summary>
            Delegate for Item Renamed events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="oldName">The old name.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ItemUpdatedDelegate">
            <summary>
            Delegate for Item Updated events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="oldDescription">The old description.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.BizRuleUpdatedDelegate">
            <summary>
            Delegate for Biz Rule Updated events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="oldBizRule">The old Biz Rule.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.AuthorizationCreatedDelegate">
            <summary>
            Delegate for AuthorizationCreated events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="authorizationCreated">The Authorization created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.DelegateCreatedDelegate">
            <summary>
            Delegate for DelegationCreated events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="delegationCreated">The Delegation created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.DelegateDeletedDelegate">
            <summary>
            Delegate for DelegationDeleted events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="delegatingUserSid">The delegating User.</param>
            <param name="delegatedUserSid">The delegated User.</param>
            <param name="authorizationType">The authorization Type.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.MemberAddedDelegate">
            <summary>
            Delegate for MemberAdded events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="memberAdded">The member added.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.MemberRemovedDelegate">
            <summary>
            Delegate for MemberRemoved events.
            </summary>
            <param name="item">The itemName.</param>
            <param name="memberRemoved">The member removed.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreCreatedDelegate">
            <summary>
            Delegate for StoreCreated events.
            </summary>
            <param name="storeCreated">The Store created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreOpenedDelegate">
            <summary>
            Delegate for StoreOpened events.
            </summary>
            <param name="store">The Store opened.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.TransactionBeginnedDelegate">
            <summary>
            Delegate for Begin Transaction Events.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.ENS.TransactionTerminatedDelegate">
            <summary>
            Delegate for Commit/Rollback Transaction Events.
            </summary>
            <param name="success"></param>
        </member>
        <member name="T:NetSqlAzMan.ENS.NetSqlAzManModeChangeDelegate">
            <summary>
            Delegate for NetSqlAzMan Mode Changed Events.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreDeletedDelegate">
            <summary>
            Delegate for Store Deleted events.
            </summary>
            <param name="ownerStorage">The owner Storage.</param>
            <param name="storeName">Name of the store.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreRenamedDelegate">
            <summary>
            Delegate for Store Renamed events.
            </summary>
            <param name="store">The store.</param>
            <param name="oldName">The old name.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreUpdatedDelegate">
            <summary>
            Delegate for Store Updated events.
            </summary>
            <param name="store">The store.</param>
            <param name="oldDescription">The old description.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationCreatedDelegate">
            <summary>
            Delegate for StoreChildStoreCreated events.
            </summary>
            <param name="store">The store.</param>
            <param name="applicationCreated">The Application created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StoreGroupCreatedDelegate">
            <summary>
            Delegate for StoreCreated events.
            </summary>
            <param name="store">The store.</param>
            <param name="storeGroupCreated">The StoreGroup created.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.ApplicationOpenedDelegate">
            <summary>
            Delegate for ApplicationOpened events.
            </summary>
            <param name="application">The Application opened.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StorePermissionGrantedDelegate">
            <summary>
            Delegate for StorePermissionGranted events
            </summary>
            <param name="store">The Store</param>
            <param name="sqlLogin">The SQL Login</param>
            <param name="role">The NetSqlAzMan Role.</param>
        </member>
        <member name="T:NetSqlAzMan.ENS.StorePermissionRevokedDelegate">
            <summary>
            Delegate for StorePermissionRevoked events
            </summary>
            <param name="store">The Store</param>
            <param name="sqlLogin">The SQL Login</param>
            <param name="role">The NetSqlAzMan Role.</param>
        </member>
        <member name="T:NetSqlAzMan.Cache.ItemCheckAccessResult">
            <summary>
            ItemCheckAccessResult cache result.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Cache.ItemCheckAccessResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Cache.ItemCheckAccessResult"/> class.
            </summary>
            <param name="itemName">Name of the item.</param>
        </member>
        <member name="M:NetSqlAzMan.Cache.ItemCheckAccessResult.ClonedForItem(System.String)">
            <summary>
            Cloneds for item.
            </summary>
            <param name="itemName">Name of the item.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Cache.ItemCheckAccessResult.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.ItemCheckAccessResult.AuthorizationType">
            <summary>
            Gets or sets the type of the authorization.
            </summary>
            <value>The type of the authorization.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.ItemCheckAccessResult.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.ItemCheckAccessResult.ValidFrom">
            <summary>
            Gets or sets the valid from.
            </summary>
            <value>The valid from.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.ItemCheckAccessResult.ValidTo">
            <summary>
            Gets or sets the valid to.
            </summary>
            <value>The valid to.</value>
        </member>
        <member name="P:NetSqlAzMan.Cache.ItemCheckAccessResult.Inherited">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NetSqlAzMan.Cache.ItemCheckAccessResult"/> is inherited.
            </summary>
            <value><c>true</c> if inherited; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManStore">
            <summary>
            Represents an AzManStore stored on Sql Server.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.Update(System.String)">
            <summary>
            Updates store info with the specified store description and LDap path.
            </summary>
            <param name="storeDescription">The store description.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.Rename(System.String)">
            <summary>
            Renames the specified new store name.
            </summary>
            <param name="newStoreName">New name of the store.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.Delete">
            <summary>
            Deletes current Store.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.CreateApplication(System.String,System.String)">
            <summary>
            Creates the specified application name.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="applicationDescription">The application description.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetApplication(System.String)">
            <summary>
            Opens the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetApplications">
            <summary>
            Gets the applications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.CreateStoreGroup(NetSqlAzMan.Interfaces.IAzManSid,System.String,System.String,System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Creates the store group.
            </summary>
            <param name="storeGroupSid">The store group sid.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="lDapQuery">The ldap query.</param>
            <param name="groupType">Type of the group.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.HasStoreGroups">
            <summary>
            Determines whether [has store groups].
            </summary>
            <returns>
            	<c>true</c> if [has store groups]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetStoreGroups">
            <summary>
            Gets the store groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetStoreGroup(System.String)">
            <summary>
            Gets the store group.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetStoreGroup(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the store group.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetAttributes">
            <summary>
            Gets the store attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetAttribute(System.String)">
            <summary>
            Gets the store attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.CreateAttribute(System.String,System.String)">
            <summary>
            Creates a store attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.CheckStoreAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Store access. [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.CheckStoreAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Store access [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>
            [true] for access allowd, [false] otherwise.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetDBUser(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="customSid">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetDBUser(System.String)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="userName">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetDBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetManagers">
            <summary>
            Gets the managers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetUsers">
            <summary>
            Gets the users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GetReaders">
            <summary>
            Gets the readers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GrantAccessAsManager(System.String)">
            <summary>
            Grants the access as manager.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GrantAccessAsUser(System.String)">
            <summary>
            Grants the access as user.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.GrantAccessAsReader(System.String)">
            <summary>
            Grants the access as reader.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.RevokeAccessAsManager(System.String)">
            <summary>
            Revokes the access as manager.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.RevokeAccessAsUser(System.String)">
            <summary>
            Revokes the access as user.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManStore.RevokeAccessAsReader(System.String)">
            <summary>
            Revokes the access as reader.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StoreDeleted">
            <summary>
            Occurs after a SqlAzManStore object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StoreUpdated">
            <summary>
            Occurs after a SqlAzManStore object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StoreRenamed">
            <summary>
            Occurs after a SqlAzManStore object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.ApplicationCreated">
            <summary>
            Occurs after an Application object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StoreGroupCreated">
            <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.ApplicationOpened">
            <summary>
            Occurs after an Application object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StoreAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StorePermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManStore.StorePermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.StoreGroups">
            <summary>
            Gets the store groups.
            </summary>
            <value>The store groups.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.Applications">
            <summary>
            Gets the applications.
            </summary>
            <value>The applications.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.Storage">
            <summary>
            Gets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.NetSqlAzMan#Interfaces#IAzManStore#StoreId">
            <summary>
            Gets the store id.
            </summary>
            <value>The store id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.Item(System.String)">
            <summary>
            Gets the <see cref="T:IAzManApplication"/> with the specified application name.
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.IAmAdmin">
            <summary>
            Gets a value indicating whether [I am admin].
            </summary>
            <value><c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.IAmManager">
            <summary>
            Gets a value indicating whether [I am manager].
            </summary>
            <value><c>true</c> if [I am manager]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.IAmUser">
            <summary>
            Gets a value indicating whether [I am user].
            </summary>
            <value><c>true</c> if [I am user]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManStore.IAmReader">
            <summary>
            Gets a value indicating whether [I am reader].
            </summary>
            <value><c>true</c> if [I am reader]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManApplication">
            <summary>
            Interfaces Interface for all AzManApplications
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.Update(System.String)">
            <summary>
            Updates the specified application description.
            </summary>
            <param name="applicationDescription">The application description.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.Rename(System.String)">
            <summary>
            Renames application name with the specified new application name.
            </summary>
            <param name="newApplicationName">New name of the application.</param>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.Delete">
            <summary>
            Deletes this application.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.CreateItem(System.String,System.String,NetSqlAzMan.Interfaces.ItemType)">
            <summary>
            Creates the itemName.
            </summary>
            <param name="itemName">Name of the itemName.</param>
            <param name="itemDescription">The itemName description.</param>
            <param name="itemType">Type of the itemName.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetItem(System.String)">
            <summary>
            Gets the itemName.
            </summary>
            <param name="itemName">Name of the itemName.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetItems(NetSqlAzMan.Interfaces.ItemType)">
            <summary>
            Gets the items.
            </summary>
            <param name="itemType">Type of the itemName.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.HasItems(NetSqlAzMan.Interfaces.ItemType)">
            <summary>
            Determines whether [has child items].
            </summary>
            <param name="itemType">Type of the itemName.</param>
            <returns>
            	<c>true</c> if [has child items]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.CreateApplicationGroup(NetSqlAzMan.Interfaces.IAzManSid,System.String,System.String,System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Creates the application group.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="lDapQuery">The ldap query.</param>
            <param name="groupType">Type of the group.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.HasApplicationGroups">
            <summary>
            Determines whether [has application groups].
            </summary>
            <returns>
            	<c>true</c> if [has application groups]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetApplicationGroups">
            <summary>
            Gets the application groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetApplicationGroup(System.String)">
            <summary>
            Gets the application group.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetApplicationGroup(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the application group.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetDBUser(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="customSid">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetDBUser(System.String)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="userName">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetDBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetAttributes">
            <summary>
            Gets the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.CheckApplicationAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Application access [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>[true] for access allowd, [false] otherwise.</returns>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplication.CheckApplicationAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Application access [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>[true] for access allowd, [false] otherwise.</returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationId">
            <summary>
            Gets the application id.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.Store">
            <summary>
            Gets the store.
            </summary>
            <value>The store.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.Item(System.String)">
            <summary>
            Gets the <see cref="T:IAzManItem"/> with the specified itemName name.
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationGroups">
            <summary>
            Gets the application groups.
            </summary>
            <value>The application groups.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationDeleted">
            <summary>
            Occurs after a SqlAzManApplication object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationUpdated">
            <summary>
            Occurs after a SqlAzManApplication object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationRenamed">
            <summary>
            Occurs after a SqlAzManApplication object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationGroupCreated">
            <summary>
            Occurs after an Application Group object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ItemCreated">
            <summary>
            Occurs after an Item object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationPermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplication.ApplicationPermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.CodeDom.CodeDomGenerator">
            <summary>
            Code Dom Generator
            </summary>
        </member>
        <member name="M:NetSqlAzMan.CodeDom.CodeDomGenerator.GenerateCheckAccessHelperClass(System.String,System.String,System.Boolean,System.Boolean,NetSqlAzMan.Interfaces.IAzManApplication,NetSqlAzMan.CodeDom.Language)">
            <summary>
            Generate a CodeCompileUnit For NetSqlAzMan Check Access Helper Class
            </summary>
            <param name="nameSpace">The namespace</param>
            <param name="className">Name of the class.</param>
            <param name="rolesAllowed">if set to <c>true</c> [roles allowed].</param>
            <param name="tasksAllowed">if set to <c>true</c> [tasks allowed].</param>
            <param name="application">The IAzManApplication</param>
            <param name="language">The language.</param>
            <returns>CodeCompileUnit generated</returns>
        </member>
        <member name="M:NetSqlAzMan.CodeDom.CodeDomGenerator.GenerateItemConstants(System.String,System.Boolean,System.Boolean,NetSqlAzMan.Interfaces.IAzManApplication,NetSqlAzMan.CodeDom.Language)">
            <summary>
            Generates the item constants.
            </summary>
            <param name="nameSpace">The name space.</param>
            <param name="rolesAllowed">if set to <c>true</c> [roles allowed].</param>
            <param name="tasksAllowed">if set to <c>true</c> [tasks allowed].</param>
            <param name="application">The application.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.CodeDom.CodeDomGenerator.GenerateSourceCode(System.CodeDom.CodeCompileUnit,NetSqlAzMan.CodeDom.Language)">
            <summary>
            Generate SourceCode from a CodeCompileUnit
            </summary>
            <param name="compileunit">The CodeCompileUnit.</param>
            <param name="language">Choosed Source Language.</param>
            <returns>The String with Source Code.</returns>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManApplicationGroupMember">
            <summary>
            SqlAzMan Application Group Member class.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember">
            <summary>
            Interfaces interface for all Application Group Members.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.GetMemberInfo(System.String@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="displayName">Name of the display.</param>
            <returns></returns>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.ApplicationGroupMemberId">
            <summary>
            Gets the application group member id.
            </summary>
            <value>The application group member id.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.ApplicationGroup">
            <summary>
            Gets the application group.
            </summary>
            <value>The application group.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.WhereDefined">
            <summary>
            Gets where member is defined.
            </summary>
            <value>The where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.IsMember">
            <summary>
            Gets a value indicating whether this instance is member.
            </summary>
            <value><c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:NetSqlAzMan.Interfaces.IAzManApplicationGroupMember.ApplicationGroupMemberDeleted">
            <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroupMember.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroupMember.GetMemberInfo(System.String@)">
            <summary>
            Gets the member info.
            </summary>
            <param name="displayName">Name of the display.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroupMember.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroupMember.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroupMember.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplicationGroupMember.ApplicationGroupMemberDeleted">
            <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroupMember.ApplicationGroupMemberId">
            <summary>
            Gets the application group member id.
            </summary>
            <value>The application group member id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroupMember.ApplicationGroup">
            <summary>
            Gets the application group.
            </summary>
            <value>The application group.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroupMember.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroupMember.WhereDefined">
            <summary>
            Gets where member is defined.
            </summary>
            <value>The where defined.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroupMember.IsMember">
            <summary>
            Gets a value indicating whether this instance is member.
            </summary>
            <value><c>true</c> if this instance is member; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NetSqlAzMan.CodeDom.Language">
            <summary>
            Source Code Language
            </summary>
        </member>
        <member name="F:NetSqlAzMan.CodeDom.Language.CSharp">
            <summary>
            C#.NET
            </summary>
        </member>
        <member name="F:NetSqlAzMan.CodeDom.Language.VB">
            <summary>
            VB.NET
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManApplication">
            <summary>
            Represents an AzManApplication stored on Sql Server.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.Update(System.String)">
            <summary>
            Updates the specified application description.
            </summary>
            <param name="newApplicationDescription">The new application description.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.Rename(System.String)">
            <summary>
            Renames application name with the specified new application name.
            </summary>
            <param name="newApplicationName">New name of the application.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.Delete">
            <summary>
            Deletes this application.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.CreateItem(System.String,System.String,NetSqlAzMan.Interfaces.ItemType)">
            <summary>
            Creates the itemName.
            </summary>
            <param name="itemName">Name of the itemName.</param>
            <param name="itemDescription">The itemName description.</param>
            <param name="itemType">Type of the itemName.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetItem(System.String)">
            <summary>
            Gets the <see cref="T:IAzManItem"/> with the specified itemName name.
            </summary>
            <value></value>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.HasItems(NetSqlAzMan.Interfaces.ItemType)">
            <summary>
            Determines whether [has child items].
            </summary>
            <param name="itemType">Type of the itemName.</param>
            <returns>
            	<c>true</c> if [has child items]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetItems(NetSqlAzMan.Interfaces.ItemType)">
            <summary>
            Gets the items.
            </summary>
            <param name="itemType">Type of the itemName.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.CreateApplicationGroup(NetSqlAzMan.Interfaces.IAzManSid,System.String,System.String,System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Creates the application group.
            </summary>
            <param name="applicationGroupSid">The application group sid.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="lDapQuery">The ldap query.</param>
            <param name="groupType">Type of the group.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.HasApplicationGroups">
            <summary>
            Determines whether [has application groups].
            </summary>
            <returns>
            	<c>true</c> if [has application groups]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetApplicationGroups">
            <summary>
            Gets the application groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetApplicationGroup(System.String)">
            <summary>
            Gets the application group.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetApplicationGroup(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the application group.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetAttributes">
            <summary>
            Gets the application attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetAttribute(System.String)">
            <summary>
            Gets the application attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an application attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.CheckApplicationAccess(System.Security.Principal.WindowsIdentity,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Application access [FOR Windows Users ONLY].
            </summary>
            <param name="windowsIdentity">The windows identity. System.Security.Principal.WindowsIdentity.GetCurrent() for Windows Applications and (WindowsIdentity)HttpContext.Current.User.Identity or Page.Request.LogonUserIdentity for ASP.NET Applications.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>
            [true] for access allowd, [false] otherwise.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.CheckApplicationAccess(NetSqlAzMan.Interfaces.IAzManDBUser,System.DateTime,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Checks the Application access [FOR DB Users ONLY].
            </summary>
            <param name="dbUser">The db user.</param>
            <param name="validFor">The valid for.</param>
            <param name="contextParameters">The context parameters.</param>
            <returns>
            [true] for access allowd, [false] otherwise.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetDBUser(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="customSid">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetDBUser(System.String)">
            <summary>
            Finds the DB user.
            </summary>
            <param name="userName">The custom sid.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetDBUsers">
            <summary>
            Gets the DB users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetManagers">
            <summary>
            Gets the managers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetUsers">
            <summary>
            Gets the users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GetReaders">
            <summary>
            Gets the readers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GrantAccessAsManager(System.String)">
            <summary>
            Grants the access as manager.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GrantAccessAsUser(System.String)">
            <summary>
            Grants the access as user.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.GrantAccessAsReader(System.String)">
            <summary>
            Grants the access as reader.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.RevokeAccessAsManager(System.String)">
            <summary>
            Revokes the access as manager.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.RevokeAccessAsUser(System.String)">
            <summary>
            Revokes the access as user.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplication.RevokeAccessAsReader(System.String)">
            <summary>
            Revokes the access as reader.
            </summary>
            <param name="sqlLogin">The SQL login.</param>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationDeleted">
            <summary>
            Occurs after a SqlAzManApplication object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationUpdated">
            <summary>
            Occurs after a SqlAzManApplication object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationRenamed">
            <summary>
            Occurs after a SqlAzManApplication object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationGroupCreated">
            <summary>
            Occurs after an Application Group object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ItemCreated">
            <summary>
            Occurs after an Item object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationPermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplication.ApplicationPermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.ApplicationGroups">
            <summary>
            Gets the application groups.
            </summary>
            <value>The application groups.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.NetSqlAzMan#Interfaces#IAzManApplication#ApplicationId">
            <summary>
            Gets the application id.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.Store">
            <summary>
            Gets the store.
            </summary>
            <value>The store.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.Item(System.String)">
            <summary>
            Gets the <see cref="T:IAzManItem"/> with the specified itemName name.
            </summary>
            <value></value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.IAmAdmin">
            <summary>
            Gets a value indicating whether [I am admin].
            </summary>
            <value><c>true</c> if [I am admin]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.IAmManager">
            <summary>
            Gets a value indicating whether [I am manager].
            </summary>
            <value><c>true</c> if [I am manager]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.IAmUser">
            <summary>
            Gets a value indicating whether [I am user].
            </summary>
            <value><c>true</c> if [I am user]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplication.IAmReader">
            <summary>
            Gets a value indicating whether [I am reader].
            </summary>
            <value><c>true</c> if [I am reader]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManApplicationGroup">
            <summary>
            SqlAzMan Application Group class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.Update(System.String,NetSqlAzMan.Interfaces.GroupType)">
            <summary>
            Updates the specified object owner.
            </summary>
            <param name="description">The description.</param>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.UpdateLDapQuery(System.String)">
            <summary>
            Updates the L dap query.
            </summary>
            <param name="newLdapQuery">The new ldap query.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.Rename(System.String)">
            <summary>
            Renames the specified new name.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.CreateApplicationGroupMember(NetSqlAzMan.Interfaces.IAzManSid,NetSqlAzMan.Interfaces.WhereDefined,System.Boolean)">
            <summary>
            Creates the application group member.
            </summary>
            <param name="sid">The object owner.</param>
            <param name="whereDefined">The where defined.</param>
            <param name="isMember">if set to <c>true</c> [is member].</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.GetApplicationGroupMembers">
            <summary>
            Gets the store group members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.GetApplicationGroupMember(NetSqlAzMan.Interfaces.IAzManSid)">
            <summary>
            Gets the application group member.
            </summary>
            <param name="sid">The object owner.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.GetApplicationGroupNonMembers">
            <summary>
            Gets the store group members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.GetApplicationGroupAllMembers">
            <summary>
            Gets the application group all members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.IsInGroup(System.Security.Principal.WindowsIdentity)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="windowsIdentity">The windows identity.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.IsInGroup(NetSqlAzMan.Interfaces.IAzManDBUser)">
            <summary>
            Determines whether [is in group] [the specified windows identity].
            </summary>
            <param name="dbUser">The db user.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified windows identity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.isAMemberOfGroup(System.Boolean,System.Byte[],System.Boolean,System.String,System.Byte[],System.Int32)">
            <summary>
            Determines whether [is A member of group] [the specified group type].
            </summary>
            <param name="groupType">if set to <c>true</c> [group type].</param>
            <param name="GroupSid">The group sid.</param>
            <param name="netSqlAzManMode">if set to <c>true</c> [net SQL az man mode].</param>
            <param name="rootDsePath">The root dse path.</param>
            <param name="token">The token.</param>
            <param name="userGroupsCount">The user groups count.</param>
            <returns>
            	<c>true</c> if [is A member of group] [the specified group type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.Export(System.Xml.XmlWriter,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Exports the specified XML writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="ownerOfExport">The owner of export.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.ImportChildren(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean,NetSqlAzMan.SqlAzManMergeOptions)">
            <summary>
            Imports the specified XML reader.
            </summary>
            <param name="xmlNode">The XML node.</param>
            <param name="includeWindowsUsersAndGroups">if set to <c>true</c> [include windows users and groups].</param>
            <param name="includeDBUsers">if set to <c>true</c> [include DB users].</param>
            <param name="includeAuthorizations">if set to <c>true</c> [include authorizations].</param>
            <param name="mergeOptions">The merge options.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.ExecuteLDAPQuery">
            <summary>
            Executes the LDAP query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.ExecuteLDAPQuery(System.String)">
            <summary>
            Executes the LDAP query.
            </summary>
            <param name="testLDapQuery">The test L dap query.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManApplicationGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplicationGroup.ApplicationGroupDeleted">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplicationGroup.ApplicationGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplicationGroup.ApplicationGroupUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplicationGroup.ApplicationGroupRenamed">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.SqlAzManApplicationGroup.ApplicationGroupMemberCreated">
            <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.Members">
            <summary>
            Gets the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.ApplicationGroupId">
            <summary>
            Gets the application group id.
            </summary>
            <value>The application group id.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.Application">
            <summary>
            Gets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.SID">
            <summary>
            Gets the object owner.
            </summary>
            <value>The object owner.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.LDAPQuery">
            <summary>
            Gets the LDAP query.
            </summary>
            <value>The LDAP query.</value>
        </member>
        <member name="P:NetSqlAzMan.SqlAzManApplicationGroup.GroupType">
            <summary>
            Gets the type of the group.
            </summary>
            <value>The type of the group.</value>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.WhereDefined">
            <summary>
            Position of where objects are defined
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.WhereDefined.Store">
            <summary>
            Defined at store-level
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.WhereDefined.Application">
            <summary>
            Defined at application-level
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.WhereDefined.LDAP">
            <summary>
            Defined at LDAP-level
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.WhereDefined.Local">
            <summary>
            Defined on Local machine
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.WhereDefined.Database">
            <summary>
            Defined on a Database
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.NetSqlAzManMode">
            <summary>
            .Net Sql Authorization Manager Mode
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.NetSqlAzManMode.Administrator">
            <summary>
            Administrator Mode
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.NetSqlAzManMode.Developer">
            <summary>
            Developer Mode
            </summary>
        </member>
        <member name="T:NetSqlAzMan.SqlAzManException">
            <summary>
            SqlAzMan Exception base class
            </summary>
            <remarks>
            Design Guidelines for Exceptions: http://msdn.microsoft.com/en-us/library/ms229014(VS.80).aspx
            For further details Check Data property.
            </remarks>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.SqlAzManException"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.SqlAzManException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.SqlAzManException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NetSqlAzMan.SqlAzManException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.SqlAzManException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NetSqlAzMan.Utilities.HexEncoding">
            <summary>
            Summary description for HexEncoding.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.Utilities.HexEncoding"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.GetByteCount(System.String)">
            <summary>
            Gets the byte count.
            </summary>
            <param name="hexString">The hex string.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.GetBytes(System.String,System.Int32@)">
            <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
            <param name="hexString">string to convert to byte array</param>
            <param name="discarded">number of characters in string ignored</param>
            <returns>byte array, in the same left-to-right order as the hexString</returns>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.ToString(System.Byte[])">
            <summary>
            Toes the string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.InHexFormat(System.String)">
            <summary>
            Determines if given string is in proper hexadecimal string format
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.IsHexDigit(System.Char)">
            <summary>
            Returns true is c is a hexadecimal digit (A-F, a-f, 0-9)
            </summary>
            <param name="c">Character to test</param>
            <returns>true if hex digit, false if not</returns>
        </member>
        <member name="M:NetSqlAzMan.Utilities.HexEncoding.HexToByte(System.String)">
            <summary>
            Converts 1 or 2 character string into equivalant byte value
            </summary>
            <param name="hex">1 or 2 character string</param>
            <returns>byte</returns>
        </member>
        <member name="T:NetSqlAzMan.ENS.SqlAzManENS">
            <summary>
            SqlAzMan Event Notification System.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetSqlAzMan.ENS.SqlAzManENS"/> class.
            </summary>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManApplication)">
            <summary>
            Adds an IAzManApplication publisher.
            </summary>
            <param name="publisher">The application.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManApplicationGroup)">
            <summary>
            Adds an IAzManApplicationGroup publisher.
            </summary>
            <param name="publisher">The applicationGroup.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManStoreGroup)">
            <summary>
            Adds an IAzManStoreGroup publisher.
            </summary>
            <param name="publisher">The storeGroup.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManAuthorization)">
            <summary>
            Adds an IAzManAuthorization publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManAttribute{NetSqlAzMan.Interfaces.IAzManAuthorization})">
            <summary>
            Adds an IAzManAttribute publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManAttribute{NetSqlAzMan.Interfaces.IAzManStore})">
            <summary>
            Adds an IAzManAttribute publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManAttribute{NetSqlAzMan.Interfaces.IAzManApplication})">
            <summary>
            Adds an IAzManAttribute publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManAttribute{NetSqlAzMan.Interfaces.IAzManItem})">
            <summary>
            Adds an IAzManAttribute publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManApplicationGroupMember)">
            <summary>
            Adds an IAzManApplicationGroupMember publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManStoreGroupMember)">
            <summary>
            Adds an IAzManStoreGroupMember publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManItem)">
            <summary>
            Adds the IAzManItem publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManStorage)">
            <summary>
            Adds the IAzManStorage publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:NetSqlAzMan.ENS.SqlAzManENS.AddPublisher(NetSqlAzMan.Interfaces.IAzManStore)">
            <summary>
            Adds the IAzManStore publisher.
            </summary>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationDeleted">
            <summary>
            Occurs after a SqlAzManApplication object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationUpdated">
            <summary>
            Occurs after a SqlAzManApplication object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationRenamed">
            <summary>
            Occurs after a SqlAzManApplication object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupCreated">
            <summary>
            Occurs after an Application Group object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemCreated">
            <summary>
            Occurs after an Item object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationPermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Application.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationPermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Application.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupDeleted">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupUpdated">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupRenamed">
            <summary>
            Occurs after a SqlAzManApplicationGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupMemberCreated">
            <summary>
            Occurs after an ApplicationGroupMember object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupDeleted">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupLDAPQueryUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup LDAPQuery has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupUpdated">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupRenamed">
            <summary>
            Occurs after a SqlAzManStoreGroup object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupMemberCreated">
            <summary>
            Occurs after an StoreGroupMember object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.AuthorizationDeleted">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.AuthorizationUpdated">
            <summary>
            Occurs after a SqlAzManAuthorization object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.AuthorizationAttributeCreated">
            <summary>
            Occurs after an Attribute object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.AuthorizationAttributeDeleted">
            <summary>
            Occurs after an Attribute object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.AuthorizationAttributeUpdated">
            <summary>
            Occurs after an Attribute object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationGroupMemberDeleted">
            <summary>
            Occurs after a SqlApplicationGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupMemberDeleted">
            <summary>
            Occurs after a SqlStoreGroupMember object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemDeleted">
            <summary>
            Occurs after a SqlAzManItem object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemUpdated">
            <summary>
            Occurs after a SqlAzManItem object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.BizRuleUpdated">
            <summary>
            Occurs after a SqlAzManItem BizRule has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ItemRenamed">
            <summary>
            Occurs after a SqlAzManItem object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.AuthorizationCreated">
            <summary>
            Occurs after an Authorization object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.DelegateCreated">
            <summary>
            Occurs after a Delegate has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.DelegateDeleted">
            <summary>
            Occurs after a Delegate has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.MemberAdded">
            <summary>
            Occurs after an Item object has been Added as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.MemberRemoved">
            <summary>
            Occurs after an Item object has been Removed as a member Item.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreCreated">
            <summary>
            Occurs after a Store object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreOpened">
            <summary>
            Occurs after a Store object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.TransactionBeginned">
            <summary>
            Occurs after a Storage Transaction has benn initiated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.TransactionTerminated">
            <summary>
            Occurs after a Storage Transaction has benn terminated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.NetSqlAzManModeChanged">
            <summary>
            Occurs after NetSqlAzManMode has ben changed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreDeleted">
            <summary>
            Occurs after a SqlAzManStore object has been Deleted.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreUpdated">
            <summary>
            Occurs after a SqlAzManStore object has been Updated.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreRenamed">
            <summary>
            Occurs after a SqlAzManStore object has been Renamed.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationCreated">
            <summary>
            Occurs after an Application object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StoreGroupCreated">
            <summary>
            Occurs after a StoreGroup object has been Created.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.ApplicationOpened">
            <summary>
            Occurs after an Application object has been Opened.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StorePermissionGranted">
            <summary>
            Occurs after a SQL Login is Granted on the Store.
            </summary>
        </member>
        <member name="E:NetSqlAzMan.ENS.SqlAzManENS.StorePermissionRevoked">
            <summary>
            Occurs after a SQL Login is Revoked on the Store.
            </summary>
        </member>
        <member name="T:NetSqlAzMan.Interfaces.GroupType">
            <summary>
            Type of Group for Store Groups and Application Groups
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.GroupType.Basic">
            <summary>
            Basic group
            </summary>
        </member>
        <member name="F:NetSqlAzMan.Interfaces.GroupType.LDapQuery">
            <summary>
            Dynamic Group (LDAP query)
            </summary>
        </member>
        <member name="T:NetSqlAzMan.BizRuleSourceLanguage">
            <summary>
            Source Code Language for Biz Rules
            </summary>
        </member>
        <member name="F:NetSqlAzMan.BizRuleSourceLanguage.CSharp">
            <summary>
            JavaScript
            </summary>
        </member>
        <member name="F:NetSqlAzMan.BizRuleSourceLanguage.VBNet">
            <summary>
            Visual Basic Script
            </summary>
        </member>
    </members>
</doc>
